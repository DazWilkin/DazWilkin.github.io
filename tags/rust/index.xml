<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/rust/</link>
    <description>Recent content in Rust on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Mar 2020 00:00:00 -0800</lastBuildDate>
    
	<atom:link href="https://pretired.dazwilkin.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.
Cloud Endpoints is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s super confusing to understand and complex to deploy.
If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. Istio), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take existing code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc.</description>
    </item>
    
    <item>
      <title>OriginStamp Rust SDK Example</title>
      <link>https://pretired.dazwilkin.com/posts/200312/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200312/</guid>
      <description>I wrote recently describing Python and Golang clients for OriginStamp based on OriginStamp&amp;rsquo;s API&amp;rsquo;s swagger spec. As a way to pursue learning rust, I&amp;rsquo;ve been forcing myself to write examples using rust. I&amp;rsquo;m honestly finding learning rust tough going and think I&amp;rsquo;m probably better to revert to the &amp;ldquo;Learning Rust&amp;rdquo; tutorials.
That said, herewith an explanation of building a rust client using an OpenAPI (!) generated SDK from OriginStamp&amp;rsquo;s swagger spec.</description>
    </item>
    
    <item>
      <title>PyPi Transparency Client (Rust)</title>
      <link>https://pretired.dazwilkin.com/posts/190930/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/190930/</guid>
      <description>I&amp;rsquo;ve finally being able to hack my way through to a working Rust gRPC client (for PyPi Transparency).
It&amp;rsquo;s not very good: poorly structured, hacky etc. but it serves the purpose of giving me a foothold into Rust development so that I can evolve it as I learn the language and its practices.
There are several Rust crates (SDK) for gRPC. There&amp;rsquo;s no sanctioned SDK for Rust on grpc.io.
I chose stepancheg&amp;lsquo;s grpc-rust because it&amp;rsquo;s a pure Rust implementation (not built atop the C implementation).</description>
    </item>
    
  </channel>
</rss>