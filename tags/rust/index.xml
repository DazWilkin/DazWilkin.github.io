<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/rust/</link>
    <description>Recent content in Rust on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Sep 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bare Metal: WS2812</title>
      <link>https://pretired.dazwilkin.com/posts/250904/</link>
      <pubDate>Thu, 04 Sep 2025 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250904/</guid>
      <description>&lt;p&gt;This one works!&lt;/p&gt;&#xA;&lt;!--![1-Wire ESP32-C3 w/ WS2812](/images/250904.esp32-c3.ws2812.png)--&gt;&#xA;&lt;video autoplay controls loop&gt;&#xA;    &lt;source src=&#34;https://pretired.dazwilkin.com/videos/250904.esp32-c3.ws2812.webm&#34; type=&#34;video/webm&#34; /&gt;&#xA;&lt;/video&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/DazWilkin/7c2deded3ec5f7899f5d850ebd624cfb#file-diagram-json&#34;&gt;&lt;code&gt;diagram.json&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;d gone &lt;em&gt;cough&lt;/em&gt; many years and never heard of 1-Wire and, suddenly, it&amp;rsquo;s everywhere.&lt;/p&gt;&#xA;&lt;p&gt;Addressable LEDs are hugely popular in tinkerer circles. Addressable LEDs come in myriad forms (wheels, matrices) but commonly they&amp;rsquo;re sold as long strips. The part number is &lt;a href=&#34;https://cdn-shop.adafruit.com/datasheets/WS2812B.pdf&#34;&gt;WS2812&lt;/a&gt; and they use 1-Wire too. Each, often multi-color (RGB) LED (often known as a pixel) is combined with an IC that enables the &amp;ldquo;addressable&amp;rdquo; behavior. In essence, a message stream is sent alone the strip&amp;rsquo;s 1-Wire network each &amp;ldquo;pixel&amp;rdquo; in turn takes a message (encoded RGB color) from the stream, colors its LEDs to match and passes the rest (!) of the stream on to the next pixel in the strip. The result is that the strip of pixels can be programmed easily to display complex patterns. The &amp;ldquo;addressability&amp;rdquo; is accurate since the stream originator deterministically controls which pixel gets which RGB encoding but it results entirely from each pixel&amp;rsquo;s position on the strip.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bare Metal: DS18B20</title>
      <link>https://pretired.dazwilkin.com/posts/250903/</link>
      <pubDate>Wed, 03 Sep 2025 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250903/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working through Google&amp;rsquo;s &lt;a href=&#34;https://google.github.io/comprehensive-rust/&#34;&gt;Comprehensive Rust&lt;/a&gt; and, for the past couple of weeks, the &lt;a href=&#34;https://google.github.io/comprehensive-rust/bare-metal.html&#34;&gt;Bare Metal Rust&lt;/a&gt; standalone course that uses the (excellent) &lt;a href=&#34;https://tech.microbit.org/hardware/2-0-revision/&#34;&gt;micro:bit v2&lt;/a&gt; that has a Nordic Semiconductor &lt;a href=&#34;https://tech.microbit.org/hardware/2-0-revision/#nrf52-application-processor&#34;&gt;nRF52833&lt;/a&gt; (an ARM Cortex-M4; interestingly its USB interface is also implemented using an ARM Cortex M0).&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s a wealth of Rust tutorials for microcontrollers and I bought an &lt;a href=&#34;https://www.espressif.com/en/dev-board/esp32-c3-devkit-rust-1-en&#34;&gt;ESP32-C3-DevKit-RUST-1&lt;/a&gt; for another tutorial and spent some time with my favorite &lt;a href=&#34;https://www.raspberrypi.com/products/raspberry-pi-pico/&#34;&gt;Pi Pico&lt;/a&gt; and a newly-acquired &lt;a href=&#34;https://www.raspberrypi.com/products/debug-probe/&#34;&gt;Debug Probe&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gemini Code Assist &#39;agent&#39; mode without `npx mcp-remote` (2/3)</title>
      <link>https://pretired.dazwilkin.com/posts/250627/</link>
      <pubDate>Fri, 27 Jun 2025 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250627/</guid>
      <description>&lt;p&gt;Solved!&lt;/p&gt;&#xA;&lt;p&gt;Ugh.&lt;/p&gt;&#xA;&lt;p&gt;Before I continue, one important detail from yesterday&amp;rsquo;s experience which I think I didn&amp;rsquo;t clarify is that, unlike the Copilot agent, it appears (!?) that Gemini agent only supports integration with MCP servers via stdio. As a result, the only way to integrate with HTTP-based MCP servers (local or remote) is to proxy traffic through stdio as &lt;a href=&#34;https://www.npmjs.com/package/mcp-remote&#34;&gt;&lt;code&gt;mcp-remote&lt;/code&gt;&lt;/a&gt; and the Rust example herein.&lt;/p&gt;&#xA;&lt;p&gt;The most helpful change was to take a hint from the NPM &lt;a href=&#34;https://www.npmjs.com/package/mcp-remote&#34;&gt;&lt;code&gt;mcp-remote&lt;/code&gt;&lt;/a&gt; and create a log file. This helps because, otherwise the &lt;code&gt;mcp-remote&lt;/code&gt; process, because it&amp;rsquo;s launched by Visual Studio Code, well Gemini Code Assist agent, isn&amp;rsquo;t trivial to debug.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gemini Code Assist &#39;agent&#39; mode without `npx mcp-remote` (1/3)</title>
      <link>https://pretired.dazwilkin.com/posts/250626/</link>
      <pubDate>Thu, 26 Jun 2025 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250626/</guid>
      <description>&lt;p&gt;Former Microsoftie and Googler:&lt;/p&gt;&#xA;&lt;p&gt;Good documentation &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-copilot-studio/agent-extend-action-mcp&#34;&gt;Extend your agent with Model Context Protocol&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Not such good documentation: &lt;a href=&#34;https://developers.google.com/gemini-code-assist/docs/use-agentic-chat-pair-programmer&#34;&gt;Using agentic chat as a pair programmer&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Definition of &amp;ldquo;good&amp;rdquo; being, I was able to follow the clear instructions and it worked first time. Well done, Microsoft!&lt;/p&gt;&#xA;&lt;p&gt;This space is moving so quickly and I&amp;rsquo;m happy to alpha test these companies&amp;rsquo; solutions but (a) Google&amp;rsquo;s portfolio is a mess. This week I&amp;rsquo;ve tried (and failed) to use Gemini CLI (because I don&amp;rsquo;t want to run Node.JS on my host machine and it doesn&amp;rsquo;t work in a container: &lt;a href=&#34;https://github.com/google-gemini/gemini-cli/issues/1437&#34;&gt;issue #1437&lt;/a&gt;) and now this.&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC Firestore `Listen` in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/250213/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250213/</guid>
      <description>&lt;p&gt;Obsessing on &lt;a href=&#34;https://pretired.dazwilkin.com/posts/250210/&#34;&gt;gRPC Firestore &lt;code&gt;Listen&lt;/code&gt;&lt;/a&gt; somewhat but it&amp;rsquo;s also a good learning opportunity for me to write stuff in Rust. This doesn&amp;rsquo;t work against Google&amp;rsquo;s public endpoint (possibly for the same reason that gRPCurl doesn&amp;rsquo;t work either) but this does work against the Go server described in the other post.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m also documenting here because I always encounter challenges using TLS with Rust (and this documents 2 working ways to do this with gRPC) as well as references two interesting (rust) examples that use Google services.&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC-Web w/ FauxRPC and Rust</title>
      <link>https://pretired.dazwilkin.com/posts/241113/</link>
      <pubDate>Wed, 13 Nov 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/241113/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://pretired.dazwilkin.com/posts/241025/&#34;&gt;recently&lt;/a&gt; discovering &lt;a href=&#34;https://github.com/sudorandom/fauxrpc&#34;&gt;FauxRPC&lt;/a&gt;, I was sufficiently impressed that I decided to use it to test &lt;a href=&#34;https://www.ack.al&#34;&gt;Ackal&lt;/a&gt;&amp;rsquo;s gRPC services using rust.&lt;/p&gt;&#xA;&lt;p&gt;FauxRPC provides &lt;a href=&#34;https://fauxrpc.com/docs/server/multi-protocol-support/&#34;&gt;multi-protocol support&lt;/a&gt; and so, after successfully implementing the &lt;em&gt;faux&lt;/em&gt; gRPC client tests, I was compelled to try gRPC-Web too. For no immediate benefit other than, it&amp;rsquo;s there, it&amp;rsquo;s free and it&amp;rsquo;s interesting. As an aside, the &lt;em&gt;faux&lt;/em&gt; REST client tests worked without issue using &lt;a href=&#34;https://crates.io/crates/reqwest&#34;&gt;Reqwest&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, my optimism hit a wall with gRPC-Web and what follows is a summary of my unresolved issue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FauxRPC using gRPCurl, Golang and rust</title>
      <link>https://pretired.dazwilkin.com/posts/241025/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/241025/</guid>
      <description>&lt;p&gt;Read &lt;a href=&#34;https://kmcd.dev/posts/fauxrpc-testcontainers/&#34;&gt;FauxRPC + Testcontainers&lt;/a&gt; on Hacker News and was intrigued. I spent a little more time &amp;ldquo;evaluating&amp;rdquo; this than I&amp;rsquo;d planned because I&amp;rsquo;m forcing myself to use rust as much as possible and my ignorance (see below) caused me some challenges.&lt;/p&gt;&#xA;&lt;p&gt;The technology is interesting and works well. The experience helped me explore &lt;a href=&#34;https://testcontainers.com/&#34;&gt;Testcontainers&lt;/a&gt; too which I&amp;rsquo;d heard about but not explored until this week.&lt;/p&gt;&#xA;&lt;p&gt;For my future self:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;What&lt;/th&gt;&#xA;          &lt;th&gt;What?&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://fauxrpc.com/&#34;&gt;FauxRPC&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A general-purpose tool (built using &lt;a href=&#34;https://buf.build/&#34;&gt;Buf&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://connectrpc.com/&#34;&gt;Connect&lt;/a&gt;) that includes registry and stub (gRPC) services that can be (programmatically) configured (using a Protobuf descriptor) and stubs (example method responses) to help test gRPC implementations.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://testcontainers.com/&#34;&gt;Testcontainers&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Write code (e.g. rust) to create and interact (test)services (running in [Docker] containers).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://connectrpc.com/&#34;&gt;Connect&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;(More than a) gRPC implementation used by FauxRPC&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A command-line gRPC tool.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;I started following along with FauxRPC&amp;rsquo;s &lt;a href=&#34;https://fauxrpc.com/docs/testcontainers/&#34;&gt;Testcontainers&lt;/a&gt; example but, being unfamiliar with Connect, I wasn&amp;rsquo;t familiar with its Eliza service. The service is available on &lt;code&gt;demo.connectrpc.com:443&lt;/code&gt; and is described using &lt;a href=&#34;https://github.com/connectrpc/examples-go/blob/main/proto/connectrpc/eliza/v1/eliza.proto&#34;&gt;&lt;code&gt;eliza.proto&lt;/code&gt;&lt;/a&gt; as part of &lt;a href=&#34;https://github.com/connectrpc/examples-go&#34;&gt;&lt;code&gt;examples-go&lt;/code&gt;&lt;/a&gt;. Had I realized this sooner, I would have used this example rather than the Health Checking protocol.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XML-RPC in Rust and Python</title>
      <link>https://pretired.dazwilkin.com/posts/240811/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240811/</guid>
      <description>&lt;p&gt;A lazy Sunday afternoon and my interest was piqued by &lt;a href=&#34;https://en.wikipedia.org/wiki/XML-RPC&#34;&gt;XML-RPC&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;client&#34;&gt;Client&lt;/h2&gt;&#xA;&lt;p&gt;A very basic XML-RPC client wrapped in a Cloud Functions function:&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;main.py&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; functions_framework&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; xmlrpc.client&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endpoint &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_env(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENDPOINT&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;proxy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xmlrpc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;client&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ServerProxy(endpoint)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@functions_framework.http&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(request):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(request)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rqst &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_json(silent&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; proxy&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;:{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;real&amp;#34;&lt;/span&gt;:rqst[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;real&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imag&amp;#34;&lt;/span&gt;:rqst[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imag&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;:{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;real&amp;#34;&lt;/span&gt;:rqst[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;real&amp;#34;&lt;/span&gt;],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imag&amp;#34;&lt;/span&gt;:rqst[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imag&amp;#34;&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;functions-framework==3.*&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run it:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m venv venv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source venv/bin/activate&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 -m pip install --requirement requirements.txt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python3 main.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;server&#34;&gt;Server&lt;/h2&gt;&#xA;&lt;p&gt;Forcing myself to go Rust first and there&amp;rsquo;s an (old) &lt;a href=&#34;https://crates.io/crates/xml-rpc&#34;&gt;xml-rpc&lt;/a&gt; crate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Rust to generate Kubernetes CRD</title>
      <link>https://pretired.dazwilkin.com/posts/240529/</link>
      <pubDate>Wed, 29 May 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240529/</guid>
      <description>&lt;p&gt;For the first time, I chose Rust to solve a problem. Until this, I&amp;rsquo;ve been trying to use Rust to learn the language and to rewrite existing code. But, this problem led me to Rust because my other tools wouldn&amp;rsquo;t cut it.&lt;/p&gt;&#xA;&lt;p&gt;The question was how to represent oneof fields in Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/&#34;&gt;Custom Resource Definitions (CRDs)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;CRDs use &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#schemaObject&#34;&gt;OpenAPI&lt;/a&gt; schema and the YAML that results can be challenging to grok.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apiextensions.k8s.io/v1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;CustomResourceDefinition&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploymentconfigs.example.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;group&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;example.com&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;names&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;categories&lt;/span&gt;: []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DeploymentConfig&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;plural&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploymentconfigs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;shortNames&lt;/span&gt;: []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;singular&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;deploymentconfig&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;scope&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespaced&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;versions&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;additionalPrinterColumns&lt;/span&gt;: []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1alpha1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;schema&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;openAPIV3Schema&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;An example schema&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#f92672&#34;&gt;deployment_strategy&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;oneOf&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                - &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  - &lt;span style=&#34;color:#ae81ff&#34;&gt;rolling_update&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                - &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  - &lt;span style=&#34;color:#ae81ff&#34;&gt;recreate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;recreate&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#f92672&#34;&gt;something&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uint16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;minimum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    - &lt;span style=&#34;color:#ae81ff&#34;&gt;something&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;rolling_update&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;properties&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#f92672&#34;&gt;max_surge&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uint16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;minimum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#f92672&#34;&gt;max_unavailable&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;format&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;uint16&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;minimum&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;integer&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    - &lt;span style=&#34;color:#ae81ff&#34;&gt;max_surge&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    - &lt;span style=&#34;color:#ae81ff&#34;&gt;max_unavailable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            - &lt;span style=&#34;color:#ae81ff&#34;&gt;deployment_strategy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;required&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#ae81ff&#34;&gt;spec&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;DeploymentConfig&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;served&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;subresources&lt;/span&gt;: {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve developed several Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34;&gt;Operators&lt;/a&gt; using the &lt;a href=&#34;https://sdk.operatorframework.io/&#34;&gt;Operator SDK&lt;/a&gt; in Go (which builds upon &lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34;&gt;Kubebuilder&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Translation w/ gRPC 3 ways</title>
      <link>https://pretired.dazwilkin.com/posts/240409/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240409/</guid>
      <description>&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;&#xA;&lt;p&gt;You&amp;rsquo;ll need a Google Cloud project with Cloud Translation (&lt;code&gt;translate.googleapis.com&lt;/code&gt;) enabled and a Service Account (and key) with suitable permissions in order to run the following.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BILLING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Your Billing ID (gcloud billing accounts list)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROJECT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Your Project ID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tester&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.iam.gserviceaccount.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROLES&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roles/cloudtranslate.user&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roles/serviceusage.serviceUsageConsumer&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Project&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud projects create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Associate Project with your Billing Account&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud billing accounts link &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--billing-account&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BILLING&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable Cloud Translation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud services enable translate.googleapis.com &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Service Account&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud iam service-accounts create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Service Account Key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud iam service-accounts keys create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PWD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--iam-account&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EMAIL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update Project IAM permissions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ROLE in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROLES[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gcloud projects add-iam-policy-binding &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --member&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;serviceAccount:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EMAIL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --role&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROLE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the code, you&amp;rsquo;ll need to install &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; and preferably have it in your path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Events protobufs and SDKs</title>
      <link>https://pretired.dazwilkin.com/posts/240405/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240405/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about &lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt;&amp;rsquo;s use of &lt;a href=&#34;https://cloud.google.com/firestore&#34;&gt;Firestore&lt;/a&gt; and subscribing to Firestore document CRUD events:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/230530/&#34;&gt;Routing Firestore events to GKE with Eventarc&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210413/&#34;&gt;Cloud Firestore Triggers in Golang&lt;/a&gt; using &lt;a href=&#34;https://cloud.google.com/functions/docs/calling/cloud-firestore&#34;&gt;Firestore triggers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I find Google&amp;rsquo;s &lt;a href=&#34;cloud.google.com/eventarc&#34;&gt;Eventarc&lt;/a&gt; documentation to be confusing and, in typical Google fashion, even though open-sourced, you often need to do some legwork to find relevant sources, viz:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google&amp;rsquo;s Protobufs for Eventarc (using &lt;a href=&#34;https://cloudevents.io/&#34;&gt;cloudevents&lt;/a&gt;) &lt;a href=&#34;https://github.com/googleapis/google-cloudevents&#34;&gt;&lt;code&gt;google-cloudevents&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/li&gt;&#xA;&lt;li&gt;Convenience (since you can generate these using &lt;code&gt;protoc&lt;/code&gt;) language-specific types generated from the above e.g. &lt;a href=&#34;https://github.com/googleapis/google-cloudevents-go&#34;&gt;&lt;code&gt;google-cloudevents-go&lt;/code&gt;&lt;/a&gt;; &lt;a href=&#34;https://github.com/googleapis/google-cloudevents-python&#34;&gt;&lt;code&gt;google-cloudevents-python&lt;/code&gt;&lt;/a&gt; etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; &amp;ndash; IIUC EventArc is the Google service. It carries Google Events that are CloudEvents. These are defined by protocol buffers schemas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prost! Tonic w/ a dash of JSON</title>
      <link>https://pretired.dazwilkin.com/posts/240325/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240325/</guid>
      <description>&lt;p&gt;I naively (!) began exploring JSON marshaling of Protobufs in rust. Other protobuf language SDKs include JSON marshaling making the process straightforward. I was to learn that, in rust, it&amp;rsquo;s not so simple. Unfortunately, for me, this continues to discourage my further use of rust (rust is just hard).&lt;/p&gt;&#xA;&lt;p&gt;My goal was to marshal an arbitrary protocol buffer message that included a &lt;a href=&#34;https://protobuf.dev/programming-guides/proto3/#oneof&#34;&gt;&lt;code&gt;oneof&lt;/code&gt;&lt;/a&gt; feature. I was unable to JSON marshal the rust generated by &lt;code&gt;tonic&lt;/code&gt; for such a message.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Navigating Koyeb&#39;s API with Rust</title>
      <link>https://pretired.dazwilkin.com/posts/240130/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240130/</guid>
      <description>&lt;p&gt;I wrote about &lt;a href=&#34;https://pretired.dazwilkin.com/posts/240105/&#34;&gt;Navigating Koyeb&amp;rsquo;s Golang SDK&lt;/a&gt;. That client is generated using the &lt;a href=&#34;https://openapi-generator.tech/&#34;&gt;OpenAPI Generator&lt;/a&gt; project using Koyeb&amp;rsquo;s Swagger (now OpenAPI) REST API &lt;a href=&#34;https://developer.koyeb.com/public.swagger.json&#34;&gt;spec&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This post shows how to generate a Rust SDK using the Generator and provides a very basic example of using the SDK.&lt;/p&gt;&#xA;&lt;p&gt;The Generator will create a Rust library project:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VERS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v7.2.0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PACKAGE_NAME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;koyeb-api-client-rs&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PACKAGE_VERS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;podman run &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--interactive --tty --rm &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PWD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:/local &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;docker.io/openapitools/openapi-generator-cli:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;VERS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;generate &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-g&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rust &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://developer.koyeb.com/public.swagger.json &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-o&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/local/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PACKAGE_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--additional-properties&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;packageName&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PACKAGE_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;packageVersion&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PACKAGE_VERS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create the project in &lt;code&gt;${PWD}/${PACKAGE_NAME}&lt;/code&gt; including the documentation at:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kubernetes Operators</title>
      <link>https://pretired.dazwilkin.com/posts/230310/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230310/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt; uses a Kubernetes Operator to orchestrate the lifecycle of its health checks. Ackal&amp;rsquo;s Operator is written in Go using &lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34;&gt;&lt;code&gt;kubebuilder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Yesterday, my interest was piqued by a &lt;a href=&#34;https://metalbear.co&#34;&gt;MetalBear&lt;/a&gt; blog post &lt;a href=&#34;https://metalbear.co/blog/writing-a-kubernetes-operator/&#34;&gt;Writing a Kubernetes Operator [in Rust]&lt;/a&gt;. I spent some time reimplementing one of Ackal&amp;rsquo;s CRDs (&lt;code&gt;Check&lt;/code&gt;) using &lt;a href=&#34;https://github.com/kube-rs/kube&#34;&gt;&lt;code&gt;kube-rs&lt;/code&gt;&lt;/a&gt; and not only refreshed my Rust knowledge but learned a bunch more about Kubernetes and Operators.&lt;/p&gt;&#xA;&lt;p&gt;While rummaging around the Kubernetes documentation, I discovered flant&amp;rsquo;s &lt;a href=&#34;https://github.com/flant/shell-operator&#34;&gt;&lt;code&gt;Shell-operator&lt;/code&gt;&lt;/a&gt; and spent some time today exploring its potential.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pest: parsing in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/201202/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201202/</guid>
      <description>&lt;p&gt;A Microsoft engineer introduced me to &lt;a href=&#34;https://pest.rs&#34;&gt;&lt;code&gt;pest&lt;/code&gt;&lt;/a&gt; as a way to introduce service filtering in a ZeroConf plugin that I&amp;rsquo;m prototyping for &lt;a href=&#34;https://github.com/deislabs/akri&#34;&gt;Akri&lt;/a&gt;. It&amp;rsquo;s been fun to learn but I worry that, because I won&amp;rsquo;t use it frequently, I&amp;rsquo;m going to quickly forget what I&amp;rsquo;ve done. So, here are my notes.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s the problem, I&amp;rsquo;d like to be able to provide users of the ZeroConf plugin with a string-based filter that permits them to filter the services discovered when the Akri agent browses a network.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Akri</title>
      <link>https://pretired.dazwilkin.com/posts/201113/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201113/</guid>
      <description>&lt;p&gt;For the past couple of weeks, I&amp;rsquo;ve been playing around with &lt;a href=&#34;http://github.com/deislabs/akri&#34;&gt;Akri&lt;/a&gt;, a Microsoft (DeisLabs) project for &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2020/10/20/announcing-akri-open-source-project-building-connected-edge-kubernetes/&#34;&gt;building a connected edge with Kubernetes&lt;/a&gt;. Kubernetes, IoT, Rust (and Golang) make this all compelling to me.&lt;/p&gt;&#xA;&lt;p&gt;Initially, I deployed an Akri &lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo.md&#34;&gt;End-to-End&lt;/a&gt; to &lt;a href=&#34;https://microk8s.io/&#34;&gt;MicroK8s&lt;/a&gt; on Google Compute Engine (&lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo-gce.md&#34;&gt;link&lt;/a&gt;) and Digital Ocean (&lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo-do.md&#34;&gt;link&lt;/a&gt;). But I was interested to create me own example and so have proposed a very (!) simple &lt;a href=&#34;https://github.com/DazWilkin/akri/blob/protocol-http/docs/extensibility-http.md&#34;&gt;HTTP-based protocol&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This blog summarizes my thoughts about Akri and an explanation of the HTTP protocol implementation in the hope that this helps others.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deploying a Rust HTTP server to DigitalOcean App Platform</title>
      <link>https://pretired.dazwilkin.com/posts/201008/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201008/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; launched an &lt;a href=&#34;https://www.digitalocean.com/blog/introducing-digitalocean-app-platform-reimagining-paas-to-make-it-simpler-for-you-to-build-deploy-and-scale-apps&#34;&gt;App Platform&lt;/a&gt; with many &lt;a href=&#34;https://www.digitalocean.com/docs/app-platform/languages-frameworks/&#34;&gt;Supported Languages and Frameworks&lt;/a&gt;. I used &lt;a href=&#34;https://www.digitalocean.com/docs/app-platform/languages-frameworks/go/&#34;&gt;Golang&lt;/a&gt; first, then wondered how to use non-natively-supported languages, i.e. Rust.&lt;/p&gt;&#xA;&lt;p&gt;The good news is that &lt;a href=&#34;https://www.digitalocean.com/docs/app-platform/languages-frameworks/docker/&#34;&gt;Docker&lt;/a&gt; is a supported framework and so, you can run pretty much anything.&lt;/p&gt;&#xA;&lt;p&gt;Repo: &lt;a href=&#34;https://github.com/DazWilkin/do-apps-rust&#34;&gt;https://github.com/DazWilkin/do-apps-rust&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;rust&#34;&gt;Rust&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m a Rust noob. I&amp;rsquo;m always receptive to feedback on improvements to the code. I looked to mirror the Golang example. I&amp;rsquo;m using &lt;a href=&#34;https://crates.io/crates/rocket&#34;&gt;rocket&lt;/a&gt; and &lt;a href=&#34;https://crates.io/crates/rocket-prometheus&#34;&gt;rocket-prometheus&lt;/a&gt; for the first time:&lt;/p&gt;&#xA;&lt;p&gt;You will want to install rust nightly (as Rocket has a dependency that requires it) and then you can override the default toolchain for the current project using:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minimizing WASM binaries</title>
      <link>https://pretired.dazwilkin.com/posts/200819/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200819/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve spent time recently playing around with WebAssembly (WASM) and &lt;a href=&#34;https://github.com/wapc&#34;&gt;waPC&lt;/a&gt;. Rust and WASM were born at Mozilla and there&amp;rsquo;s a natural affinity with writing WASM binaries in Rust. In the WASM examples I&amp;rsquo;ve been using for &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200817/&#34;&gt;WASM Transparency&lt;/a&gt;, &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200807/&#34;&gt;waPC and MsgPack&lt;/a&gt; and &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC and Protobufs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve created 3 WASM binaries: &lt;code&gt;complex.wasm&lt;/code&gt;, &lt;code&gt;simplex.wasm&lt;/code&gt; and &lt;code&gt;fabcar.wasm&lt;/code&gt; and each is about 2.5MB when:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo build --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;wasm32-unknown-unknown --release&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://rustwasm.github.io/docs/book&#34;&gt;Rust and WebAssembly&lt;/a&gt; book has an excellent section titled &lt;a href=&#34;https://rustwasm.github.io/docs/book/reference/code-size.html&#34;&gt;Shrinking &lt;code&gt;.wasm.&lt;/code&gt; Code Size&lt;/a&gt;. So, let&amp;rsquo;s see what help that provides.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/200817/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200817/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing around with a proof-of-concept combining WASM and &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;. The hypothesis was to explore using WASM as a form of chaincode with Trillian. The project works but it&amp;rsquo;s far from being a chaincode-like solution.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a couple of (trivial) examples and then I&amp;rsquo;ll explain what&amp;rsquo;s going on and how it&amp;rsquo;s implemented.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Method: mul&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [Client:Invoke] Metadata: complex.wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Success: result:{real:0.036980484 imag:0.3898267}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After shipping a Rust-sourced WASM solution (&lt;code&gt;complex.wasm&lt;/code&gt;) to the WASM transparency server, the client invokes a method &lt;code&gt;mul&lt;/code&gt; that&amp;rsquo;s exposed by it using a dynamically generated request message and outputs the response. Woo hoo! Yes, an expensive way to multiple complex numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>waPC and MsgPack (Rust|Golang)</title>
      <link>https://pretired.dazwilkin.com/posts/200807/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200807/</guid>
      <description>&lt;p&gt;As my reader will know (Hey Mom!), I&amp;rsquo;ve been noodling around with WASM and &lt;a href=&#34;https://github.com/wapc&#34;&gt;waPC&lt;/a&gt;. I&amp;rsquo;ve been exploring ways to pass structured messages across the host:guest boundary.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Protobufs&lt;/a&gt; was my first choice. &lt;a href=&#34;https://medium.com/@KevinHoffman&#34;&gt;@KevinHoffman&lt;/a&gt; created waPC and &lt;a href=&#34;https://github.com/wascc&#34;&gt;waSCC&lt;/a&gt; and he &lt;a href=&#34;https://medium.com/@KevinHoffman/interface-types-are-basically-a-way-of-embedding-metadata-into-a-wasm-file-so-that-arbitrary-data-14965ebdfa48&#34;&gt;explained&lt;/a&gt; to me and that wSCC uses &lt;a href=&#34;https://msgpack.org/&#34;&gt;Message Pack&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s slightly surprising to me (still) that technologies like this exist with &lt;strong&gt;everyone&lt;/strong&gt; else seemingly using them and I&amp;rsquo;ve not heard of them. I don&amp;rsquo;t expect to know everything but I&amp;rsquo;m surprised I&amp;rsquo;ve not stumbled upon msgpack until now.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Envoy WASM filters in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/200723/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200723/</guid>
      <description>&lt;p&gt;A digression thanks to &lt;a href=&#34;https://blog.salrashid.me/&#34;&gt;Sal Rashid&lt;/a&gt; who&amp;rsquo;s exploring WASM filters w/ Envoy.&lt;/p&gt;&#xA;&lt;p&gt;The documentation is sparse but:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/envoy-wasm-filter/&#34;&gt;How to write WASM filters for Envoy&amp;hellip;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There is a Rust SDK but it&amp;rsquo;s not documented:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/proxy-wasm/proxy-wasm-rust-sdk&#34;&gt;proxy-wasm-rust-sdk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I found two useful posts by Rustaceans who were able to make use of it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://antweiss.com/blog/extending-envoy-with-wasm-and-rust/&#34;&gt;Extending Envoy with WASM and Rust&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.red-badger.com/extending-istio-with-rust-and-webassembly&#34;&gt;Extending Istio with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my simple use of the SDK&amp;rsquo;s examples.&lt;/p&gt;&#xA;&lt;h2 id=&#34;wasme&#34;&gt;wasme&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -sL https://run.solo.io/wasme/install | sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.wasme/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wasme --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It may be possible to avoid creating an account on WebAssemblyHub if you&amp;rsquo;re staying local.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust implementation of Crate Transparency using Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200429/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200429/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been hacking on a Rust-based transparent application for Google Trillian. As appears to be my fixation, this personality is for another package manager. This time, Rust&amp;rsquo;s &lt;a href=&#34;https://doc.rust-lang.org/1.0.0/book/crates-and-modules.html&#34;&gt;Crates&lt;/a&gt; often found in &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; which is Rust&amp;rsquo;s Package Registry. I discussed this project earlier this month &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200403/&#34;&gt;Rust Crate Transparency &amp;amp;&amp;amp; Rust SDK for Google Trillian&lt;/a&gt; and and earlier approach for Python&amp;rsquo;s packages with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;pypi-transparency&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This time, of course, I&amp;rsquo;m using Rust. And, by way of a first for me, for the gRPC server implementation (aka &amp;ldquo;personality&amp;rdquo;). I&amp;rsquo;ve been lazy thanks to the excellent &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; and have been using it way of a client. Because I&amp;rsquo;m more familiar with Golang and because I&amp;rsquo;ve written (most) other Trillian personalities in Golang, I resorted to quickly implementing Crate Transparency in Golang too in order to uncover bugs with the Rust implementation. I&amp;rsquo;ll write a follow-up post on the complexity I seem to struggle with when using protobufs and gRPC [in Golang].&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust Crate Transparency &amp;&amp; Rust SDK for Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200403/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200403/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m noodling the utility of a Transparency solution for Rust Crates. When developers push crates to Cargo, a bunch of metadata is associated with the crate. E.g. &lt;a href=&#34;https://crates.io/crates/protobuf&#34;&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt;. As with Golang Modules, Python packages on PyPi etc., there appears to be utility in making tamperproof recordings of these publications. Then, other developers may confirm that a crate pulled from cates.io is highly unlikely to have been changed.&lt;/p&gt;&#xA;&lt;p&gt;On Linux, Cargo stores downloaded crates under &lt;code&gt;${HOME}/.crates/registry&lt;/code&gt;. In the case of the latest version (&lt;code&gt;2.12.0&lt;/code&gt;) of &lt;code&gt;protobuf&lt;/code&gt;, on my machine, I have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&lt;p&gt;&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s &lt;strong&gt;super&lt;/strong&gt; confusing to understand and complex to deploy.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take &lt;strong&gt;existing&lt;/strong&gt; code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc. may be added.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyPi Transparency Client (Rust)</title>
      <link>https://pretired.dazwilkin.com/posts/190930/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190930/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve finally being able to hack my way through to a working Rust gRPC client (for &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190926/&#34;&gt;PyPi Transparency&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s not very good: poorly structured, hacky etc. but it serves the purpose of giving me a foothold into Rust development so that I can evolve it as I learn the language and its practices.&lt;/p&gt;&#xA;&lt;p&gt;There are several Rust crates (SDK) for gRPC. There&amp;rsquo;s no sanctioned SDK for Rust on &lt;a href=&#34;https://grpc.io&#34;&gt;grpc.io&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I chose &lt;a href=&#34;https://github.com/stepancheg&#34;&gt;stepancheg&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/stepancheg/grpc-rust&#34;&gt;grpc-rust&lt;/a&gt; because it&amp;rsquo;s a pure Rust implementation (not built atop the C implementation).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
