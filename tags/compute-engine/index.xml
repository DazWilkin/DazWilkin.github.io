<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compute-Engine on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/compute-engine/</link>
    <description>Recent content in Compute-Engine on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Apr 2022 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/compute-engine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>&lt;p&gt;Last year, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/211130/&#34;&gt;Automatic Certs w/ Golang gRPC service on Compute Engine&lt;/a&gt;. That solution uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34;&gt;ACME&lt;/a&gt; with (the wonderful) &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. Google is offering a private preview of &lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api&#34;&gt;Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)&lt;/a&gt; and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try. You&amp;rsquo;ll need to sign-up for the private preview, for what follows to work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>&lt;p&gt;I needed to deploy a &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto&#34;&gt;healthcheck&lt;/a&gt;-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has &lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/health&#34;&gt;&lt;code&gt;grpc-go/health&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I learned in my travels that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DigitalOcean [App] platform does not (&lt;a href=&#34;https://www.digitalocean.com/community/questions/app-platform-http-2-support&#34;&gt;link&lt;/a&gt;) work with TLS-based gRPC apps.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fly.io&#34;&gt;Fly&lt;/a&gt; has a regression (&lt;a href=&#34;https://community.fly.io/t/urgent-grpc-server-unreachable-via-grpcurl/2694/5&#34;&gt;link&lt;/a&gt;) that breaks gRPC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Akri</title>
      <link>https://pretired.dazwilkin.com/posts/201113/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201113/</guid>
      <description>&lt;p&gt;For the past couple of weeks, I&amp;rsquo;ve been playing around with &lt;a href=&#34;http://github.com/deislabs/akri&#34;&gt;Akri&lt;/a&gt;, a Microsoft (DeisLabs) project for &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2020/10/20/announcing-akri-open-source-project-building-connected-edge-kubernetes/&#34;&gt;building a connected edge with Kubernetes&lt;/a&gt;. Kubernetes, IoT, Rust (and Golang) make this all compelling to me.&lt;/p&gt;&#xA;&lt;p&gt;Initially, I deployed an Akri &lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo.md&#34;&gt;End-to-End&lt;/a&gt; to &lt;a href=&#34;https://microk8s.io/&#34;&gt;MicroK8s&lt;/a&gt; on Google Compute Engine (&lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo-gce.md&#34;&gt;link&lt;/a&gt;) and Digital Ocean (&lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo-do.md&#34;&gt;link&lt;/a&gt;). But I was interested to create me own example and so have proposed a very (!) simple &lt;a href=&#34;https://github.com/DazWilkin/akri/blob/protocol-http/docs/extensibility-http.md&#34;&gt;HTTP-based protocol&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This blog summarizes my thoughts about Akri and an explanation of the HTTP protocol implementation in the hope that this helps others.&lt;/p&gt;</description>
    </item>
    <item>
      <title>akri</title>
      <link>https://pretired.dazwilkin.com/posts/201022/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201022/</guid>
      <description>&lt;p&gt;I was very interested to read about Microsoft&amp;rsquo;s DeisLab&amp;rsquo;s latest (rust-based) Kubernetes project: &lt;a href=&#34;https://cloudblogs.microsoft.com/opensource/2020/10/20/announcing-akri-open-source-project-building-connected-edge-kubernetes/&#34;&gt;akri&lt;/a&gt;. If I understand it correctly, it provides a mechanism to make any (IoT) device accessible to containers running within a cluster. I need to spend more time playing around with it so that I can fully understand it. I had some problems getting the &lt;a href=&#34;https://github.com/deislabs/akri/blob/main/docs/end-to-end-demo.md&#34;&gt;End-to-End&lt;/a&gt; demo running on Google Compute Engine (and then I tried DigitalOcean droplet) instances. So, here&amp;rsquo;s a two-ways solution to get you going.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a GCE Instance as an Inlets Exit Node</title>
      <link>https://pretired.dazwilkin.com/posts/200122/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200122/</guid>
      <description>&lt;p&gt;The prolific &lt;a href=&#34;https://blog.alexellis.io/&#34;&gt;Alex Ellis&lt;/a&gt; has a new project, &lt;a href=&#34;https://github.com/inlets/inlets&#34;&gt;Inlets&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a quick tutorial using &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Compute Platform&amp;rsquo;s (GCP)&lt;/a&gt; &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Compute Engine (GCE)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; I&amp;rsquo;m using one of Google&amp;rsquo;s &lt;a href=&#34;https://cloud.google.com/free/&#34;&gt;&amp;ldquo;Always free&amp;rdquo;&lt;/a&gt; f1-micro instances &lt;strong&gt;but&lt;/strong&gt; you may still pay for network *gress and storage&lt;/p&gt;&#xA;&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m assuming you&amp;rsquo;ve a Google account, have used GCP and have a billing account established, i.e. the following returns at least one billing account:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud beta billing accounts list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;ve only one billing account and it&amp;rsquo;s the one you wish to use, then you can:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Platform (GCP) Exporter</title>
      <link>https://pretired.dazwilkin.com/posts/191220/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/191220/</guid>
      <description>&lt;p&gt;Earlier this week I discussed a &lt;a href=&#34;https://pretired.dazwilkin.com/posts/191218/&#34;&gt;Linode Prometheus Exporter&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I &lt;a href=&#34;https://github.com/metalmatze/digitalocean_exporter/pull/5&#34;&gt;added&lt;/a&gt; metrics for &lt;a href=&#34;https://www.digitalocean.com/products/kubernetes/&#34;&gt;Digital Ocean&amp;rsquo;s Managed Kubernetes service&lt;/a&gt; to &lt;a href=&#34;https://github.com/metalmatze&#34;&gt;@metalmatze&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/metalmatze/digitalocean_exporter&#34;&gt;Digital Ocean Exporter&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This left, metrics for &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt; which has, for many years, been my primary cloud platform. So, today I wrote &lt;a href=&#34;https://github.com/DazWilkin/gcp-exporter&#34;&gt;Prometheus Exporter for Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;All 3 of these exporters follow the template laid down by @metalmatze and, because each of these services has a well-written Golang SDK, it&amp;rsquo;s straightforward to implement an exporter for each of them.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
