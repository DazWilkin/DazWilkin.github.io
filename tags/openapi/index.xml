<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openapi on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/openapi/</link>
    <description>Recent content in Openapi on (p)retired</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jan 2024 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/openapi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Navigating Koyeb&#39;s API with Rust</title>
      <link>https://pretired.dazwilkin.com/posts/240130/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240130/</guid>
      <description>I wrote about Navigating Koyeb&amp;rsquo;s Golang SDK. That client is generated using the OpenAPI Generator project using Koyeb&amp;rsquo;s Swagger (now OpenAPI) REST API spec.&#xA;This post shows how to generate a Rust SDK using the Generator and provides a very basic example of using the SDK.&#xA;The Generator will create a Rust library project:&#xA;VERS=&amp;#34;v7.2.0&amp;#34; PACKAGE_NAME=&amp;#34;koyeb-api-client-rs&amp;#34; PACKAGE_VERS=&amp;#34;1.0.0&amp;#34; podman run \ --interactive --tty --rm \ --volume=${PWD}:/local \ docker.io/openapitools/openapi-generator-cli:${VERS} \ generate \ -g=rust \ -i=https://developer.</description>
    </item>
    <item>
      <title>Cloud Endpoints combine OpenAPI and gRPC... or not!</title>
      <link>https://pretired.dazwilkin.com/posts/210608/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210608/</guid>
      <description>See:&#xA;Multiplexing gRPC and HTTP endpoints with Cloud Run gRPC, Cloud Run &amp;amp; Endpoints ESPv2: Configure Cloud Endpoints to proxy traffic to a Cloud Run multiplexed (gRPC|HTTP) service Challenges:&#xA;Cloud Run permits single port Cloud Run services publishing e.g. gRPC and Prometheus, must multiplex transports Cloud Run services publishing multiplexed transports are challenging to expose using Cloud Endpoints Hypothesis #1: Multiplexed transports work with Cloud Run See: Multiplexing gRPC and HTTP endpoints with Cloud Run</description>
    </item>
  </channel>
</rss>
