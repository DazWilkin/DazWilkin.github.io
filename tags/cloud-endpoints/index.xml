<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud-Endpoints on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/cloud-endpoints/</link>
    <description>Recent content in Cloud-Endpoints on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Jul 2021 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/cloud-endpoints/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Renewing Firebase Authentication ID tokens with gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/210730/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210730/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about a project in which I&amp;rsquo;m using Firebase Authentication in combination with Google Cloud Endpoints and a gRPC service running on Cloud Run:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210614/&#34;&gt;Firebase Authentication, Cloud Endpoints and gRPC (1of2)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210618/&#34;&gt;Firebase Authentication, Cloud Endpoints and gRPC (2of2)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This works well with one caveat, the ID tokens (JWTs) minted by Firebase Authentication have a 3600 second (one hour) lifetime.&lt;/p&gt;&#xA;&lt;p&gt;The user flow in my app is that whenever the user invokes the app&amp;rsquo;s CLI:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (2of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210618/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210618/</guid>
      <description>&lt;p&gt;Earlier this week, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/210614/&#34;&gt;Firebase Authentcation, Cloud Endpoints and gRPC (1of2)&lt;/a&gt;. Since then, I &lt;a href=&#34;https://github.com/GoogleCloudPlatform/esp-v2/issues/542&#34;&gt;learned some more&lt;/a&gt; and added a gRPC interceptor to implement basic authorization for the service.&lt;/p&gt;&#xA;&lt;h2 id=&#34;espv2---allow-unauthenticated&#34;&gt;ESPv2 &lt;code&gt;--allow-unauthenticated&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The Cloud Enpoints (ESPv2) proxy must be run as &lt;code&gt;--allow-unauthenticated&lt;/code&gt; on Cloud Run to ensure that requests make it to the proxy where the request is authenticated and only authenticated requests make it on to the backend service. Thanks Google&amp;rsquo;s &lt;a href=&#34;https://github.com/nareddyt&#34;&gt;Teju Nareddy&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (1of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210614/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210614/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m building a service that requires user authentication. The primary endpoint is a gRPC-based service. I would like to consider using certificate-based auth but this feels&amp;hellip; challenging. Instead, I have been aware of, but never used, &lt;a href=&#34;https://firebase.google.com/products/auth&#34;&gt;Firebase Authentication&lt;/a&gt; and was interested to see that &lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; includes Firebase Authentication as one of its supported auth mechanisms. Curiosity piqued, I confirmed that gRPC supports &lt;a href=&#34;https://grpc.io/docs/guides/auth/#using-google-token-based-authentication&#34;&gt;Google token-based authentication&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The following is a summary of what I did but I&amp;rsquo;ll leave the extensive documentation to Google, (Google&amp;rsquo;s) Firebase and gRPC, all of which, in this case, provide really good explanations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Endpoints combine OpenAPI and gRPC... or not!</title>
      <link>https://pretired.dazwilkin.com/posts/210608/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210608/</guid>
      <description>&lt;p&gt;See:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210519/&#34;&gt;Multiplexing gRPC and HTTP endpoints with Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/200325/&#34;&gt;gRPC, Cloud Run &amp;amp; Endpoints&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/esp-v2/issues/523&#34;&gt;ESPv2: Configure Cloud Endpoints to proxy traffic to a Cloud Run multiplexed (gRPC|HTTP) service&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Challenges:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cloud Run permits single port&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run services publishing e.g. gRPC and Prometheus, must multiplex transports&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run services publishing multiplexed transports are &lt;em&gt;challenging&lt;/em&gt; to expose using Cloud Endpoints&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hypothesis-1-multiplexed-transports-work-with-cloud-run&#34;&gt;Hypothesis #1: Multiplexed transports work with Cloud Run&lt;/h2&gt;&#xA;&lt;p&gt;See: &lt;a href=&#34;https://pretired.dazwilkin.com/posts/210519/&#34;&gt;Multiplexing gRPC and HTTP endpoints with Cloud Run&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&lt;p&gt;&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s &lt;strong&gt;super&lt;/strong&gt; confusing to understand and complex to deploy.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take &lt;strong&gt;existing&lt;/strong&gt; code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc. may be added.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
