<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/google/</link>
    <description>Recent content in Google on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Apr 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/google/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Cloud Translation w/ gRPC 3 ways</title>
      <link>https://pretired.dazwilkin.com/posts/240409/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240409/</guid>
      <description>General You&amp;rsquo;ll need a Google Cloud project with Cloud Translation (translate.googleapis.com) enabled and a Service Account (and key) with suitable permissions in order to run the following.&#xA;BILLING=&amp;#34;...&amp;#34; # Your Billing ID (gcloud billing accounts list) PROJECT=&amp;#34;...&amp;#34; # Your Project ID ACCOUNT=&amp;#34;tester&amp;#34; EMAIL=&amp;#34;${ACCOUNT}@${PROJECT}.iam.gserviceaccount.com&amp;#34; ROLES=( &amp;#34;roles/cloudtranslate.user&amp;#34; &amp;#34;roles/serviceusage.serviceUsageConsumer&amp;#34; ) # Create Project gcloud projects create ${PROJECT} # Associate Project with your Billing Account gcloud billing accounts link ${PROJECT} \ --billing-account=${BILLING} # Enable Cloud Translation gcloud services enable translate.</description>
    </item>
    <item>
      <title>Filtering metrics w/ Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230413/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230413/</guid>
      <description>Google has published two, very good blog posts on cost management:&#xA;How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost This post is about my application cost reductions for Cloud Monitoring for Ackal.&#xA;I&amp;rsquo;m pleased with Google Cloud Managed Service for Prometheus (hereinafter GMP). I&amp;rsquo;ve a strong preference for letting service providers run components of Ackal that I consider important but non-differentiating.</description>
    </item>
    <item>
      <title>Maintaining Container Images</title>
      <link>https://pretired.dazwilkin.com/posts/221128/</link>
      <pubDate>Mon, 28 Nov 2022 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/221128/</guid>
      <description>As I contemplate moving my &amp;ldquo;thing&amp;rdquo; into production, I&amp;rsquo;m anticipating aspects of the application that need maintenance and how this can be automated.&#xA;I&amp;rsquo;d been negligent in the maintenance of some of my container images.&#xA;I&amp;rsquo;m using mostly Go and some Rust as the basis of static(ally-compiled) binaries that run in these containers but not every container has a base image of scratch. scratch is the only base image that doesn&amp;rsquo;t change and thus the only base image that doesn&amp;rsquo;t require that container images buit FROM it, be maintained.</description>
    </item>
    <item>
      <title>Delegate domain-wide authority using Golang</title>
      <link>https://pretired.dazwilkin.com/posts/221117/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/221117/</guid>
      <description>I&amp;rsquo;d not used Google&amp;rsquo;s Domain-wide Delegation from Golang and struggled to find example code.&#xA;Google provides Java and Python samples.&#xA;Google has a myriad packages implementing its OAuth security and it&amp;rsquo;s always daunting trying to determine which one to use.&#xA;As it happens, I backed into the solution through client.Options&#xA;ctx := context.Background() // Google Workspace APIS don&amp;#39;t use IAM do use OAuth scopes // Scopes used here must be reflected in the scopes on the // Google Workspace Domain-wide Delegate client scopes := []string{ .</description>
    </item>
    <item>
      <title>Firestore Export &amp; Import</title>
      <link>https://pretired.dazwilkin.com/posts/221110/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/221110/</guid>
      <description>I&amp;rsquo;m using Firestore to maintain state in my &amp;ldquo;thing&amp;rdquo;.&#xA;In an attempt to ensure that I&amp;rsquo;m able to restore the database, I run (Cloud Scheduler) scheduled backups (see Automating Scheduled Firestore Exports and I&amp;rsquo;ve been testing imports to ensure that the process works.&#xA;It does.&#xA;I thought I&amp;rsquo;d document an important but subtle consideration with Firestore exports (which I&amp;rsquo;d not initially understood).&#xA;Google facilitates that backup process with the sibling commands:</description>
    </item>
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>I needed to deploy a healthcheck-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has grpc-go/health.&#xA;I learned in my travels that:&#xA;DigitalOcean [App] platform does not (link) work with TLS-based gRPC apps. Fly has a regression (link) that breaks gRPC So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.</description>
    </item>
    <item>
      <title>Consul discovers Google Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210520/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210520/</guid>
      <description>I&amp;rsquo;ve written a basic discoverer of Google Cloud Run services. This is for a project and it extends work done in some previous posts to Multiplex gRPC and Prometheus with Cloud Run and to use Consul for Prometheus service discovery.&#xA;This solution:&#xA;Accepts a set of Google Cloud Platform (GCP) projects Trawls them for Cloud Run services Assumes that the services expose Prometheus metrics on :443/metrics Relabels the services Surfaces any discovered Cloud Run services&amp;rsquo; metrics in Prometheus You&amp;rsquo;ll need Docker and Docker Compose.</description>
    </item>
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.&#xA;Fortunately, cmux provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!&#xA;TL;DR See the cmux Limitations and use:</description>
    </item>
    <item>
      <title>Firestore Golang Timestamps &amp; Merging</title>
      <link>https://pretired.dazwilkin.com/posts/210506/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210506/</guid>
      <description>I&amp;rsquo;m using Google&amp;rsquo;s Golang SDK for Firestore. The experience is excellent and I&amp;rsquo;m quikcly becoming a fan of Firestore. However, as a Golang Firestore developer, I&amp;rsquo;m feeling less loved and some of the concepts in the database were causing me a conundrum.&#xA;I&amp;rsquo;m still not entirely certain that I have Timestamps nailed but&amp;hellip; I learned an important lesson on the auto-creation of Timestamps in documents and how to retain these values.</description>
    </item>
    <item>
      <title>Cloud Firestore Triggers in Golang</title>
      <link>https://pretired.dazwilkin.com/posts/210413/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210413/</guid>
      <description>I was pleased to discover that Google provides a non-Node.JS mechanism to subscribe to and act upon Firestore triggers, Google Cloud Firestore Triggers. I&amp;rsquo;ve nothing against Node.JS but, for the project i&amp;rsquo;m developing, everything else is written in Golang. It&amp;rsquo;s good to keep it all in one language.&#xA;I&amp;rsquo;m perplexed that Cloud Functions still (!) only supports Go 1.13 (03-Sep-2019). Even Go 1.14 (25-Feb-2020) was released pre-pandemic and we&amp;rsquo;re now running on 1.</description>
    </item>
    <item>
      <title>Using Golang with the Firestore Emulator</title>
      <link>https://pretired.dazwilkin.com/posts/210317/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210317/</guid>
      <description>This works great but it wasn&amp;rsquo;t clearly documented for non-Firebase users. I assume it will work, as well, for any of the client libraries (not just Golang).&#xA;Assuming you have some (Golang) code (in this case using the Google Cloud Client Library) that interacts with a Firestore database. Something of the form:&#xA;package main import ( &amp;#34;context&amp;#34; &amp;#34;crypto/sha256&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;time&amp;#34; &amp;#34;cloud.google.com/go/firestore&amp;#34; ) func hash(s string) string { h := sha256.</description>
    </item>
    <item>
      <title>Programmatically deploying Cloud Run services (Golang|Python)</title>
      <link>https://pretired.dazwilkin.com/posts/210316/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210316/</guid>
      <description>Phew! Programmitcally deploying Cloud Run services should be easy but it didn&amp;rsquo;t find it so.&#xA;My issues were that the Cloud Run Admin (!) API is poorly documented and it uses non-standard endpoints (thanks Sal!). Here, for others who may struggle with this, is how I got this to work.&#xA;Goal Programmatically (have Golang, Python, want Rust) deploy services to Cloud Run.&#xA;i.e. achieve this:&#xA;gcloud run deploy ${NAME} \ --image=${IMAGE} \ --platform=managed \ --no-allow-unauthenticated \ --region=${REGION} \ --project=${PROJECT} TRICK --log-http is your friend</description>
    </item>
    <item>
      <title>webmention</title>
      <link>https://pretired.dazwilkin.com/posts/201203/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201203/</guid>
      <description>Let&amp;rsquo;s see if this works!?&#xA;I&amp;rsquo;ve added the following link to this site&amp;rsquo;s baseof.html so that it is now rendered for each page:&#xA;&amp;lt;link href=&amp;#34;https://us-central1-webmention.cloudfunctions.net/webmention&amp;#34; rel=&amp;#34;webmention&amp;#34; /&amp;gt; I discovered indieweb yesterday reading about webmention. Who knows what got me to webmention!?&#xA;The principles of both are sound. Instead of relying on come-go behemoths to run our digital world, indieweb seeks to provide technologies that enable us to achieve things without them.</description>
    </item>
    <item>
      <title>Hugo and Google Cloud Storage</title>
      <link>https://pretired.dazwilkin.com/posts/200930/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200930/</guid>
      <description>I&amp;rsquo;m using Hugo as a static site generator for this blog. I&amp;rsquo;m using Firebase (for free) to host lefsilver.&#xA;I have other domains that I want to promote and decided to use Google Cloud Storage buckets for these sites. Using Google Cloud Storage for Hosting a static website and using Hugo to deploy sites to Google Cloud Storage (GCS) are documented but, I didn&amp;rsquo;t find a location where this is combined into a single tutorial and I wanted to add an explanation for ensuring your sites are included in Google&amp;rsquo;s and Bing&amp;rsquo;s search indexes.</description>
    </item>
    <item>
      <title>Actions SDK Conversational Quickstart</title>
      <link>https://pretired.dazwilkin.com/posts/200916/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200916/</guid>
      <description>Google&amp;rsquo;s tutorial didn&amp;rsquo;t work for me.&#xA;In this post, I&amp;rsquo;ll help you get this working.&#xA;https://developers.google.com/assistant/conversational/quickstart&#xA;Create and set up a project This mostly works.&#xA;I recommend using the Actions Console as described to create the project.&#xA;I chose &amp;ldquo;Custom&amp;rdquo; and &amp;ldquo;Blank Project&amp;rdquo;&#xA;You need not enable Actions API as this is done automatically:&#xA;For the console work, I&amp;rsquo;m going to use Google&amp;rsquo;s excellent Cloud Shell. You may access this through the browser or through a terminal:</description>
    </item>
    <item>
      <title>WASM Cloud Functions</title>
      <link>https://pretired.dazwilkin.com/posts/200617/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200617/</guid>
      <description>Following on from waPC &amp;amp; Protobufs and a question on Stack Overflow about Cloud Functions, I was compelled to try running WASM on Cloud Functions no JavaScript.&#xA;I wanted to reuse the WASM waPC functions that I&amp;rsquo;d written in Rust as described in the other post. Cloud Functions does not (yet!?) provide a Rust runtime and so I&amp;rsquo;m using the waPC Host for Go in this example.&#xA;It works!&#xA;PARAMS=$(printf &amp;#39;{&amp;#34;a&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3},&amp;#34;b&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3}}&amp;#39; | base64) TOKEN=$(gcloud auth print-identity-token) echo &amp;#34;{ \&amp;#34;filename\&amp;#34;:\&amp;#34;complex.</description>
    </item>
    <item>
      <title>Rust Crate Transparency &amp;&amp; Rust SDK for Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200403/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200403/</guid>
      <description>I&amp;rsquo;m noodling the utility of a Transparency solution for Rust Crates. When developers push crates to Cargo, a bunch of metadata is associated with the crate. E.g. protobuf. As with Golang Modules, Python packages on PyPi etc., there appears to be utility in making tamperproof recordings of these publications. Then, other developers may confirm that a crate pulled from cates.io is highly unlikely to have been changed.&#xA;On Linux, Cargo stores downloaded crates under ${HOME}/.</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>I&amp;rsquo;ve written previously (Google Trillian for Noobs) about Google&amp;rsquo;s interesting project Trillian and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. PyPi Transparency) that I&amp;rsquo;ve build using it.&#xA;Having gone slight cra-cra on Cloud Run and gRPC this week with Golang gRPC Cloud Run and gRPC, Cloud Run &amp;amp; Endpoints, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&#xA;It mostly (!) works :-)&#xA;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&#xA;Cloud Endpoints is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s super confusing to understand and complex to deploy.&#xA;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. Istio), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take existing code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc.</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>Update: 2020-03-24: Since writing this post, I&amp;rsquo;ve contributed Golang and Rust samples to Google&amp;rsquo;s project. I recommend you start there.&#xA;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&#xA;gRPC comes to Cloud Run gRPC in Google Cloud Run Missing Golang&amp;hellip;. until now ;-)&#xA;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&#xA;Project structure I&amp;rsquo;ll tidy up my repo but the code may be found:</description>
    </item>
    <item>
      <title>Accessing GCR repos from Kubernetes</title>
      <link>https://pretired.dazwilkin.com/posts/200207/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200207/</guid>
      <description>Until today, I&amp;rsquo;d not accessed a Google Container Registry repo from a non-GKE Kubernetes deployment.&#xA;It turns out that it&amp;rsquo;s pretty well-documented (link) but, here&amp;rsquo;s an end-end example.&#xA;Assuming:&#xA;BILLING=[[YOUR-BILLING]] PROJECT=[[YOUR-PROJECT]] SERVER=&amp;#34;us.gcr.io&amp;#34; If not already:&#xA;gcloud projects create {$PROJECT} gcloud beta billing projects link ${PROJECT} \ --billing-account=${BILLING} gcloud services enable containerregistry.googleapis.com \ --project=${PROJECT} Container Registry IMAGE=&amp;#34;busybox&amp;#34; # Or ... docker pull ${IMAGE} docker tag \ ${IMAGE} \ ${SERVER}/${PROJECT}/${IMAGE} docker push ${SERVER}/${PROJECT}/${IMAGE} gcloud container images list-tags ${SERVER}/${PROJECT}/${IMAGE} Service Account Create a service account that&amp;rsquo;s permitted to download (read-only) images from this project&amp;rsquo;s registry</description>
    </item>
    <item>
      <title>Cloud Build wishlist: Mountable Golang Modules Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/200206/</link>
      <pubDate>Thu, 06 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200206/</guid>
      <description>I think it would be valuable if Google were to provide volumes in Cloud Build of package registries (e.g. Go Modules; PyPi; Maven; NPM etc.).&#xA;Google provides a mirror of a subset of Docker Hub. This confers several benefits: Google&amp;rsquo;s imprimatur; speed (latency); bandwidth; and convenience.&#xA;The same benefits would apply to package registries.&#xA;In the meantime, there&amp;rsquo;s a hacky way to gain some of the benefits of these when using Cloud Build.</description>
    </item>
  </channel>
</rss>
