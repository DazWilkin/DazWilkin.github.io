<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Prometheus on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/prometheus/</link>
    <description>Recent content in Prometheus on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Jul 2023 00:00:00 -0700</lastBuildDate><atom:link href="https://pretired.dazwilkin.com/tags/prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prometheus Exporter for Koyeb</title>
      <link>https://pretired.dazwilkin.com/posts/230709/</link>
      <pubDate>Sun, 09 Jul 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230709/</guid>
      <description>Yet another cloud platform exporter for resource|cost management. This time for Koyeb with Koyeb Exporter.
Deploying resources to cloud platforms generally incurs cost based on the number of resources deployed, the time each resource is deployed and the cost (per period of time) that the resource is deployed. It is useful to be able to automatically measure and alert on all the resources deployed on all the platforms that you&amp;rsquo;re using and this is an intent of these exporters.</description>
    </item>
    
    <item>
      <title>Robusta KRR w/ GMP</title>
      <link>https://pretired.dazwilkin.com/posts/230427/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230427/</guid>
      <description>I&amp;rsquo;ve been spending time recently optimizing Ackal&amp;rsquo;s use of Google Cloud Logging and Cloud Monitoring in posts:
Filtering metrics w/ Google Managed Prometheus Kubernetes metrics, metrics everywhere Google Metric Diagnostics and Metric Data Ingested Yesterday, I read that Robusta has a new open source project Kubernetes Resource Recommendations (KRR) so I took some time to evaluate it.
This post describes the changes I had to make to get KRR working with Google Managed Prometheus (GMP):</description>
    </item>
    
    <item>
      <title>Google Metric Diagnostics and Metric Data Ingested</title>
      <link>https://pretired.dazwilkin.com/posts/230425/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230425/</guid>
      <description>I&amp;rsquo;ve been on an efficiency drive with Cloud Logging and Cloud Monitoring.
With regards Cloud Logging, I&amp;rsquo;m contemplating (!) eliminating almost all log storage. As it is I&amp;rsquo;ve buzz cut log storage with a _Default sink that has comprehensive sets of NOT LOG_ID(X) inclusion and exclusion filters. As I was doing so, I began to wonder why I need to pay for the storage of much logging. There&amp;rsquo;s the comfort from knowing that everything you may ever need is being logged (at least for 30 days) but there&amp;rsquo;s also the costs that that entails.</description>
    </item>
    
    <item>
      <title>Prometheus Exporter for Azure (Container Apps)</title>
      <link>https://pretired.dazwilkin.com/posts/230420/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230420/</guid>
      <description>I&amp;rsquo;ve written Prometheus Exporters for various cloud platforms. My motivation for writing these Exporters is that I want a unified mechanism to track my usage of these platform&amp;rsquo;s services. It&amp;rsquo;s easy to deploy a service on a platform and inadvertently leave it running (up a bill). The set of exporters is:
Prometheus Exporter for Azure Prometheus Exporter for Fly.io Prometheus Exporter for GCP Prometheus Exporter for Linode Prometheus Exporter for Vultr This post describes the recently-added Azure Exporter which only provides metrics for Container Apps and Resource Groups.</description>
    </item>
    
    <item>
      <title>Kubernetes metrics, metrics everywhere</title>
      <link>https://pretired.dazwilkin.com/posts/230419/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230419/</guid>
      <description>I&amp;rsquo;ve been tinkering with ways to &amp;ldquo;unit-test&amp;rdquo; my assumptions when using cloud platforms. I recently wrote about good posts by Google describing achieving cost savings with Cloud Monitoring and Cloud Logging:
How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost With Cloud Monitoring, I&amp;rsquo;ve restricted the prometheus.googleapis.com metrics that are being ingested but realized I wanted to track the number of Pods (and Containers) deployed to a GKE cluster.</description>
    </item>
    
    <item>
      <title>Filtering metrics w/ Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230413/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230413/</guid>
      <description>Google has published two, very good blog posts on cost management:
How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost This post is about my application cost reductions for Cloud Monitoring for Ackal.
I&amp;rsquo;m pleased with Google Cloud Managed Service for Prometheus (hereinafter GMP). I&amp;rsquo;ve a strong preference for letting service providers run components of Ackal that I consider important but non-differentiating.</description>
    </item>
    
    <item>
      <title>Kubernetes Operators</title>
      <link>https://pretired.dazwilkin.com/posts/230310/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230310/</guid>
      <description>Ackal uses a Kubernetes Operator to orchestrate the lifecycle of its health checks. Ackal&amp;rsquo;s Operator is written in Go using kubebuilder.
Yesterday, my interest was piqued by a MetalBear blog post Writing a Kubernetes Operator [in Rust]. I spent some time reimplementing one of Ackal&amp;rsquo;s CRDs (Check) using kube-rs and not only refreshed my Rust knowledge but learned a bunch more about Kubernetes and Operators.
While rummaging around the Kubernetes documentation, I discovered flant&amp;rsquo;s Shell-operator and spent some time today exploring its potential.</description>
    </item>
    
    <item>
      <title>Authenticate PromLens to Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230104/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230104/</guid>
      <description>I&amp;rsquo;m using Google Managed Service for Prometheus (GMP) and liking it.
Sometime ago, I tried using PromLens with GMP but GMP&amp;rsquo;s Prometheus HTTP API endpoint requires auth and I&amp;rsquo;ve battled Prometheus&amp;rsquo; somewhat limited auth mechanism before (Scraping metrics exposed by Google Cloud Run services that require authentication).
Listening to PromCon EU 2022 videos, I learned that PromLens has been open sourced and contributed to the Prometheus project. Eventually, the functionality of PromLens should be combined into the Prometheus UI.</description>
    </item>
    
    <item>
      <title>Prometheus Exporters for fly.io and Vultr</title>
      <link>https://pretired.dazwilkin.com/posts/220520/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/220520/</guid>
      <description>I&amp;rsquo;ve been on a roll building utilities this week. I developed a Service Health dashboard for my &amp;ldquo;thing&amp;rdquo;, a Prometheus Exporter for Fly.io and today, a Prometheus Exporter for Vultr. This is motivated by the fear that I will forget a deployed Cloud resource and incur a horrible bill.
I&amp;rsquo;ve no written several Prometheus Exporters for cloud platforms:
Prometheus Exporter for GCP Prometheus Exporter for Linode Prometheus Exporter for Fly.io Prometheus Exporter for Vultr Each of them monitors resource deployments and produces resource count metrics that can be scraped by Prometheus and alerted with Alertmanager.</description>
    </item>
    
    <item>
      <title>Prometheus HTTP Service Discovery of Cloud Run services</title>
      <link>https://pretired.dazwilkin.com/posts/220225/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/220225/</guid>
      <description>Some time ago, I wrote about using Prometheus Service Discovery w/ Consul for Cloud Run and also Scraping metrics exposed by Google Cloud Run services that require authentication. Both solutions remain viable but they didn&amp;rsquo;t address another use case for Prometheus and Cloud Run services that I have with a &amp;ldquo;thing&amp;rdquo; that I&amp;rsquo;ve been building.
In this scenario, I want to:
Configure Prometheus to scrape Cloud Run service metrics Discover Cloud Run services dynamically Authenticate to Cloud Run using Firebase Auth ID tokens These requirements and &amp;ndash; one other &amp;ndash; present several challenges:</description>
    </item>
    
    <item>
      <title>Scraping metrics exposed by Google Cloud Run services that require authentication</title>
      <link>https://pretired.dazwilkin.com/posts/211005/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/211005/</guid>
      <description>I&amp;rsquo;ve written a solution (gcp-oidc-token-proxy) that can be used in conjunction with Prometheus OAuth2 to authenticate requests so that Prometheus can scrape metrics exposed by e.g. Cloud Run services that require authentication. The solution resulted from my question on Stack overflow.
Problem #1: Endpoint requires authentication
Given a Cloud Run service URL for which:
ENDPOINT=&amp;#34;my-server-blahblah-wl.a.run.app&amp;#34; # Returns 200 when authentication w/ an ID token TOKEN=&amp;#34;$(gcloud auth print-identity-token)&amp;#34; curl \ --silent \ --request GET \ --header &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ --write-out &amp;#34;%{response_code}&amp;#34; \ --output /dev/null \ https://${ENDPOINT}/metrics # Returns 403 otherwise curl \ --silent \ --request GET \ --write-out &amp;#34;%{response_code}&amp;#34; \ --output /dev/null \ https://${ENDPOINT}/metrics Problem #2: Prometheus OAuth2 configuration is constrained</description>
    </item>
    
    <item>
      <title>Consul discovers Google Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210520/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210520/</guid>
      <description>I&amp;rsquo;ve written a basic discoverer of Google Cloud Run services. This is for a project and it extends work done in some previous posts to Multiplex gRPC and Prometheus with Cloud Run and to use Consul for Prometheus service discovery.
This solution:
Accepts a set of Google Cloud Platform (GCP) projects Trawls them for Cloud Run services Assumes that the services expose Prometheus metrics on :443/metrics Relabels the services Surfaces any discovered Cloud Run services&amp;rsquo; metrics in Prometheus You&amp;rsquo;ll need Docker and Docker Compose.</description>
    </item>
    
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.
Fortunately, cmux provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!
TL;DR See the cmux Limitations and use:</description>
    </item>
    
    <item>
      <title>Prometheus Service Discovery w/ Consul for Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210419/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:09 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210419/</guid>
      <description>I&amp;rsquo;m working on a project that will programmatically create Google Cloud Run services and I want to be able to dynamically discover these services using Prometheus.
This is one solution.
NOTE Google Cloud Run is the service I&amp;rsquo;m using, but the principle described herein applies to any runtime service that you&amp;rsquo;d wish to use.
Why is this challenging? IIUC, it&amp;rsquo;s primarily because Prometheus has a limited set of plugins for service discovery, see the sections that include _sd_ in Prometheus Configuration documentation.</description>
    </item>
    
    <item>
      <title>Prometheus VPA Recommendations</title>
      <link>https://pretired.dazwilkin.com/posts/210305/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210305/</guid>
      <description>Phew!
For Want of a Nail
I was interested in learning how to Manage Resources for Containers. On the way, I learned and discovered:
kubectl top Vertical Pod Autoscaler A (valuable) digression through PodMonitor kube-state-metrics `kubectl-patch Created a Graph References Kubernetes Resources Visual Studio Code has begun to bug me (reasonably) to add resources to Kubernetes manifests.
E.g.:
resources: limits: cpu: &amp;#34;1&amp;#34; memory: &amp;#34;512Mi&amp;#34; I&amp;rsquo;ve been spending time with Deislab&amp;rsquo;s Akri and decided to determine whether Akri&amp;rsquo;s primary resources (Agent, Controller) and some of my creations HTTP Device and Discovery, were being suitably constrained.</description>
    </item>
    
    <item>
      <title>Deploying a Rust HTTP server to DigitalOcean App Platform</title>
      <link>https://pretired.dazwilkin.com/posts/201008/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/201008/</guid>
      <description>DigitalOcean launched an App Platform with many Supported Languages and Frameworks. I used Golang first, then wondered how to use non-natively-supported languages, i.e. Rust.
The good news is that Docker is a supported framework and so, you can run pretty much anything.
Repo: https://github.com/DazWilkin/do-apps-rust
Rust I&amp;rsquo;m a Rust noob. I&amp;rsquo;m always receptive to feedback on improvements to the code. I looked to mirror the Golang example. I&amp;rsquo;m using rocket and rocket-prometheus for the first time:</description>
    </item>
    
    <item>
      <title>Google Home Exporter</title>
      <link>https://pretired.dazwilkin.com/posts/200107/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200107/</guid>
      <description>I&amp;rsquo;m obsessing over Prometheus exporters. First came Linode Exporter, then GCP Exporter and, on Sunday, I stumbled upon a reverse-engineered API for Google Home devices and so wrote a very basic Google Home SDK and a similarly basic Google Home Exporter:
The SDK only implements /setup/eureka_info and then only some of the returned properties. There&amp;rsquo;s not a lot of metric-like data to use besides SignalLevel (signal_level) and NoiseLevel (noise_level). I&amp;rsquo;m not clear on the meaning of some of the properties.</description>
    </item>
    
    <item>
      <title>Google Cloud Platform (GCP) Exporter</title>
      <link>https://pretired.dazwilkin.com/posts/191220/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/191220/</guid>
      <description>Earlier this week I discussed a Linode Prometheus Exporter.
I added metrics for Digital Ocean&amp;rsquo;s Managed Kubernetes service to @metalmatze&amp;rsquo;s Digital Ocean Exporter.
This left, metrics for Google Cloud Platform (GCP) which has, for many years, been my primary cloud platform. So, today I wrote Prometheus Exporter for Google Cloud Platform.
All 3 of these exporters follow the template laid down by @metalmatze and, because each of these services has a well-written Golang SDK, it&amp;rsquo;s straightforward to implement an exporter for each of them.</description>
    </item>
    
    <item>
      <title>Prometheus AlertManager</title>
      <link>https://pretired.dazwilkin.com/posts/191219/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/191219/</guid>
      <description>Yesterday I discussed a Linode Prometheus Exporter and tantalized use of Prometheus AlertManager.
Success:
Configure The process is straightforward although I found the Prometheus (config) documentation slightly unwieldy to navigate :-(
The overall process is documented.
Here are the steps I took:
Configure Prometheus Configure AlertManager Revise Docker Compose Configure Prometheus Added the following to prometheus.yml:
rule_files: - &amp;#34;/etc/alertmanager/rules/linode.yml&amp;#34; alerting: alertmanagers: - scheme: http static_configs: - targets: - &amp;#34;alertmanager:9093&amp;#34; Rules must be defined in separate rules files.</description>
    </item>
    
    <item>
      <title>Linode Prometheus Exporter</title>
      <link>https://pretired.dazwilkin.com/posts/191218/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/191218/</guid>
      <description>I enjoy using Prometheus and have toyed around with it for some time particularly in combination with Kubernetes. I signed up with Linode [referral] compelled by the addition of a managed Kubernetes service called Linode Kubernetes Engine (LKE). I have an anxiety that I&amp;rsquo;ll inadvertently leave resources running (unused) on a cloud platform. Instead of refreshing the relevant billing page, it struck me that Prometheus may (not yet proven) help.</description>
    </item>
    
  </channel>
</rss>
