<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protoc on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/protoc/</link>
    <description>Recent content in Protoc on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Mar 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/protoc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prost! Tonic w/ a dash of JSON</title>
      <link>https://pretired.dazwilkin.com/posts/240325/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240325/</guid>
      <description>I naively (!) began exploring JSON marshaling of Protobufs in rust. Other protobuf language SDKs include JSON marshaling making the process straightforward. I was to learn that, in rust, it&amp;rsquo;s not so simple. Unfortunately, for me, this continues to discourage my further use of rust (rust is just hard).&#xA;My goal was to marshal an arbitrary protocol buffer message that included a oneof feature. I was unable to JSON marshal the rust generated by tonic for such a message.</description>
    </item>
    <item>
      <title>Gnarly Protocol Buffers compilation</title>
      <link>https://pretired.dazwilkin.com/posts/240117/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240117/</guid>
      <description>This Stackoverflow question piqued my interest:&#xA;retry policy configuration for grpc not working&#xA;Service Config in gRPC is new to me but, my initial suspicion (albeit incorrect) was that the JSON types were incorrect.&#xA;I decided to try using the Protocol Buffer source service_config.proto to verify the JSON.&#xA;To do so I needed to compile the source&amp;hellip;. it was gnarly.&#xA;There are 2 repos used:&#xA;googleapis grpc-proto The service_config.proto includes options for java_package but no go_package.</description>
    </item>
    <item>
      <title>Python Protobuf changes</title>
      <link>https://pretired.dazwilkin.com/posts/230607/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230607/</guid>
      <description>Python&amp;rsquo;s Protocol Buffers code-generation using protoc has had significant changes that can cause developers&amp;hellip; &amp;ldquo;challenges&amp;rdquo;. This post summarizes my experience of these mostly to save me from repreatedly recreating this history for myself when I forget it.&#xA;Version change Generated code change Implementation Backends I&amp;rsquo;ll use this summarized table of proto and the Pypi library&amp;rsquo;s history in this post. protoc refers to the compiler that supports code-generation in multiple languages. protobuf refers to the corresponding Python (runtime) library on Pypi:</description>
    </item>
    <item>
      <title>Google&#39;s New Golang SDK for Protobufs</title>
      <link>https://pretired.dazwilkin.com/posts/200310/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200310/</guid>
      <description>Google has released a new Golang SDK for protobuf. In the [announcement], a useful tool to redact properties is described. If like me, this is somewhat novel to you, here&amp;rsquo;s a mashup using Google&amp;rsquo;s Protocol Buffer Basics w/ redaction.&#xA;To be very clear, as it&amp;rsquo;s an important distinction:&#xA;Version Repo Docs v2 google.golang.org/protobuf Docs v1 github.com/golang/protobuf Docs Project Here&amp;rsquo;s my project structure:&#xA;. ├── protoc-3.11.4-linux-x86_64 │ ├── bin │ │ └── protoc │ ├── include │ │ └── google │ └── readme.</description>
    </item>
  </channel>
</rss>
