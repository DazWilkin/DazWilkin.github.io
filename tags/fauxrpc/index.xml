<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FauxRPC on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/fauxrpc/</link>
    <description>Recent content in FauxRPC on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2024 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/fauxrpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC-Web w/ FauxRPC and Rust</title>
      <link>https://pretired.dazwilkin.com/posts/241113/</link>
      <pubDate>Wed, 13 Nov 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/241113/</guid>
      <description>&lt;p&gt;After &lt;a href=&#34;https://pretired.dazwilkin.com/posts/241025/&#34;&gt;recently&lt;/a&gt; discovering &lt;a href=&#34;https://github.com/sudorandom/fauxrpc&#34;&gt;FauxRPC&lt;/a&gt;, I was sufficiently impressed that I decided to use it to test &lt;a href=&#34;https://www.ack.al&#34;&gt;Ackal&lt;/a&gt;&amp;rsquo;s gRPC services using rust.&lt;/p&gt;&#xA;&lt;p&gt;FauxRPC provides &lt;a href=&#34;https://fauxrpc.com/docs/server/multi-protocol-support/&#34;&gt;multi-protocol support&lt;/a&gt; and so, after successfully implementing the &lt;em&gt;faux&lt;/em&gt; gRPC client tests, I was compelled to try gRPC-Web too. For no immediate benefit other than, it&amp;rsquo;s there, it&amp;rsquo;s free and it&amp;rsquo;s interesting. As an aside, the &lt;em&gt;faux&lt;/em&gt; REST client tests worked without issue using &lt;a href=&#34;https://crates.io/crates/reqwest&#34;&gt;Reqwest&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, my optimism hit a wall with gRPC-Web and what follows is a summary of my unresolved issue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>FauxRPC using gRPCurl, Golang and rust</title>
      <link>https://pretired.dazwilkin.com/posts/241025/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/241025/</guid>
      <description>&lt;p&gt;Read &lt;a href=&#34;https://kmcd.dev/posts/fauxrpc-testcontainers/&#34;&gt;FauxRPC + Testcontainers&lt;/a&gt; on Hacker News and was intrigued. I spent a little more time &amp;ldquo;evaluating&amp;rdquo; this than I&amp;rsquo;d planned because I&amp;rsquo;m forcing myself to use rust as much as possible and my ignorance (see below) caused me some challenges.&lt;/p&gt;&#xA;&lt;p&gt;The technology is interesting and works well. The experience helped me explore &lt;a href=&#34;https://testcontainers.com/&#34;&gt;Testcontainers&lt;/a&gt; too which I&amp;rsquo;d heard about but not explored until this week.&lt;/p&gt;&#xA;&lt;p&gt;For my future self:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;What&lt;/th&gt;&#xA;          &lt;th&gt;What?&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://fauxrpc.com/&#34;&gt;FauxRPC&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A general-purpose tool (built using &lt;a href=&#34;https://buf.build/&#34;&gt;Buf&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://connectrpc.com/&#34;&gt;Connect&lt;/a&gt;) that includes registry and stub (gRPC) services that can be (programmatically) configured (using a Protobuf descriptor) and stubs (example method responses) to help test gRPC implementations.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://testcontainers.com/&#34;&gt;Testcontainers&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Write code (e.g. rust) to create and interact (test)services (running in [Docker] containers).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://connectrpc.com/&#34;&gt;Connect&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;(More than a) gRPC implementation used by FauxRPC&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;A command-line gRPC tool.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;I started following along with FauxRPC&amp;rsquo;s &lt;a href=&#34;https://fauxrpc.com/docs/testcontainers/&#34;&gt;Testcontainers&lt;/a&gt; example but, being unfamiliar with Connect, I wasn&amp;rsquo;t familiar with its Eliza service. The service is available on &lt;code&gt;demo.connectrpc.com:443&lt;/code&gt; and is described using &lt;a href=&#34;https://github.com/connectrpc/examples-go/blob/main/proto/connectrpc/eliza/v1/eliza.proto&#34;&gt;&lt;code&gt;eliza.proto&lt;/code&gt;&lt;/a&gt; as part of &lt;a href=&#34;https://github.com/connectrpc/examples-go&#34;&gt;&lt;code&gt;examples-go&lt;/code&gt;&lt;/a&gt;. Had I realized this sooner, I would have used this example rather than the Health Checking protocol.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
