<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud-logging on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/cloud-logging/</link>
    <description>Recent content in cloud-logging on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2023 11:00:00 +0000</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/cloud-logging/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Listing Cloud Logging log-based metrics using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/231222/</link>
      <pubDate>Fri, 22 Dec 2023 11:00:00 +0000</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/231222/</guid>
      <description>Referring to Accessing Google Services using gRPC, I wanted to query a project&amp;rsquo;s Cloud Logging for log-based metrics using gRPC.&#xA;In summary:&#xA;ENDPOINT=&amp;#34;logging.googleapis.com:443&amp;#34; ROOT=&amp;#34;/path/to/googleapis&amp;#34; # https://github.com/googleapis/googleapis PACKAGE=&amp;#34;google/logging/v2&amp;#34; # NB Not logging.proto PROTO=&amp;#34;${ROOT}/${PACKAGE}/logging_metrics.proto&amp;#34; TOKEN=$(gcloud auth print-access-token) PROJECT=&amp;#34;...&amp;#34; PACKAGE=&amp;#34;google.logging.v2&amp;#34; SERVICE=&amp;#34;MetricsServiceV2&amp;#34; METHOD=&amp;#34;${PACKAGE}.${SERVICE}/ListLogMetrics&amp;#34; # ListLogMetricsRequest fields PARENT=&amp;#34;projects/${PROJECT}&amp;#34; grpcurl \ --import-path=${ROOT} \ --proto=${PROTO} \ -H &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ -d &amp;#34;{\&amp;#34;parent\&amp;#34;: \&amp;#34;${PARENT}\&amp;#34;}&amp;#34; \ ${ENDPOINT} ${METHOD} From APIs Explorer, Cloud Logging API v2, instead of the REST reference, browse the gRPC reference specifically the package google.</description>
    </item>
    <item>
      <title>Golang Structured Logging w/ Google Cloud Logging (2)</title>
      <link>https://pretired.dazwilkin.com/posts/211018/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211018/</guid>
      <description>UPDATE There&amp;rsquo;s an issue with my naive implementation of RenderValuesHook as described in this post. I summarized the problem in this issue where I&amp;rsquo;ve outlined (hopefully) a more robust solution.&#xA;Recently, I described how to configure Golang logging so that user-defined key-values applied to the logs are parsed when ingested by Google Cloud Logging.&#xA;Here&amp;rsquo;s an example of what we&amp;rsquo;re trying to achieve. This is an example Cloud Logging log entry that incorporates user-defined labels (see dog:freddie and foo:bar) and a readily-querable jsonPayload:</description>
    </item>
    <item>
      <title>Golang Structured Logging w/ Google Cloud Logging</title>
      <link>https://pretired.dazwilkin.com/posts/210928/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210928/</guid>
      <description>I&amp;rsquo;ve multiple components in an app and these are deployed across multiple Google Cloud Platform (GCP) services: Kubernetes Engine, Cloud Functions, Cloud Run, etc. Almost everything is written in Golang and I started the project using go-logr.&#xA;logr is in two parts: a Logger that you use to write log entries; a LogSink (adaptor) that consumes log entries and outputs them to a specific log implementation.&#xA;Initially, I defaulted to using stdr which is a LogSink for Go&amp;rsquo;s standard logging implementation.</description>
    </item>
  </channel>
</rss>
