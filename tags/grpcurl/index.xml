<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GRPCurl on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/grpcurl/</link>
    <description>Recent content in GRPCurl on (p)retired</description>
    <generator>Hugo 0.125.0-DEV</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 Dec 2023 11:00:00 +0000</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/grpcurl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Listing Cloud Logging log-based metrics using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/231222/</link>
      <pubDate>Fri, 22 Dec 2023 11:00:00 +0000</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/231222/</guid>
      <description>Referring to Accessing Google Services using gRPC, I wanted to query a project&amp;rsquo;s Cloud Logging for log-based metrics using gRPC.&#xA;In summary:&#xA;ENDPOINT=&amp;#34;logging.googleapis.com:443&amp;#34; ROOT=&amp;#34;/path/to/googleapis&amp;#34; # https://github.com/googleapis/googleapis PACKAGE=&amp;#34;google/logging/v2&amp;#34; # NB Not logging.proto PROTO=&amp;#34;${ROOT}/${PACKAGE}/logging_metrics.proto&amp;#34; TOKEN=$(gcloud auth print-access-token) PROJECT=&amp;#34;...&amp;#34; PACKAGE=&amp;#34;google.logging.v2&amp;#34; SERVICE=&amp;#34;MetricsServiceV2&amp;#34; METHOD=&amp;#34;${PACKAGE}.${SERVICE}/ListLogMetrics&amp;#34; # ListLogMetricsRequest fields PARENT=&amp;#34;projects/${PROJECT}&amp;#34; grpcurl \ --import-path=${ROOT} \ --proto=${PROTO} \ -H &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ -d &amp;#34;{\&amp;#34;parent\&amp;#34;: \&amp;#34;${PARENT}\&amp;#34;}&amp;#34; \ ${ENDPOINT} ${METHOD} From APIs Explorer, Cloud Logging API v2, instead of the REST reference, browse the gRPC reference specifically the package google.</description>
    </item>
    <item>
      <title>Access Google Services using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/230314/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230314/</guid>
      <description>Google publishes interface definitions of Google APIs (services) that support REST and gRPC in a repo called Google APIs. Google&amp;rsquo;s SDKs uses gRPC to access these services but, how to do this using e.g. gRPCurl?&#xA;I wanted to debug Cloud Profiler and its agent makes UpdateProfile RPCs to cloudprofiler.googleapis.com. Cloud Profiler is more challenging service to debug because (a) it&amp;rsquo;s publicly &amp;ldquo;write-only&amp;rdquo;; and (b) it has complex messages. UpdateProfile sends UpdateProfileRequest messages that include Profile messages that include profile_bytes which are gzip compressed serialized protos of pprof&amp;rsquo;s Profile.</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>I&amp;rsquo;ve written previously (Google Trillian for Noobs) about Google&amp;rsquo;s interesting project Trillian and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. PyPi Transparency) that I&amp;rsquo;ve build using it.&#xA;Having gone slight cra-cra on Cloud Run and gRPC this week with Golang gRPC Cloud Run and gRPC, Cloud Run &amp;amp; Endpoints, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&#xA;It mostly (!) works :-)&#xA;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&#xA;Cloud Endpoints is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s super confusing to understand and complex to deploy.&#xA;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. Istio), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take existing code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc.</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>Update: 2020-03-24: Since writing this post, I&amp;rsquo;ve contributed Golang and Rust samples to Google&amp;rsquo;s project. I recommend you start there.&#xA;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&#xA;gRPC comes to Cloud Run gRPC in Google Cloud Run Missing Golang&amp;hellip;. until now ;-)&#xA;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&#xA;Project structure I&amp;rsquo;ll tidy up my repo but the code may be found:</description>
    </item>
  </channel>
</rss>
