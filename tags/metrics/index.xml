<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metrics on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/metrics/</link>
    <description>Recent content in metrics on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 May 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://pretired.dazwilkin.com/tags/metrics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to one endpoint. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics. Fortunately, cmux provides a solution!
 TL;DR See the cmux Limitations and use:
grpcl := m.MatchWithWriters( cmux.HTTP2MatchHeaderFieldSendSettings(&amp;#34;content-type&amp;#34;, &amp;#34;application/grpc&amp;#34;))  Extending the example from the cmux repo:
package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/prometheus/client_golang/prometheus/promhttp&amp;#34; &amp;#34;github.com/soheilhy/cmux&amp;#34; &amp;#34;google.golang.org/grpc&amp;#34; &amp;#34;google.golang.org/grpc/examples/helloworld/helloworld&amp;#34; grpchello &amp;#34;google.golang.org/grpc/examples/helloworld/helloworld&amp;#34; ) func main() { l, err := net.</description>
    </item>
    
  </channel>
</rss>
