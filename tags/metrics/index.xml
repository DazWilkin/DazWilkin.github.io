<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>metrics on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/metrics/</link>
    <description>Recent content in metrics on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 May 2022 00:00:00 -0700</lastBuildDate><atom:link href="https://pretired.dazwilkin.com/tags/metrics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prometheus Exporters for fly.io and Vultr</title>
      <link>https://pretired.dazwilkin.com/posts/220520/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/220520/</guid>
      <description>I&amp;rsquo;ve been on a roll building utilities this week. I developed a Service Health dashboard for my &amp;ldquo;thing&amp;rdquo;, a Prometheus Exporter for Fly.io and today, a Prometheus Exporter for Vultr. This is motivated by the fear that I will forget a deployed Cloud resource and incur a horrible bill.
I&amp;rsquo;ve no written several Prometheus Exporters for cloud platforms:
Prometheus Exporter for GCP Prometheus Exporter for Linode Prometheus Exporter for Fly.io Prometheus Exporter for Vultr Each of them monitors resource deployments and produces resource count metrics that can be scraped by Prometheus and alerted with Alertmanager.</description>
    </item>
    
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.
Fortunately, cmux provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!
TL;DR See the cmux Limitations and use:</description>
    </item>
    
  </channel>
</rss>
