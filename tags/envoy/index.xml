<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Envoy on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/envoy/</link>
    <description>Recent content in Envoy on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Apr 2025 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/envoy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configuring Envoy to proxy Google Cloud Run v2</title>
      <link>https://pretired.dazwilkin.com/posts/250429/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250429/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m building an emulator for &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Cloud Run&lt;/a&gt;. As I considered the solution, I assumed (more later) that I could implement Google&amp;rsquo;s gRPC interface for &lt;a href=&#34;https://github.com/googleapis/googleapis/tree/83df85b45a5d3e85b48f2571e1c8e57cdfd57e6c/google/cloud/run&#34;&gt;Cloud Run&lt;/a&gt; and use &lt;a href=&#34;https://www.envoyproxy.io/&#34;&gt;Envoy&lt;/a&gt; to proxy HTTP/REST requests to the gRPC service using Envoy&amp;rsquo;s &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter&#34;&gt;gRPC-JSON transcoder&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Google calls this process &lt;a href=&#34;https://cloud.google.com/endpoints/docs/grpc/transcoding&#34;&gt;Transcoding HTTP/JSON to gRPC&lt;/a&gt; which I think it a better description.&lt;/p&gt;&#xA;&lt;p&gt;Google&amp;rsquo;s Cloud Run &lt;code&gt;v2&lt;/code&gt; (&lt;code&gt;v1&lt;/code&gt; is no longer published to the &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;&lt;code&gt;googleapis&lt;/code&gt;&lt;/a&gt; repo) &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/83df85b45a5d3e85b48f2571e1c8e57cdfd57e6c/google/cloud/run/v2/service.proto&#34;&gt;&lt;code&gt;service.proto&lt;/code&gt;&lt;/a&gt; includes the following &lt;code&gt;Services&lt;/code&gt; definition for &lt;code&gt;CreateService&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Envoy WASM filters in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/200723/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200723/</guid>
      <description>&lt;p&gt;A digression thanks to &lt;a href=&#34;https://blog.salrashid.me/&#34;&gt;Sal Rashid&lt;/a&gt; who&amp;rsquo;s exploring WASM filters w/ Envoy.&lt;/p&gt;&#xA;&lt;p&gt;The documentation is sparse but:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/envoy-wasm-filter/&#34;&gt;How to write WASM filters for Envoy&amp;hellip;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There is a Rust SDK but it&amp;rsquo;s not documented:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/proxy-wasm/proxy-wasm-rust-sdk&#34;&gt;proxy-wasm-rust-sdk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I found two useful posts by Rustaceans who were able to make use of it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://antweiss.com/blog/extending-envoy-with-wasm-and-rust/&#34;&gt;Extending Envoy with WASM and Rust&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.red-badger.com/extending-istio-with-rust-and-webassembly&#34;&gt;Extending Istio with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my simple use of the SDK&amp;rsquo;s examples.&lt;/p&gt;&#xA;&lt;h2 id=&#34;wasme&#34;&gt;wasme&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -sL https://run.solo.io/wasme/install | sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.wasme/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wasme --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It may be possible to avoid creating an account on WebAssemblyHub if you&amp;rsquo;re staying local.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
