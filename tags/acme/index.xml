<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Acme on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/acme/</link>
    <description>Recent content in Acme on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Apr 2022 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/acme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>&lt;p&gt;Last year, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/211130/&#34;&gt;Automatic Certs w/ Golang gRPC service on Compute Engine&lt;/a&gt;. That solution uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34;&gt;ACME&lt;/a&gt; with (the wonderful) &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. Google is offering a private preview of &lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api&#34;&gt;Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)&lt;/a&gt; and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try. You&amp;rsquo;ll need to sign-up for the private preview, for what follows to work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>&lt;p&gt;I needed to deploy a &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto&#34;&gt;healthcheck&lt;/a&gt;-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has &lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/health&#34;&gt;&lt;code&gt;grpc-go/health&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I learned in my travels that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DigitalOcean [App] platform does not (&lt;a href=&#34;https://www.digitalocean.com/community/questions/app-platform-http-2-support&#34;&gt;link&lt;/a&gt;) work with TLS-based gRPC apps.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fly.io&#34;&gt;Fly&lt;/a&gt; has a regression (&lt;a href=&#34;https://community.fly.io/t/urgent-grpc-server-unreachable-via-grpcurl/2694/5&#34;&gt;link&lt;/a&gt;) that breaks gRPC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
