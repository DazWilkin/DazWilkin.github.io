<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Device-Plugins&#34; on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/device-plugins/</link>
    <description>Recent content in Device-Plugins&#34; on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Dec 2020 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/device-plugins/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes Device Plugins</title>
      <link>https://pretired.dazwilkin.com/posts/201217/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201217/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m debugging an &lt;a href=&#34;https://github.com/deislabs/akri/issues/177&#34;&gt;issue&lt;/a&gt; with Akri &lt;code&gt;Zeroconf&lt;/code&gt; &lt;a href=&#34;https://github.com/DazWilkin/akri/tree/protocol-zeroconf&#34;&gt;protocol&lt;/a&gt; in which Instance environment variables are no longer (!) being surfaced within the Broker pods. In my adventures, it seemed useful to better understand how Akri works and specifically, how Akri uses Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/&#34;&gt;Device Plugins&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;IIUC plugins register with the Kubelet (!) via a gRPC service (&lt;code&gt;Registration&lt;/code&gt;) that the Kubelet exposes on a UNIX socket at &lt;code&gt;/var/lib/kubelet/device-plugins/kubelet.sock&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Then (!) if successful, devices should be reported by the Node&amp;rsquo;s metadata (spec) and available to be bound to Pods.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
