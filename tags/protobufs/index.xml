<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Protobufs on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/protobufs/</link>
    <description>Recent content in Protobufs on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Apr 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/protobufs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Cloud Events protobufs and SDKs</title>
      <link>https://pretired.dazwilkin.com/posts/240405/</link>
      <pubDate>Fri, 05 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240405/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about &lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt;&amp;rsquo;s use of &lt;a href=&#34;https://cloud.google.com/firestore&#34;&gt;Firestore&lt;/a&gt; and subscribing to Firestore document CRUD events:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/230530/&#34;&gt;Routing Firestore events to GKE with Eventarc&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210413/&#34;&gt;Cloud Firestore Triggers in Golang&lt;/a&gt; using &lt;a href=&#34;https://cloud.google.com/functions/docs/calling/cloud-firestore&#34;&gt;Firestore triggers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I find Google&amp;rsquo;s &lt;a href=&#34;cloud.google.com/eventarc&#34;&gt;Eventarc&lt;/a&gt; documentation to be confusing and, in typical Google fashion, even though open-sourced, you often need to do some legwork to find relevant sources, viz:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Google&amp;rsquo;s Protobufs for Eventarc (using &lt;a href=&#34;https://cloudevents.io/&#34;&gt;cloudevents&lt;/a&gt;) &lt;a href=&#34;https://github.com/googleapis/google-cloudevents&#34;&gt;&lt;code&gt;google-cloudevents&lt;/code&gt;&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt;&lt;/li&gt;&#xA;&lt;li&gt;Convenience (since you can generate these using &lt;code&gt;protoc&lt;/code&gt;) language-specific types generated from the above e.g. &lt;a href=&#34;https://github.com/googleapis/google-cloudevents-go&#34;&gt;&lt;code&gt;google-cloudevents-go&lt;/code&gt;&lt;/a&gt;; &lt;a href=&#34;https://github.com/googleapis/google-cloudevents-python&#34;&gt;&lt;code&gt;google-cloudevents-python&lt;/code&gt;&lt;/a&gt; etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;1&lt;!-- raw HTML omitted --&gt; &amp;ndash; IIUC EventArc is the Google service. It carries Google Events that are CloudEvents. These are defined by protocol buffers schemas.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prost! Tonic w/ a dash of JSON</title>
      <link>https://pretired.dazwilkin.com/posts/240325/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240325/</guid>
      <description>&lt;p&gt;I naively (!) began exploring JSON marshaling of Protobufs in rust. Other protobuf language SDKs include JSON marshaling making the process straightforward. I was to learn that, in rust, it&amp;rsquo;s not so simple. Unfortunately, for me, this continues to discourage my further use of rust (rust is just hard).&lt;/p&gt;&#xA;&lt;p&gt;My goal was to marshal an arbitrary protocol buffer message that included a &lt;a href=&#34;https://protobuf.dev/programming-guides/proto3/#oneof&#34;&gt;&lt;code&gt;oneof&lt;/code&gt;&lt;/a&gt; feature. I was unable to JSON marshal the rust generated by &lt;code&gt;tonic&lt;/code&gt; for such a message.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus Protobufs and Native Histograms</title>
      <link>https://pretired.dazwilkin.com/posts/240307/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240307/</guid>
      <description>&lt;p&gt;I responded to a question &lt;a href=&#34;https://stackoverflow.com/questions/78112323/prometheus-metric-protocol-buffer-in-grpc#comment137716337_78112323&#34;&gt;Prometheus metric protocol buffer in gRPC&lt;/a&gt; on Stackoverflow and it piqued my curiosity and got me yak shaving.&lt;/p&gt;&#xA;&lt;p&gt;Prometheus used to support two exposition formats including Protocol Buffers, then dropped Protocol Buffer and has since re-added it (see &lt;a href=&#34;https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md#protobuf-format&#34;&gt;Protobuf format&lt;/a&gt;). The Protobuf format has returned to support the experimental &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/feature_flags/#native-histograms&#34;&gt;Native Histograms&lt;/a&gt; feature.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m interested in adding Native Histogram support to &lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt; so thought I&amp;rsquo;d learn more about this metric.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gnarly Protocol Buffers compilation</title>
      <link>https://pretired.dazwilkin.com/posts/240117/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240117/</guid>
      <description>&lt;p&gt;This Stackoverflow question piqued my interest:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/77829333/retry-policy-configuration-for-grpc-not-working&#34;&gt;retry policy configuration for grpc not working&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/service_config.md&#34;&gt;Service Config in gRPC&lt;/a&gt; is new to me but, my initial suspicion (albeit incorrect) was that the JSON types were incorrect.&lt;/p&gt;&#xA;&lt;p&gt;I decided to try using the Protocol Buffer source &lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/master/grpc/service_config/service_config.proto&#34;&gt;&lt;code&gt;service_config.proto&lt;/code&gt;&lt;/a&gt; to verify the JSON.&lt;/p&gt;&#xA;&lt;p&gt;To do so I needed to compile the source&amp;hellip;. it was gnarly.&lt;/p&gt;&#xA;&lt;p&gt;There are 2 repos used:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;&lt;code&gt;googleapis&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-proto&#34;&gt;&lt;code&gt;grpc-proto&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;service_config.proto&lt;/code&gt; includes &lt;code&gt;options&lt;/code&gt; for &lt;code&gt;java_package&lt;/code&gt; but no &lt;code&gt;go_package&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python Protobuf changes</title>
      <link>https://pretired.dazwilkin.com/posts/230607/</link>
      <pubDate>Wed, 07 Jun 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230607/</guid>
      <description>&lt;p&gt;Python&amp;rsquo;s &lt;a href=&#34;https://protobuf.dev/&#34;&gt;Protocol Buffers&lt;/a&gt; code-generation using &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/tree/main/python&#34;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; has had significant changes that can cause developers&amp;hellip; &amp;ldquo;challenges&amp;rdquo;. This post summarizes my experience of these mostly to save me from repreatedly recreating this history for myself when I forget it.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Version change&lt;/li&gt;&#xA;&lt;li&gt;Generated code change&lt;/li&gt;&#xA;&lt;li&gt;Implementation Backends&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll use this summarized table of &lt;code&gt;proto&lt;/code&gt; and the Pypi library&amp;rsquo;s history in this post. &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; refers to the compiler that supports code-generation in multiple languages. &lt;a href=&#34;https://pypi.org/project/protobuf/&#34;&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt; refers to the corresponding Python (runtime) library on &lt;a href=&#34;https://pypi.org&#34;&gt;Pypi&lt;/a&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Google Services using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/230314/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230314/</guid>
      <description>&lt;p&gt;Google publishes interface definitions of Google APIs (services) that support REST and gRPC in a repo called &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;Google APIs&lt;/a&gt;. Google&amp;rsquo;s SDKs uses gRPC to access these services but, how to do this using e.g. &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;?&lt;/p&gt;&#xA;&lt;p&gt;I wanted to debug &lt;a href=&#34;https://cloud.google.com/profiler/docs&#34;&gt;Cloud Profiler&lt;/a&gt; and its agent makes &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L83&#34;&gt;&lt;code&gt;UpdateProfile&lt;/code&gt;&lt;/a&gt; RPCs to &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L41&#34;&gt;&lt;code&gt;cloudprofiler.googleapis.com&lt;/code&gt;&lt;/a&gt;. Cloud Profiler is more challenging service to debug because (a) it&amp;rsquo;s publicly &amp;ldquo;write-only&amp;rdquo;; and (b) it has complex messages. &lt;code&gt;UpdateProfile&lt;/code&gt; sends &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L123&#34;&gt;&lt;code&gt;UpdateProfileRequest&lt;/code&gt;&lt;/a&gt; messages that include &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L123&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt; messages that include &lt;code&gt;profile_bytes&lt;/code&gt; which are gzip compressed serialized protos of &lt;a href=&#34;https://github.com/google/pprof&#34;&gt;pprof&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/google/pprof/blob/d61513b1440d93d62aad023cc60d7a33f3917b70/proto/profile.proto#L46&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/200817/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200817/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing around with a proof-of-concept combining WASM and &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;. The hypothesis was to explore using WASM as a form of chaincode with Trillian. The project works but it&amp;rsquo;s far from being a chaincode-like solution.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a couple of (trivial) examples and then I&amp;rsquo;ll explain what&amp;rsquo;s going on and how it&amp;rsquo;s implemented.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Method: mul&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [Client:Invoke] Metadata: complex.wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Success: result:{real:0.036980484 imag:0.3898267}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After shipping a Rust-sourced WASM solution (&lt;code&gt;complex.wasm&lt;/code&gt;) to the WASM transparency server, the client invokes a method &lt;code&gt;mul&lt;/code&gt; that&amp;rsquo;s exposed by it using a dynamically generated request message and outputs the response. Woo hoo! Yes, an expensive way to multiple complex numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remotely invoking WASM functions using gRPC and waPC</title>
      <link>https://pretired.dazwilkin.com/posts/200717/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200717/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt;, I can now remotely invoke (arbitrary) WASM functions:&lt;/p&gt;&#xA;&lt;p&gt;Client:&lt;/p&gt;&#xA;&lt;p&gt;The logging isn&amp;rsquo;t perfectly clear but, the client gets (a previously added) WASM binary from the server (using the SHA-256 of the WASM binary as a unique identifier). The result includes metadata that includes a protobuf descriptor of the WASM binary&amp;rsquo;s functions. The descriptor defines gRPC services (that represent the WASM functions) with input (parameters) and output (results) messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang Protobuf APIv2</title>
      <link>https://pretired.dazwilkin.com/posts/200630/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200630/</guid>
      <description>&lt;p&gt;Google has a new Golang Protobuf API, APIv2 (&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf?tab=overview&#34;&gt;google.golang.org/protobuf&lt;/a&gt;) superseding APIv1 (&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf?tab=overview&#34;&gt;github.com/golang/protobuf&lt;/a&gt;). If your code is importing &lt;code&gt;github.com/golang/protobuf&lt;/code&gt;, you&amp;rsquo;re using APIv2. Otherwise, you should consult with the docs because Google reimplemented APIv1 atop APIv2. One challenge this caused me, as someone who does not use protobufs and gRPC on a daily basis, is that &lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf/protoc-gen-go/grpc?tab=doc&#34;&gt;gRPC&lt;/a&gt; (code-generation) is being removed from the (Golang) &lt;code&gt;protoc-gen-go&lt;/code&gt;, the Golang plugin that generates gRPC service bindings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Cloud Functions</title>
      <link>https://pretired.dazwilkin.com/posts/200617/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200617/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt; and a question on Stack Overflow about Cloud Functions, I was compelled to try running WASM on Cloud Functions no JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to reuse the WASM waPC functions that I&amp;rsquo;d written in Rust as described in the other post. Cloud Functions does not (yet!?) provide a Rust runtime and so I&amp;rsquo;m using the &lt;a href=&#34;https://github.com/wapc/wapc-go&#34;&gt;waPC Host for Go&lt;/a&gt; in this example.&lt;/p&gt;&#xA;&lt;p&gt;It works!&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;a&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3},&amp;#34;b&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3}}&amp;#39;&lt;/span&gt; | base64&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;gcloud auth print-identity-token&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;filename\&amp;#34;:\&amp;#34;complex.wasm\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;function\&amp;#34;:\&amp;#34;c:mul\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;params\&amp;#34;:\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PARAMS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--silent &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--data @- &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.cloudfunctions.net/invoker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yields (correctly):&lt;/p&gt;</description>
    </item>
    <item>
      <title>waPC &amp; Protobufs</title>
      <link>https://pretired.dazwilkin.com/posts/200612/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200612/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m hacking around with a solution that combines WASM and Google &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Ultimately, I&amp;rsquo;d like to be able to ship WASM (binaries) to a Trillian personality and then invoke (exported) functions on them. Some this was borne from the interesting exploration of &lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;Krustlet&lt;/a&gt; and its application of &lt;a href=&#34;https://wascc.dev/&#34;&gt;wascc&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m still booting into WASM but it&amp;rsquo;s a &lt;em&gt;very&lt;/em&gt; interesting technology that has most interesting potential outside the browser. Some folks have been trailblazing the technology and I have been reading Kevin Hoffman&amp;rsquo;s &lt;a href=&#34;https://medium.com/@KevinHoffman&#34;&gt;medium&lt;/a&gt; and &lt;a href=&#34;https://wascc.dev/&#34;&gt;wascc&lt;/a&gt; (nee waxosuit) work. From this, I stumbled upon Kevin&amp;rsquo;s &lt;a href=&#34;https://medium.com/@KevinHoffman/introducing-wapc-dc9d8b0c2223&#34;&gt;waPC&lt;/a&gt; and I&amp;rsquo;m using waPC in this prototyping as a way to exchange data between clients and servers running WASM binaries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust implementation of Crate Transparency using Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200429/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200429/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been hacking on a Rust-based transparent application for Google Trillian. As appears to be my fixation, this personality is for another package manager. This time, Rust&amp;rsquo;s &lt;a href=&#34;https://doc.rust-lang.org/1.0.0/book/crates-and-modules.html&#34;&gt;Crates&lt;/a&gt; often found in &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; which is Rust&amp;rsquo;s Package Registry. I discussed this project earlier this month &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200403/&#34;&gt;Rust Crate Transparency &amp;amp;&amp;amp; Rust SDK for Google Trillian&lt;/a&gt; and and earlier approach for Python&amp;rsquo;s packages with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;pypi-transparency&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This time, of course, I&amp;rsquo;m using Rust. And, by way of a first for me, for the gRPC server implementation (aka &amp;ldquo;personality&amp;rdquo;). I&amp;rsquo;ve been lazy thanks to the excellent &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; and have been using it way of a client. Because I&amp;rsquo;m more familiar with Golang and because I&amp;rsquo;ve written (most) other Trillian personalities in Golang, I resorted to quickly implementing Crate Transparency in Golang too in order to uncover bugs with the Rust implementation. I&amp;rsquo;ll write a follow-up post on the complexity I seem to struggle with when using protobufs and gRPC [in Golang].&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&lt;p&gt;&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s &lt;strong&gt;super&lt;/strong&gt; confusing to understand and complex to deploy.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take &lt;strong&gt;existing&lt;/strong&gt; code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc. may be added.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Update: 2020-03-24&lt;/strong&gt;: Since writing this post, I&amp;rsquo;ve contributed &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example/pull/12&#34;&gt;Golang&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example/pull/15&#34;&gt;Rust&lt;/a&gt; samples to Google&amp;rsquo;s project. I recommend you start there.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/compute/serve-cloud-run-requests-with-grpc-not-just-http&#34;&gt;gRPC comes to Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example&#34;&gt;gRPC in Google Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Missing Golang&amp;hellip;. until now ;-)&lt;/p&gt;&#xA;&lt;p&gt;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&lt;/p&gt;&#xA;&lt;h2 id=&#34;project-structure&#34;&gt;Project structure&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll tidy up my repo but the code may be found:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google&#39;s New Golang SDK for Protobufs</title>
      <link>https://pretired.dazwilkin.com/posts/200310/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200310/</guid>
      <description>&lt;p&gt;Google has released a new Golang SDK for protobuf. In the [announcement], a useful tool to redact properties is described. If like me, this is somewhat novel to you, here&amp;rsquo;s a mashup using Google&amp;rsquo;s &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/gotutorial&#34;&gt;Protocol Buffer Basics&lt;/a&gt; w/ redaction.&lt;/p&gt;&#xA;&lt;p&gt;To be very clear, as it&amp;rsquo;s an important distinction:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;Version&lt;/th&gt;&#xA;          &lt;th&gt;Repo&lt;/th&gt;&#xA;          &lt;th&gt;Docs&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;v2&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://google.golang.org/protobuf&#34;&gt;google.golang.org/protobuf&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/google.golang.org/protobuf&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;v1&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/golang/protobuf&#34;&gt;github.com/golang/protobuf&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/golang/protobuf&#34;&gt;Docs&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;project&#34;&gt;Project&lt;/h3&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my project structure:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.&#xA;├── protoc-3.11.4-linux-x86_64&#xA;│   ├── bin&#xA;│   │   └── protoc&#xA;│   ├── include&#xA;│   │   └── google&#xA;│   └── readme.txt&#xA;└── src&#xA;    ├── go.mod&#xA;    ├── go.sum&#xA;    ├── main.go&#xA;    ├── protos&#xA;    │   ├── addressbook.pb.go&#xA;    │   └── addressbook.proto&#xA;    └── README.md&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You may structure as you wish.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
