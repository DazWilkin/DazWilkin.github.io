<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Trillian on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/trillian/</link>
    <description>Recent content in Trillian on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Sep 2020 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/trillian/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trillian Map Mode</title>
      <link>https://pretired.dazwilkin.com/posts/200908/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200908/</guid>
      <description>&lt;p&gt;Chatting with one of Google&amp;rsquo;s Trillian team, I was encouraged to explore Trillian&amp;rsquo;s &lt;a href=&#34;https://github.com/google/trillian#map-mode&#34;&gt;Map Mode&lt;/a&gt;. The following is the result of some spelunking through this unfamiliar cave. I can&amp;rsquo;t provide any guarantee that this usage is correct or sufficient.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s the repo: &lt;a href=&#34;https://github.com/DazWilkin/go-trillian-map&#34;&gt;https://github.com/DazWilkin/go-trillian-map&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve written about Trillian &lt;a href=&#34;https://github.com/google/trillian#log-mode&#34;&gt;Log Mode&lt;/a&gt; &lt;a href=&#34;https://pretired.dazwilkin.com/tags/trillian/&#34;&gt;elsewhere&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I uncovered use of Trillian Map Mode through Trillian&amp;rsquo;s integration &lt;a href=&#34;https://github.com/google/trillian/blob/master/integration/maptest/map.go&#34;&gt;tests&lt;/a&gt;. I&amp;rsquo;m unclear on the distinction between &lt;code&gt;TrillianMapClient&lt;/code&gt; and &lt;code&gt;TrillianMapWriteClient&lt;/code&gt; but the latter served most of my needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/200817/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200817/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing around with a proof-of-concept combining WASM and &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;. The hypothesis was to explore using WASM as a form of chaincode with Trillian. The project works but it&amp;rsquo;s far from being a chaincode-like solution.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a couple of (trivial) examples and then I&amp;rsquo;ll explain what&amp;rsquo;s going on and how it&amp;rsquo;s implemented.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Method: mul&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [Client:Invoke] Metadata: complex.wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Success: result:{real:0.036980484 imag:0.3898267}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After shipping a Rust-sourced WASM solution (&lt;code&gt;complex.wasm&lt;/code&gt;) to the WASM transparency server, the client invokes a method &lt;code&gt;mul&lt;/code&gt; that&amp;rsquo;s exposed by it using a dynamically generated request message and outputs the response. Woo hoo! Yes, an expensive way to multiple complex numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust implementation of Crate Transparency using Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200429/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200429/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been hacking on a Rust-based transparent application for Google Trillian. As appears to be my fixation, this personality is for another package manager. This time, Rust&amp;rsquo;s &lt;a href=&#34;https://doc.rust-lang.org/1.0.0/book/crates-and-modules.html&#34;&gt;Crates&lt;/a&gt; often found in &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; which is Rust&amp;rsquo;s Package Registry. I discussed this project earlier this month &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200403/&#34;&gt;Rust Crate Transparency &amp;amp;&amp;amp; Rust SDK for Google Trillian&lt;/a&gt; and and earlier approach for Python&amp;rsquo;s packages with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;pypi-transparency&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This time, of course, I&amp;rsquo;m using Rust. And, by way of a first for me, for the gRPC server implementation (aka &amp;ldquo;personality&amp;rdquo;). I&amp;rsquo;ve been lazy thanks to the excellent &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; and have been using it way of a client. Because I&amp;rsquo;m more familiar with Golang and because I&amp;rsquo;ve written (most) other Trillian personalities in Golang, I resorted to quickly implementing Crate Transparency in Golang too in order to uncover bugs with the Rust implementation. I&amp;rsquo;ll write a follow-up post on the complexity I seem to struggle with when using protobufs and gRPC [in Golang].&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust Crate Transparency &amp;&amp; Rust SDK for Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200403/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200403/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m noodling the utility of a Transparency solution for Rust Crates. When developers push crates to Cargo, a bunch of metadata is associated with the crate. E.g. &lt;a href=&#34;https://crates.io/crates/protobuf&#34;&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt;. As with Golang Modules, Python packages on PyPi etc., there appears to be utility in making tamperproof recordings of these publications. Then, other developers may confirm that a crate pulled from cates.io is highly unlikely to have been changed.&lt;/p&gt;&#xA;&lt;p&gt;On Linux, Cargo stores downloaded crates under &lt;code&gt;${HOME}/.crates/registry&lt;/code&gt;. In the case of the latest version (&lt;code&gt;2.12.0&lt;/code&gt;) of &lt;code&gt;protobuf&lt;/code&gt;, on my machine, I have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written previously (&lt;a href=&#34;https://medium.com/google-cloud/google-trillian-for-noobs-1a-c87a78e5e585&#34;&gt;Google Trillian for Noobs&lt;/a&gt;) about Google&amp;rsquo;s interesting project &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt; and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;PyPi Transparency&lt;/a&gt;) that I&amp;rsquo;ve build using it.&lt;/p&gt;&#xA;&lt;p&gt;Having gone slight cra-cra on &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Cloud Run&lt;/a&gt; and &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; this week with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200320/&#34;&gt;Golang gRPC Cloud Run&lt;/a&gt; and &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200325/&#34;&gt;gRPC, Cloud Run &amp;amp; Endpoints&lt;/a&gt;, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&lt;/p&gt;&#xA;&lt;p&gt;It mostly (!) works :-)&lt;/p&gt;&#xA;&lt;p&gt;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyPi Transparency Client (Rust)</title>
      <link>https://pretired.dazwilkin.com/posts/190930/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190930/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve finally being able to hack my way through to a working Rust gRPC client (for &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190926/&#34;&gt;PyPi Transparency&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s not very good: poorly structured, hacky etc. but it serves the purpose of giving me a foothold into Rust development so that I can evolve it as I learn the language and its practices.&lt;/p&gt;&#xA;&lt;p&gt;There are several Rust crates (SDK) for gRPC. There&amp;rsquo;s no sanctioned SDK for Rust on &lt;a href=&#34;https://grpc.io&#34;&gt;grpc.io&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I chose &lt;a href=&#34;https://github.com/stepancheg&#34;&gt;stepancheg&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/stepancheg/grpc-rust&#34;&gt;grpc-rust&lt;/a&gt; because it&amp;rsquo;s a pure Rust implementation (not built atop the C implementation).&lt;/p&gt;</description>
    </item>
    <item>
      <title>PyPi Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/190926/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190926/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been noodling around with another &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt; personality.&lt;/p&gt;&#xA;&lt;p&gt;Another in a theme that interests me in providing tamperproof logs for the packages in the popular package management registries.&lt;/p&gt;&#xA;&lt;p&gt;The Golang team recently announced &lt;a href=&#34;https://proxy.golang.org/&#34;&gt;Go Module Mirror&lt;/a&gt; which is built atop Trillian. It seems to me that all the package registries (&lt;a href=&#34;https://proxy.golang.org&#34;&gt;Go Modules&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;, &lt;a href=&#34;https://mvnrepository.com&#34;&gt;Maven&lt;/a&gt;, &lt;a href=&#34;https://nuget.org&#34;&gt;NuGet&lt;/a&gt; etc.) would benefit from tamperproof logs hosted by a trusted 3rd-party.&lt;/p&gt;&#xA;&lt;p&gt;As you may have guessed, PyPi Transparency is a log for &lt;a href=&#34;https://pypi.org&#34;&gt;PyPi&lt;/a&gt; packages. PyPi is comprehensive, definitive and trusted but, as with Go Module Mirror, it doesn&amp;rsquo;t hurt to provide a backup of some of its data. In the case of this solution, Trillian hosts a log of self-calculated SHA-256 hashes for Python packages that are added to it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pypi-transparency</title>
      <link>https://pretired.dazwilkin.com/posts/190907/</link>
      <pubDate>Sat, 07 Sep 2019 13:07:44 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190907/</guid>
      <description>&lt;p&gt;The goal of pypi-transparency is very similar to the underlying motivation for the Golang team&amp;rsquo;s &lt;a href=&#34;https://sum.golang.org/&#34;&gt;Checksum Database&lt;/a&gt; (also built with Trillian).&lt;/p&gt;&#xA;&lt;p&gt;Even though, &lt;a href=&#34;https://pypi.org&#34;&gt;PyPi&lt;/a&gt; provides hashes of the content of packages it hosts, the developer must trust that PyPi&amp;rsquo;s data is consistent. One ambition with pypi-transparency is to provide a companion, tamperproof log of PyPi package files in order to provide a double-check of these hashes.&lt;/p&gt;&#xA;&lt;p&gt;It is important to understand what this does (and does not) provide. There&amp;rsquo;s no validation of a package&amp;rsquo;s content. The only calculation is that, on first observation, a SHA-256 hash is computed of the package&amp;rsquo;s content and the hash is recorded. If the package is subsequently altered, it&amp;rsquo;s very probable that the hash will change and this provides a signal to the user that the package&amp;rsquo;s contents has changed. Because pypi-transparency uses a tamperproof log, it&amp;rsquo;s very difficult to update the hash recorded in the tamperproof log, to reflect this change. Corrolary: pypi-transparency will record the hashes of packages that include malicious code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
