<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/grpc/</link>
    <description>Recent content in gRPC on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jan 2024 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gnarly Protocol Buffers compilation</title>
      <link>https://pretired.dazwilkin.com/posts/240117/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240117/</guid>
      <description>This Stackoverflow question piqued my interest:&#xA;retry policy configuration for grpc not working&#xA;Service Config in gRPC is new to me but, my initial suspicion (albeit incorrect) was that the JSON types were incorrect.&#xA;I decided to try using the Protocol Buffer source service_config.proto to verify the JSON.&#xA;To do so I needed to compile the source&amp;hellip;. it was gnarly.&#xA;There are 2 repos used:&#xA;googleapis grpc-proto The service_config.proto includes options for java_package but no go_package.</description>
    </item>
    <item>
      <title>Listing Cloud Logging log-based metrics using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/231222/</link>
      <pubDate>Fri, 22 Dec 2023 11:00:00 +0000</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/231222/</guid>
      <description>Referring to Accessing Google Services using gRPC, I wanted to query a project&amp;rsquo;s Cloud Logging for log-based metrics using gRPC.&#xA;In summary:&#xA;ENDPOINT=&amp;#34;logging.googleapis.com:443&amp;#34; ROOT=&amp;#34;/path/to/googleapis&amp;#34; # https://github.com/googleapis/googleapis PACKAGE=&amp;#34;google/logging/v2&amp;#34; # NB Not logging.proto PROTO=&amp;#34;${ROOT}/${PACKAGE}/logging_metrics.proto&amp;#34; TOKEN=$(gcloud auth print-access-token) PROJECT=&amp;#34;...&amp;#34; PACKAGE=&amp;#34;google.logging.v2&amp;#34; SERVICE=&amp;#34;MetricsServiceV2&amp;#34; METHOD=&amp;#34;${PACKAGE}.${SERVICE}/ListLogMetrics&amp;#34; # ListLogMetricsRequest fields PARENT=&amp;#34;projects/${PROJECT}&amp;#34; grpcurl \ --import-path=${ROOT} \ --proto=${PROTO} \ -H &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ -d &amp;#34;{\&amp;#34;parent\&amp;#34;: \&amp;#34;${PARENT}\&amp;#34;}&amp;#34; \ ${ENDPOINT} ${METHOD} From APIs Explorer, Cloud Logging API v2, instead of the REST reference, browse the gRPC reference specifically the package google.</description>
    </item>
    <item>
      <title>Azure Container Apps</title>
      <link>https://pretired.dazwilkin.com/posts/230404/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230404/</guid>
      <description>The majority of Ackal&amp;rsquo;s components are deployed to Google Cloud. However, by its nature, Ackal benefits from deployments that span cloud platforms. I&amp;rsquo;ve deployed Ackal&amp;rsquo;s gRPC health checks to Fly, and managed Kubernetes services on Linode and Vultr.&#xA;Today, I decided to revisitÂ¹ Azure. Ackal uses Azure (Active Directory) for one of its OAuth providers. This time, I wanted to deploy a containerized gRPC service. Azure provides several container-oriented services. I decided to use Azure Container Apps and, in hindsight, find it analogous to Google Cloud Run.</description>
    </item>
    <item>
      <title>Access Google Services using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/230314/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230314/</guid>
      <description>Google publishes interface definitions of Google APIs (services) that support REST and gRPC in a repo called Google APIs. Google&amp;rsquo;s SDKs uses gRPC to access these services but, how to do this using e.g. gRPCurl?&#xA;I wanted to debug Cloud Profiler and its agent makes UpdateProfile RPCs to cloudprofiler.googleapis.com. Cloud Profiler is more challenging service to debug because (a) it&amp;rsquo;s publicly &amp;ldquo;write-only&amp;rdquo;; and (b) it has complex messages. UpdateProfile sends UpdateProfileRequest messages that include Profile messages that include profile_bytes which are gzip compressed serialized protos of pprof&amp;rsquo;s Profile.</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with LKE</title>
      <link>https://pretired.dazwilkin.com/posts/230215/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230215/</guid>
      <description>NOTE cert-manager is a better solution to what follows.&#xA;I wrote about deploying Secure (TLS) gRPC services with Vultr Kubernetes Engine (VKE). This week, I&amp;rsquo;ve reproduced this deployment using Linode Kubernetes Engine (LKE).&#xA;Thanks to the consistency provided by Kubernetes, the Kubernetes programming is almost identical. The main differences are between the CLI&amp;rsquo;s provided by these platforms. Both are good. They&amp;rsquo;re just different.&#xA;I&amp;rsquo;m going to include the linode-cli commands I&amp;rsquo;m using in this post as I found it slightly more quirky.</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with VKE</title>
      <link>https://pretired.dazwilkin.com/posts/220603/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220603/</guid>
      <description>NOTE cert-manager is a better solution to what follows.&#xA;I&amp;rsquo;ve a need to deploy a Vultr Kubernetes Engine (VKE) cluster on a daily basis (create and delete within a few hours) and expose (securely|TLS) a gRPC service.&#xA;I have an existing solution Automatic Certs w/ Golang gRPC service on Compute Engine that combines a gRPC Healthchecking and an ACME service and decided to reuse this.&#xA;In order for it work, we need:</description>
    </item>
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>Last year, I wrote about using Automatic Certs w/ Golang gRPC service on Compute Engine. That solution uses ACME with (the wonderful) Let&amp;rsquo;s Encrypt. Google is offering a private preview of Automate Public Certificates Lifecycle Management via RFC 8555 (ACME) and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try.</description>
    </item>
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>I needed to deploy a healthcheck-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has grpc-go/health.&#xA;I learned in my travels that:&#xA;DigitalOcean [App] platform does not (link) work with TLS-based gRPC apps. Fly has a regression (link) that breaks gRPC So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.</description>
    </item>
    <item>
      <title>Renewing Firebase Authentication ID tokens with gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/210730/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210730/</guid>
      <description>I&amp;rsquo;ve written before about a project in which I&amp;rsquo;m using Firebase Authentication in combination with Google Cloud Endpoints and a gRPC service running on Cloud Run:&#xA;Firebase Authentication, Cloud Endpoints and gRPC (1of2) Firebase Authentication, Cloud Endpoints and gRPC (2of2) This works well with one caveat, the ID tokens (JWTs) minted by Firebase Authentication have a 3600 second (one hour) lifetime.&#xA;The user flow in my app is that whenever the user invokes the app&amp;rsquo;s CLI:</description>
    </item>
    <item>
      <title>gRPC Interceptors and in-memory gRPC connections</title>
      <link>https://pretired.dazwilkin.com/posts/210724/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210724/</guid>
      <description>For&amp;hellip; reasons, I wanted to pre-filter gRPC requests to check for authorization. Authorization is implemented as a &amp;lsquo;micro-service&amp;rsquo; and I wanted the authorization server to run in the same process as the gRPC client.&#xA;TL;DR:&#xA;Shiju&amp;rsquo;s &amp;ldquo;Writing gRPC Interceptors in Go&amp;rdquo; is great This Stack overflow answer ostensibly for writing unit tests for gRPC got me an in-process server What follows stands on these folks&amp;rsquo; shoulders&amp;hellip;&#xA;A key motivator for me to write blog posts is that helps me ensure that I understand things.</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (2of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210618/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210618/</guid>
      <description>Earlier this week, I wrote about using Firebase Authentcation, Cloud Endpoints and gRPC (1of2). Since then, I learned some more and added a gRPC interceptor to implement basic authorization for the service.&#xA;ESPv2 --allow-unauthenticated The Cloud Enpoints (ESPv2) proxy must be run as --allow-unauthenticated on Cloud Run to ensure that requests make it to the proxy where the request is authenticated and only authenticated requests make it on to the backend service.</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (1of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210614/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210614/</guid>
      <description>I&amp;rsquo;m building a service that requires user authentication. The primary endpoint is a gRPC-based service. I would like to consider using certificate-based auth but this feels&amp;hellip; challenging. Instead, I have been aware of, but never used, Firebase Authentication and was interested to see that Cloud Endpoints includes Firebase Authentication as one of its supported auth mechanisms. Curiosity piqued, I confirmed that gRPC supports Google token-based authentication.&#xA;The following is a summary of what I did but I&amp;rsquo;ll leave the extensive documentation to Google, (Google&amp;rsquo;s) Firebase and gRPC, all of which, in this case, provide really good explanations.</description>
    </item>
    <item>
      <title>Cloud Endpoints combine OpenAPI and gRPC... or not!</title>
      <link>https://pretired.dazwilkin.com/posts/210608/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210608/</guid>
      <description>See:&#xA;Multiplexing gRPC and HTTP endpoints with Cloud Run gRPC, Cloud Run &amp;amp; Endpoints ESPv2: Configure Cloud Endpoints to proxy traffic to a Cloud Run multiplexed (gRPC|HTTP) service Challenges:&#xA;Cloud Run permits single port Cloud Run services publishing e.g. gRPC and Prometheus, must multiplex transports Cloud Run services publishing multiplexed transports are challenging to expose using Cloud Endpoints Hypothesis #1: Multiplexed transports work with Cloud Run See: Multiplexing gRPC and HTTP endpoints with Cloud Run</description>
    </item>
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.&#xA;Fortunately, cmux provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!&#xA;TL;DR See the cmux Limitations and use:</description>
    </item>
    <item>
      <title>Fly.io</title>
      <link>https://pretired.dazwilkin.com/posts/210412/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210412/</guid>
      <description>I spent some time over the weekend understanding Fly.io. It&amp;rsquo;s always fascinating to me how many smart people are building really neat solutions. Fly.io is subtly different to other platforms that I use (Kubernetes, GCP, DO, Linode) and I&amp;rsquo;ve found the Fly.io team to be highly responsive and helpful to my noob questions.&#xA;One of the team&amp;rsquo;s posts, Docker without Docker surfaced in my Feedly feed (hackernews) and it piqued my interest.</description>
    </item>
    <item>
      <title>Dapr</title>
      <link>https://pretired.dazwilkin.com/posts/210222/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210222/</guid>
      <description>It&amp;rsquo;s a good name, I read it as &amp;ldquo;dapper&amp;rdquo; but I frequently type &amp;ldquo;darp&amp;rdquo; :-(&#xA;Was interested to read that Dapr is now v1.0 and decided to check it out. I was initially confused between Dapr and service mesh functionality. But, having used Dapr, it appears to be more focused in aiding the development of (cloud-native) (distributed) apps by providing developers with abstractions for e.g. service discovery, eventing, observability whereas service meshes feel (!</description>
    </item>
    <item>
      <title>Remotely invoking WASM functions using gRPC and waPC</title>
      <link>https://pretired.dazwilkin.com/posts/200717/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200717/</guid>
      <description>Following on from waPC &amp;amp; Protobufs, I can now remotely invoke (arbitrary) WASM functions:&#xA;Client:&#xA;The logging isn&amp;rsquo;t perfectly clear but, the client gets (a previously added) WASM binary from the server (using the SHA-256 of the WASM binary as a unique identifier). The result includes metadata that includes a protobuf descriptor of the WASM binary&amp;rsquo;s functions. The descriptor defines gRPC services (that represent the WASM functions) with input (parameters) and output (results) messages.</description>
    </item>
    <item>
      <title>Rust implementation of Crate Transparency using Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200429/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200429/</guid>
      <description>I&amp;rsquo;ve been hacking on a Rust-based transparent application for Google Trillian. As appears to be my fixation, this personality is for another package manager. This time, Rust&amp;rsquo;s Crates often found in crates.io which is Rust&amp;rsquo;s Package Registry. I discussed this project earlier this month Rust Crate Transparency &amp;amp;&amp;amp; Rust SDK for Google Trillian and and earlier approach for Python&amp;rsquo;s packages with pypi-transparency.&#xA;This time, of course, I&amp;rsquo;m using Rust. And, by way of a first for me, for the gRPC server implementation (aka &amp;ldquo;personality&amp;rdquo;).</description>
    </item>
    <item>
      <title>Rust Crate Transparency &amp;&amp; Rust SDK for Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200403/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200403/</guid>
      <description>I&amp;rsquo;m noodling the utility of a Transparency solution for Rust Crates. When developers push crates to Cargo, a bunch of metadata is associated with the crate. E.g. protobuf. As with Golang Modules, Python packages on PyPi etc., there appears to be utility in making tamperproof recordings of these publications. Then, other developers may confirm that a crate pulled from cates.io is highly unlikely to have been changed.&#xA;On Linux, Cargo stores downloaded crates under ${HOME}/.</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>I&amp;rsquo;ve written previously (Google Trillian for Noobs) about Google&amp;rsquo;s interesting project Trillian and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. PyPi Transparency) that I&amp;rsquo;ve build using it.&#xA;Having gone slight cra-cra on Cloud Run and gRPC this week with Golang gRPC Cloud Run and gRPC, Cloud Run &amp;amp; Endpoints, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&#xA;It mostly (!) works :-)&#xA;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&#xA;Cloud Endpoints is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s super confusing to understand and complex to deploy.&#xA;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. Istio), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take existing code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc.</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>Update: 2020-03-24: Since writing this post, I&amp;rsquo;ve contributed Golang and Rust samples to Google&amp;rsquo;s project. I recommend you start there.&#xA;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&#xA;gRPC comes to Cloud Run gRPC in Google Cloud Run Missing Golang&amp;hellip;. until now ;-)&#xA;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&#xA;Project structure I&amp;rsquo;ll tidy up my repo but the code may be found:</description>
    </item>
    <item>
      <title>Cloud Functions Simple(st) HTTP Multi-host Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190918/</link>
      <pubDate>Wed, 18 Sep 2019 12:45:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190918/</guid>
      <description>Tweaked yesterday&amp;rsquo;s solution so that it will randomly select one from several hosts with which it&amp;rsquo;s configured.&#xA;package proxy import ( &amp;#34;log&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;net/url&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; ) func robin() { hostsList := os.Getenv(&amp;#34;PROXY_HOST&amp;#34;) if hostsList == &amp;#34;&amp;#34; { log.Fatal(&amp;#34;&amp;#39;PROXY_HOST&amp;#39; environment variable should contain comma-separated list of hosts&amp;#34;) } // Comma-separated lists of hosts hosts := strings.Split(hostsList, &amp;#34;,&amp;#34;) urls := make([]*url.URL, len(hosts)) for i, host := range hosts { var origin = Endpoint{ Host: host, Port: os.</description>
    </item>
    <item>
      <title>Cloud Functions Simple(st) HTTP Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190917/</link>
      <pubDate>Tue, 17 Sep 2019 12:41:02 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190917/</guid>
      <description>I&amp;rsquo;m investigating the use of LetsEncrypt for gRPC services. I found this straightforward post by Scott Devoid and am going to try this approach.&#xA;Before I can do that, I need to be able to publish services (make them Internet-accessible) and would like to try to continue to use GCP for free.&#xA;Some time ago, I wrote about using the excellent Microk8s on GCP. Using an f1-micro, I&amp;rsquo;m hoping (!) to stay within the Compute Engine free tier.</description>
    </item>
  </channel>
</rss>
