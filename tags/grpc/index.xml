<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GRPC on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/grpc/</link>
    <description>Recent content in GRPC on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Feb 2025 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC Firestore `Listen` in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/250213/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250213/</guid>
      <description>&lt;p&gt;Obsessing on &lt;a href=&#34;https://pretired.dazwilkin.com/posts/250210/&#34;&gt;gRPC Firestore &lt;code&gt;Listen&lt;/code&gt;&lt;/a&gt; somewhat but it&amp;rsquo;s also a good learning opportunity for me to write stuff in Rust. This doesn&amp;rsquo;t work against Google&amp;rsquo;s public endpoint (possibly for the same reason that gRPCurl doesn&amp;rsquo;t work either) but this does work against the Go server described in the other post.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m also documenting here because I always encounter challenges using TLS with Rust (and this documents 2 working ways to do this with gRPC) as well as references two interesting (rust) examples that use Google services.&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC Firestore `Listen`</title>
      <link>https://pretired.dazwilkin.com/posts/250210/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/250210/</guid>
      <description>&lt;p&gt;A question on Stack overflow &lt;a href=&#34;https://stackoverflow.com/questions/79422094&#34;&gt;Firestore gRPC Listen does not send deletions&lt;/a&gt; piqued by interest but created a second problem for me: I&amp;rsquo;m unable to get its &lt;a href=&#34;https://cloud.google.com/firestore/docs/reference/rpc/google.firestore.v1#google.firestore.v1.Firestore.Listen&#34;&gt;&lt;code&gt;Listen&lt;/code&gt;&lt;/a&gt; method to work using &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For what follows, you will need:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;a Google Project with Firestore enabled and a database (default: &lt;code&gt;(default)&lt;/code&gt;) containing a Collection (e.g. &lt;code&gt;Dogs&lt;/code&gt;) with at least one Document (e.g. &lt;code&gt;freddie&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;&lt;code&gt;googleapis&lt;/code&gt;&lt;/a&gt; cloned locally in order to access Protobufs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;client&lt;/th&gt;&#xA;          &lt;th&gt;server&lt;/th&gt;&#xA;          &lt;th&gt;R&lt;/th&gt;&#xA;          &lt;th&gt;See&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;gRPCurl&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;firestore.googleapis.com:443&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#grpcurl-listen-against-google-endpoint&#34;&gt;link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Go client&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;firestore.googleapis.com:443&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#go-client-listen-against-google-endpoint&#34;&gt;link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;gRPCurl&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Go server&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#grpcurl-listen-against-go-server&#34;&gt;link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Go client&lt;/td&gt;&#xA;          &lt;td&gt;Go server&lt;/td&gt;&#xA;          &lt;td&gt;✅&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;#go-client-listen-against-go-server&#34;&gt;link&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;I subsequently tried this using &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; and it also works (✅).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Run with a gRPC probe</title>
      <link>https://pretired.dazwilkin.com/posts/240927/</link>
      <pubDate>Fri, 27 Sep 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240927/</guid>
      <description>&lt;p&gt;Cloud Run supports &lt;a href=&#34;https://cloud.google.com/run/docs/configuring/healthchecks&#34;&gt;gRPC startup|liveness probes&lt;/a&gt; which I&amp;rsquo;d not used before.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://cloud.google.com/run/docs/reference/rest&#34;&gt;Cloud Run&lt;/a&gt; v2 and specifically &lt;a href=&#34;https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services/create&#34;&gt;&lt;code&gt;projects.locations.services.create&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#Service&#34;&gt;&lt;code&gt;Service&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROJECT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;REGION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;REPO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;..&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Must be in an Artifact Registry repo&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IMAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-docker.pkg.dev/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REPO&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run v2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://run.googleapis.com/v2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PARENT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;projects/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/locations/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I like to use &lt;a href=&#34;https://jsonnet.org/&#34;&gt;Jsonnet&lt;/a&gt; (specifically &lt;a href=&#34;https://github.com/google/go-jsonnet&#34;&gt;&lt;code&gt;go-jsonnet&lt;/code&gt;&lt;/a&gt;) to help templating Kubernetes(-like) deployments.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;cloudrun.jsonnet&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-jsonnet&#34; data-lang=&#34;jsonnet&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; project &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;project&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; region &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;region&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; image &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.extVar(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;local&lt;/span&gt; health_checking_service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;labels&amp;#34;:{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;annotations&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;type&amp;#34;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;#34;template&amp;#34;:{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;containers&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;name&amp;#34;: service,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;image&amp;#34;: image,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;args&amp;#34;: [],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;resources&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;#34;limits&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;cpu&amp;#34;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1000m&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;memory&amp;#34;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;512Mi&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;ports&amp;#34;: [&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;name&amp;#34;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http1&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;containerPort&amp;#34;: port&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ],&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;startupProbe&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;#34;grpc&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;port&amp;#34;: port,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;#34;service&amp;#34;: health_checking_service&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;#34;scaling&amp;#34;: {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;#34;maxInstanceCount&amp;#34;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And deploy it using:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Securing gRPC services using Tailscale</title>
      <link>https://pretired.dazwilkin.com/posts/240430/</link>
      <pubDate>Tue, 30 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240430/</guid>
      <description>&lt;p&gt;This is &lt;strong&gt;so&lt;/strong&gt; useful that it&amp;rsquo;s worth its own post.&lt;/p&gt;&#xA;&lt;p&gt;I write many gRPC services. As these generally run securely, it&amp;rsquo;s best to test them that way too but, even with e.g. &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;, it can be challenging to generate appropriate TLS certs.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://tailscale.com&#34;&gt;Tailscale&lt;/a&gt; makes this trivial.&lt;/p&gt;&#xA;&lt;p&gt;Assuming there&amp;rsquo;s a gRPC service running on &lt;code&gt;localhost:50051&lt;/code&gt;, we want to avoid &lt;code&gt;-plaintext&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;50051&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpcurl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-plaintext 0.0.0.0:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PORT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; I&amp;rsquo;m using &lt;code&gt;list&lt;/code&gt; and assuming your service has reflection enabled but you can, of course, use relevant methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Translation w/ gRPC 3 ways</title>
      <link>https://pretired.dazwilkin.com/posts/240409/</link>
      <pubDate>Tue, 09 Apr 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240409/</guid>
      <description>&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;&#xA;&lt;p&gt;You&amp;rsquo;ll need a Google Cloud project with Cloud Translation (&lt;code&gt;translate.googleapis.com&lt;/code&gt;) enabled and a Service Account (and key) with suitable permissions in order to run the following.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;BILLING&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Your Billing ID (gcloud billing accounts list)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROJECT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Your Project ID&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ACCOUNT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tester&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EMAIL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.iam.gserviceaccount.com&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROLES&lt;span style=&#34;color:#f92672&#34;&gt;=(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roles/cloudtranslate.user&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;roles/serviceusage.serviceUsageConsumer&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Project&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud projects create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Associate Project with your Billing Account&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud billing accounts link &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--billing-account&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;BILLING&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Enable Cloud Translation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud services enable translate.googleapis.com &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Service Account&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud iam service-accounts create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create Service Account Key&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud iam service-accounts keys create &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PWD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ACCOUNT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.json &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--iam-account&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EMAIL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--project&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Update Project IAM permissions&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ROLE in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROLES[@]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  gcloud projects add-iam-policy-binding &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --member&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;serviceAccount:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EMAIL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --role&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROLE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the code, you&amp;rsquo;ll need to install &lt;a href=&#34;https://github.com/protocolbuffers/protobuf&#34;&gt;&lt;code&gt;protoc&lt;/code&gt;&lt;/a&gt; and preferably have it in your path.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus Protobufs and Native Histograms</title>
      <link>https://pretired.dazwilkin.com/posts/240307/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240307/</guid>
      <description>&lt;p&gt;I responded to a question &lt;a href=&#34;https://stackoverflow.com/questions/78112323/prometheus-metric-protocol-buffer-in-grpc#comment137716337_78112323&#34;&gt;Prometheus metric protocol buffer in gRPC&lt;/a&gt; on Stackoverflow and it piqued my curiosity and got me yak shaving.&lt;/p&gt;&#xA;&lt;p&gt;Prometheus used to support two exposition formats including Protocol Buffers, then dropped Protocol Buffer and has since re-added it (see &lt;a href=&#34;https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md#protobuf-format&#34;&gt;Protobuf format&lt;/a&gt;). The Protobuf format has returned to support the experimental &lt;a href=&#34;https://prometheus.io/docs/prometheus/latest/feature_flags/#native-histograms&#34;&gt;Native Histograms&lt;/a&gt; feature.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m interested in adding Native Histogram support to &lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt; so thought I&amp;rsquo;d learn more about this metric.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gnarly Protocol Buffers compilation</title>
      <link>https://pretired.dazwilkin.com/posts/240117/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240117/</guid>
      <description>&lt;p&gt;This Stackoverflow question piqued my interest:&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/77829333/retry-policy-configuration-for-grpc-not-working&#34;&gt;retry policy configuration for grpc not working&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/service_config.md&#34;&gt;Service Config in gRPC&lt;/a&gt; is new to me but, my initial suspicion (albeit incorrect) was that the JSON types were incorrect.&lt;/p&gt;&#xA;&lt;p&gt;I decided to try using the Protocol Buffer source &lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/master/grpc/service_config/service_config.proto&#34;&gt;&lt;code&gt;service_config.proto&lt;/code&gt;&lt;/a&gt; to verify the JSON.&lt;/p&gt;&#xA;&lt;p&gt;To do so I needed to compile the source&amp;hellip;. it was gnarly.&lt;/p&gt;&#xA;&lt;p&gt;There are 2 repos used:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;&lt;code&gt;googleapis&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-proto&#34;&gt;&lt;code&gt;grpc-proto&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;service_config.proto&lt;/code&gt; includes &lt;code&gt;options&lt;/code&gt; for &lt;code&gt;java_package&lt;/code&gt; but no &lt;code&gt;go_package&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Listing Cloud Logging log-based metrics using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/231222/</link>
      <pubDate>Fri, 22 Dec 2023 11:00:00 +0000</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/231222/</guid>
      <description>&lt;p&gt;Referring to &lt;a href=&#34;https://pretired.dazwilkin.com/posts/230314/&#34;&gt;Accessing Google Services using gRPC&lt;/a&gt;, I wanted to query a project&amp;rsquo;s &lt;a href=&#34;https://cloud.google.com/logging&#34;&gt;Cloud Logging&lt;/a&gt; for &lt;a href=&#34;https://cloud.google.com/logging/docs/logs-based-metrics&#34;&gt;log-based metrics&lt;/a&gt; using gRPC.&lt;/p&gt;&#xA;&lt;p&gt;In summary:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;logging.googleapis.com:443&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ROOT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/path/to/googleapis&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# https://github.com/googleapis/googleapis&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PACKAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google/logging/v2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# NB Not logging.proto&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROTO&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROOT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PACKAGE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/logging_metrics.proto&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;gcloud auth print-access-token&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PROJECT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PACKAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.logging.v2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SERVICE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MetricsServiceV2&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;METHOD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PACKAGE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;SERVICE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/ListLogMetrics&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ListLogMetricsRequest fields&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PARENT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;projects/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpcurl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--import-path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ROOT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--proto&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROTO&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;parent\&amp;#34;: \&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PARENT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ENDPOINT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;METHOD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From &lt;a href=&#34;https://developers.google.com/apis-explorer&#34;&gt;APIs Explorer&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/logging/docs/reference/api-overview&#34;&gt;Cloud Logging API v2&lt;/a&gt;, instead of the &lt;a href=&#34;https://cloud.google.com/logging/docs/reference/v2/rest&#34;&gt;REST reference&lt;/a&gt;, browse the &lt;a href=&#34;https://cloud.google.com/logging/docs/reference/v2/rpc&#34;&gt;gRPC reference&lt;/a&gt; specifically the package &lt;a href=&#34;https://cloud.google.com/logging/docs/reference/v2/rpc/google.logging.v2&#34;&gt;&lt;code&gt;google.logging.v2&lt;/code&gt;&lt;/a&gt; which includes &lt;a href=&#34;https://cloud.google.com/logging/docs/reference/v2/rpc/google.logging.v2#google.logging.v2.MetricsServiceV2&#34;&gt;&lt;code&gt;MetricsServiceV2&lt;/code&gt;&lt;/a&gt;. We&amp;rsquo;re interested in the &lt;code&gt;ListLogMetrics&lt;/code&gt; method (which unfortunately isn&amp;rsquo;t directly hyperlinkable) but is defined to be:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Container Apps</title>
      <link>https://pretired.dazwilkin.com/posts/230404/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230404/</guid>
      <description>&lt;p&gt;The majority of &lt;a href=&#34;https://ack.al&#34; data-goatcounter-click=&#34;ack.al&#34;&gt;Ackal&lt;/a&gt;&amp;rsquo;s components are deployed to &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud&lt;/a&gt;. However, by its nature, Ackal benefits from deployments that span cloud platforms. I&amp;rsquo;ve deployed Ackal&amp;rsquo;s &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/health-checking.md&#34;&gt;health checks&lt;/a&gt; to &lt;a href=&#34;https://fly.io&#34;&gt;Fly&lt;/a&gt;, and managed Kubernetes services on &lt;a href=&#34;https://linode.com&#34;&gt;Linode&lt;/a&gt; and &lt;a href=&#34;https://vultr.com&#34;&gt;Vultr&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Today, I decided to revisit&lt;a href=&#34;#microsoft&#34;&gt;¹&lt;/a&gt; &lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Azure&lt;/a&gt;. Ackal uses Azure (Active Directory) for one of its OAuth providers. This time, I wanted to deploy a containerized gRPC service. Azure provides &lt;a href=&#34;https://azure.microsoft.com/en-us/products/category/containers/&#34;&gt;several&lt;/a&gt; container-oriented services. I decided to use &lt;a href=&#34;https://azure.microsoft.com/en-us/products/container-apps/&#34;&gt;Azure Container Apps&lt;/a&gt; and, in hindsight, find it analogous to Google &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Cloud Run&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Google Services using gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/230314/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230314/</guid>
      <description>&lt;p&gt;Google publishes interface definitions of Google APIs (services) that support REST and gRPC in a repo called &lt;a href=&#34;https://github.com/googleapis/googleapis&#34;&gt;Google APIs&lt;/a&gt;. Google&amp;rsquo;s SDKs uses gRPC to access these services but, how to do this using e.g. &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt;?&lt;/p&gt;&#xA;&lt;p&gt;I wanted to debug &lt;a href=&#34;https://cloud.google.com/profiler/docs&#34;&gt;Cloud Profiler&lt;/a&gt; and its agent makes &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L83&#34;&gt;&lt;code&gt;UpdateProfile&lt;/code&gt;&lt;/a&gt; RPCs to &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L41&#34;&gt;&lt;code&gt;cloudprofiler.googleapis.com&lt;/code&gt;&lt;/a&gt;. Cloud Profiler is more challenging service to debug because (a) it&amp;rsquo;s publicly &amp;ldquo;write-only&amp;rdquo;; and (b) it has complex messages. &lt;code&gt;UpdateProfile&lt;/code&gt; sends &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L123&#34;&gt;&lt;code&gt;UpdateProfileRequest&lt;/code&gt;&lt;/a&gt; messages that include &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/42ba7e6302f5e0f10ac2b9b17f5b6d568ecae02d/google/devtools/cloudprofiler/v2/profiler.proto#L123&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt; messages that include &lt;code&gt;profile_bytes&lt;/code&gt; which are gzip compressed serialized protos of &lt;a href=&#34;https://github.com/google/pprof&#34;&gt;pprof&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/google/pprof/blob/d61513b1440d93d62aad023cc60d7a33f3917b70/proto/profile.proto#L46&#34;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with LKE</title>
      <link>https://pretired.dazwilkin.com/posts/230215/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230215/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&#34;https://cert-manager.io&#34;&gt;&lt;code&gt;cert-manager&lt;/code&gt;&lt;/a&gt; is a better solution to what follows.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I wrote about deploying &lt;a href=&#34;https://pretired.dazwilkin.com/posts/220603/&#34;&gt;Secure (TLS) gRPC services with Vultr Kubernetes Engine (VKE)&lt;/a&gt;. This week, I&amp;rsquo;ve reproduced this deployment using Linode Kubernetes Engine (LKE).&lt;/p&gt;&#xA;&lt;p&gt;Thanks to the consistency provided by Kubernetes, the Kubernetes programming is almost identical. The main differences are between the CLI&amp;rsquo;s provided by these platforms. Both are good. They&amp;rsquo;re just different.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m going to include the &lt;code&gt;linode-cli&lt;/code&gt; commands I&amp;rsquo;m using in this post as I found it slightly more quirky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with VKE</title>
      <link>https://pretired.dazwilkin.com/posts/220603/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220603/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;a href=&#34;https://cert-manager.io&#34;&gt;&lt;code&gt;cert-manager&lt;/code&gt;&lt;/a&gt; is a better solution to what follows.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve a need to deploy a Vultr Kubernetes Engine (VKE) cluster on a daily basis (create and delete within a few hours) and expose (securely|TLS) a gRPC service.&lt;/p&gt;&#xA;&lt;p&gt;I have an existing solution &lt;a href=&#34;https://pretired.dazwilkin.com/posts/211130/&#34;&gt;Automatic Certs w/ Golang gRPC service on Compute Engine&lt;/a&gt; that combines a gRPC Healthchecking and an ACME service and decided to reuse this.&lt;/p&gt;&#xA;&lt;p&gt;In order for it work, we need:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>&lt;p&gt;Last year, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/211130/&#34;&gt;Automatic Certs w/ Golang gRPC service on Compute Engine&lt;/a&gt;. That solution uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34;&gt;ACME&lt;/a&gt; with (the wonderful) &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. Google is offering a private preview of &lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api&#34;&gt;Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)&lt;/a&gt; and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try. You&amp;rsquo;ll need to sign-up for the private preview, for what follows to work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>&lt;p&gt;I needed to deploy a &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto&#34;&gt;healthcheck&lt;/a&gt;-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has &lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/health&#34;&gt;&lt;code&gt;grpc-go/health&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I learned in my travels that:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;DigitalOcean [App] platform does not (&lt;a href=&#34;https://www.digitalocean.com/community/questions/app-platform-http-2-support&#34;&gt;link&lt;/a&gt;) work with TLS-based gRPC apps.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fly.io&#34;&gt;Fly&lt;/a&gt; has a regression (&lt;a href=&#34;https://community.fly.io/t/urgent-grpc-server-unreachable-via-grpcurl/2694/5&#34;&gt;link&lt;/a&gt;) that breaks gRPC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Renewing Firebase Authentication ID tokens with gRPC</title>
      <link>https://pretired.dazwilkin.com/posts/210730/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210730/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about a project in which I&amp;rsquo;m using Firebase Authentication in combination with Google Cloud Endpoints and a gRPC service running on Cloud Run:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210614/&#34;&gt;Firebase Authentication, Cloud Endpoints and gRPC (1of2)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210618/&#34;&gt;Firebase Authentication, Cloud Endpoints and gRPC (2of2)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This works well with one caveat, the ID tokens (JWTs) minted by Firebase Authentication have a 3600 second (one hour) lifetime.&lt;/p&gt;&#xA;&lt;p&gt;The user flow in my app is that whenever the user invokes the app&amp;rsquo;s CLI:&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC Interceptors and in-memory gRPC connections</title>
      <link>https://pretired.dazwilkin.com/posts/210724/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210724/</guid>
      <description>&lt;p&gt;For&amp;hellip; reasons, I wanted to pre-filter gRPC requests to check for authorization. Authorization is implemented as a &amp;lsquo;micro-service&amp;rsquo; and I wanted the authorization server to run in the same process as the gRPC client.&lt;/p&gt;&#xA;&lt;p&gt;TL;DR:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Shiju&amp;rsquo;s &lt;a href=&#34;https://shijuvar.medium.com/writing-grpc-interceptors-in-go-bf3e7671fe48&#34;&gt;&amp;ldquo;Writing gRPC Interceptors in Go&amp;rdquo;&lt;/a&gt; is great&lt;/li&gt;&#xA;&lt;li&gt;This Stack overflow &lt;a href=&#34;https://stackoverflow.com/a/52080545/609290&#34;&gt;answer&lt;/a&gt; ostensibly for writing unit tests for gRPC got me an in-process server&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;What follows stands on these folks&amp;rsquo; shoulders&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;A key motivator for me to write blog posts is that helps me ensure that I understand things. Writing this post, I realized I&amp;rsquo;d not researched gRPC Interceptors and, as luck would have it, I found some interesting content, not on &lt;a href=&#34;https://grpc.io&#34;&gt;&lt;code&gt;grpc.io&lt;/code&gt;&lt;/a&gt; but on the &lt;a href=&#34;https://github.com/grpc-ecosystem&#34;&gt;&lt;code&gt;grpc-ecosystem&lt;/code&gt;&lt;/a&gt; repo, specifically &lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-middleware&#34;&gt;Go gRPC middleware&lt;/a&gt;. But, I refer again to Shiju&amp;rsquo;s clear and helpful &lt;a href=&#34;https://shijuvar.medium.com/writing-grpc-interceptors-in-go-bf3e7671fe48&#34;&gt;&amp;ldquo;Writing gRPC Interceptors in Go&amp;rdquo;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (2of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210618/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210618/</guid>
      <description>&lt;p&gt;Earlier this week, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/210614/&#34;&gt;Firebase Authentcation, Cloud Endpoints and gRPC (1of2)&lt;/a&gt;. Since then, I &lt;a href=&#34;https://github.com/GoogleCloudPlatform/esp-v2/issues/542&#34;&gt;learned some more&lt;/a&gt; and added a gRPC interceptor to implement basic authorization for the service.&lt;/p&gt;&#xA;&lt;h2 id=&#34;espv2---allow-unauthenticated&#34;&gt;ESPv2 &lt;code&gt;--allow-unauthenticated&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The Cloud Enpoints (ESPv2) proxy must be run as &lt;code&gt;--allow-unauthenticated&lt;/code&gt; on Cloud Run to ensure that requests make it to the proxy where the request is authenticated and only authenticated requests make it on to the backend service. Thanks Google&amp;rsquo;s &lt;a href=&#34;https://github.com/nareddyt&#34;&gt;Teju Nareddy&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Firebase Authentication, Cloud Endpoints and gRPC (1of2)</title>
      <link>https://pretired.dazwilkin.com/posts/210614/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210614/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m building a service that requires user authentication. The primary endpoint is a gRPC-based service. I would like to consider using certificate-based auth but this feels&amp;hellip; challenging. Instead, I have been aware of, but never used, &lt;a href=&#34;https://firebase.google.com/products/auth&#34;&gt;Firebase Authentication&lt;/a&gt; and was interested to see that &lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; includes Firebase Authentication as one of its supported auth mechanisms. Curiosity piqued, I confirmed that gRPC supports &lt;a href=&#34;https://grpc.io/docs/guides/auth/#using-google-token-based-authentication&#34;&gt;Google token-based authentication&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The following is a summary of what I did but I&amp;rsquo;ll leave the extensive documentation to Google, (Google&amp;rsquo;s) Firebase and gRPC, all of which, in this case, provide really good explanations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Endpoints combine OpenAPI and gRPC... or not!</title>
      <link>https://pretired.dazwilkin.com/posts/210608/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210608/</guid>
      <description>&lt;p&gt;See:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/210519/&#34;&gt;Multiplexing gRPC and HTTP endpoints with Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://pretired.dazwilkin.com/posts/200325/&#34;&gt;gRPC, Cloud Run &amp;amp; Endpoints&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleCloudPlatform/esp-v2/issues/523&#34;&gt;ESPv2: Configure Cloud Endpoints to proxy traffic to a Cloud Run multiplexed (gRPC|HTTP) service&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Challenges:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cloud Run permits single port&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run services publishing e.g. gRPC and Prometheus, must multiplex transports&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run services publishing multiplexed transports are &lt;em&gt;challenging&lt;/em&gt; to expose using Cloud Endpoints&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hypothesis-1-multiplexed-transports-work-with-cloud-run&#34;&gt;Hypothesis #1: Multiplexed transports work with Cloud Run&lt;/h2&gt;&#xA;&lt;p&gt;See: &lt;a href=&#34;https://pretired.dazwilkin.com/posts/210519/&#34;&gt;Multiplexing gRPC and HTTP endpoints with Cloud Run&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>&lt;p&gt;Google &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Cloud Run&lt;/a&gt; is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.&lt;/p&gt;&#xA;&lt;p&gt;Fortunately, &lt;a href=&#34;https://github.com/soheilhy/cmux&#34;&gt;cmux&lt;/a&gt; provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; See the cmux &lt;a href=&#34;https://github.com/soheilhy/cmux#limitations&#34;&gt;Limitations&lt;/a&gt; and use:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-golang&#34; data-lang=&#34;golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;grpcl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MatchWithWriters&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;cmux&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HTTP2MatchHeaderFieldSendSettings&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/grpc&amp;#34;&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Extending the &lt;a href=&#34;https://github.com/soheilhy/cmux#how-to&#34;&gt;example&lt;/a&gt; from the cmux repo:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fly.io</title>
      <link>https://pretired.dazwilkin.com/posts/210412/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210412/</guid>
      <description>&lt;p&gt;I spent some time over the weekend understanding &lt;a href=&#34;https://fly.io&#34;&gt;Fly.io&lt;/a&gt;. It&amp;rsquo;s always fascinating to me how many smart people are building really neat solutions. Fly.io is subtly different to other platforms that I use (Kubernetes, GCP, DO, Linode) and I&amp;rsquo;ve found the Fly.io team to be highly responsive and helpful to my noob questions.&lt;/p&gt;&#xA;&lt;p&gt;One of the team&amp;rsquo;s posts, &lt;a href=&#34;https://fly.io/blog/docker-without-docker/&#34;&gt;Docker without Docker&lt;/a&gt; surfaced in my Feedly feed (&lt;a href=&#34;https://news.ycombinator.com/item?id=26746280&#34;&gt;hackernews&lt;/a&gt;) and it piqued my interest.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dapr</title>
      <link>https://pretired.dazwilkin.com/posts/210222/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210222/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s a good name, I read it as &amp;ldquo;dapper&amp;rdquo; but I frequently type &amp;ldquo;darp&amp;rdquo; :-(&lt;/p&gt;&#xA;&lt;p&gt;Was interested to &lt;a href=&#34;https://blog.dapr.io/posts/2021/02/17/announcing-dapr-v1.0/&#34;&gt;read&lt;/a&gt; that &lt;a href=&#34;https://dapr.io/&#34;&gt;Dapr&lt;/a&gt; is now v1.0 and decided to check it out. I was initially confused between Dapr and service mesh functionality. But, having used Dapr, it appears to be more focused in aiding the development of (cloud-native) (distributed) apps by providing developers with abstractions for e.g. service discovery, eventing, observability whereas service meshes feel (!) more oriented towards simplifying the deployment of existing apps. Both use the concept of proxies, deployed alongside app components (as sidecars on Kubernetes) to provide their functionality to apps.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remotely invoking WASM functions using gRPC and waPC</title>
      <link>https://pretired.dazwilkin.com/posts/200717/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200717/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt;, I can now remotely invoke (arbitrary) WASM functions:&lt;/p&gt;&#xA;&lt;p&gt;Client:&lt;/p&gt;&#xA;&lt;p&gt;The logging isn&amp;rsquo;t perfectly clear but, the client gets (a previously added) WASM binary from the server (using the SHA-256 of the WASM binary as a unique identifier). The result includes metadata that includes a protobuf descriptor of the WASM binary&amp;rsquo;s functions. The descriptor defines gRPC services (that represent the WASM functions) with input (parameters) and output (results) messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust implementation of Crate Transparency using Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200429/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200429/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been hacking on a Rust-based transparent application for Google Trillian. As appears to be my fixation, this personality is for another package manager. This time, Rust&amp;rsquo;s &lt;a href=&#34;https://doc.rust-lang.org/1.0.0/book/crates-and-modules.html&#34;&gt;Crates&lt;/a&gt; often found in &lt;a href=&#34;https://crates.io&#34;&gt;&lt;code&gt;crates.io&lt;/code&gt;&lt;/a&gt; which is Rust&amp;rsquo;s Package Registry. I discussed this project earlier this month &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200403/&#34;&gt;Rust Crate Transparency &amp;amp;&amp;amp; Rust SDK for Google Trillian&lt;/a&gt; and and earlier approach for Python&amp;rsquo;s packages with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;pypi-transparency&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This time, of course, I&amp;rsquo;m using Rust. And, by way of a first for me, for the gRPC server implementation (aka &amp;ldquo;personality&amp;rdquo;). I&amp;rsquo;ve been lazy thanks to the excellent &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;gRPCurl&lt;/a&gt; and have been using it way of a client. Because I&amp;rsquo;m more familiar with Golang and because I&amp;rsquo;ve written (most) other Trillian personalities in Golang, I resorted to quickly implementing Crate Transparency in Golang too in order to uncover bugs with the Rust implementation. I&amp;rsquo;ll write a follow-up post on the complexity I seem to struggle with when using protobufs and gRPC [in Golang].&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust Crate Transparency &amp;&amp; Rust SDK for Google Trillian</title>
      <link>https://pretired.dazwilkin.com/posts/200403/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200403/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m noodling the utility of a Transparency solution for Rust Crates. When developers push crates to Cargo, a bunch of metadata is associated with the crate. E.g. &lt;a href=&#34;https://crates.io/crates/protobuf&#34;&gt;&lt;code&gt;protobuf&lt;/code&gt;&lt;/a&gt;. As with Golang Modules, Python packages on PyPi etc., there appears to be utility in making tamperproof recordings of these publications. Then, other developers may confirm that a crate pulled from cates.io is highly unlikely to have been changed.&lt;/p&gt;&#xA;&lt;p&gt;On Linux, Cargo stores downloaded crates under &lt;code&gt;${HOME}/.crates/registry&lt;/code&gt;. In the case of the latest version (&lt;code&gt;2.12.0&lt;/code&gt;) of &lt;code&gt;protobuf&lt;/code&gt;, on my machine, I have:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written previously (&lt;a href=&#34;https://medium.com/google-cloud/google-trillian-for-noobs-1a-c87a78e5e585&#34;&gt;Google Trillian for Noobs&lt;/a&gt;) about Google&amp;rsquo;s interesting project &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt; and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. &lt;a href=&#34;https://pretired.dazwilkin.com/posts/190907/&#34;&gt;PyPi Transparency&lt;/a&gt;) that I&amp;rsquo;ve build using it.&lt;/p&gt;&#xA;&lt;p&gt;Having gone slight cra-cra on &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Cloud Run&lt;/a&gt; and &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; this week with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200320/&#34;&gt;Golang gRPC Cloud Run&lt;/a&gt; and &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200325/&#34;&gt;gRPC, Cloud Run &amp;amp; Endpoints&lt;/a&gt;, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&lt;/p&gt;&#xA;&lt;p&gt;It mostly (!) works :-)&lt;/p&gt;&#xA;&lt;p&gt;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).&lt;/p&gt;</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&lt;p&gt;&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/endpoints&#34;&gt;Cloud Endpoints&lt;/a&gt; is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s &lt;strong&gt;super&lt;/strong&gt; confusing to understand and complex to deploy.&lt;/p&gt;&#xA;&lt;p&gt;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt;), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take &lt;strong&gt;existing&lt;/strong&gt; code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc. may be added.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Update: 2020-03-24&lt;/strong&gt;: Since writing this post, I&amp;rsquo;ve contributed &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example/pull/12&#34;&gt;Golang&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example/pull/15&#34;&gt;Rust&lt;/a&gt; samples to Google&amp;rsquo;s project. I recommend you start there.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/compute/serve-cloud-run-requests-with-grpc-not-just-http&#34;&gt;gRPC comes to Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-cloud-run-example&#34;&gt;gRPC in Google Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Missing Golang&amp;hellip;. until now ;-)&lt;/p&gt;&#xA;&lt;p&gt;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&lt;/p&gt;&#xA;&lt;h2 id=&#34;project-structure&#34;&gt;Project structure&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll tidy up my repo but the code may be found:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Functions Simple(st) HTTP Multi-host Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190918/</link>
      <pubDate>Wed, 18 Sep 2019 12:45:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190918/</guid>
      <description>&lt;p&gt;Tweaked yesterday&amp;rsquo;s solution so that it will randomly select one from several hosts with which it&amp;rsquo;s configured.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/url&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;robin&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;hostsList&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PROXY_HOST&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hostsList&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;PROXY_HOST&amp;#39; environment variable should contain comma-separated list of hosts&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Comma-separated lists of hosts&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;hosts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Split&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;hostsList&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;urls&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;hosts&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hosts&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;Endpoint&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;host&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Port&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;PROXY_PORT&amp;#34;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;origin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;urls&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] = &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSource&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;UnixNano&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// Pick one of the URLs at random&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;urls&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;q&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Int31n&lt;/span&gt;(int32(len(&lt;span style=&#34;color:#a6e22e&#34;&gt;urls&lt;/span&gt;)))]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[Handler] Forwarding: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Forward to it&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;reverseproxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This requires a minor tweak to the deployment to escape the commas within the &lt;code&gt;PROXY_HOST&lt;/code&gt; string to disambiguate these for &lt;code&gt;gcloud&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Functions Simple(st) HTTP Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190917/</link>
      <pubDate>Tue, 17 Sep 2019 12:41:02 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190917/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m investigating the use of &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;LetsEncrypt&lt;/a&gt; for gRPC services. I found this straightforward &lt;a href=&#34;https://www.d3void.net/post/acme/&#34;&gt;post&lt;/a&gt; by Scott Devoid and am going to try this approach.&lt;/p&gt;&#xA;&lt;p&gt;Before I can do that, I need to be able to publish services (make them Internet-accessible) and would like to try to continue to use GCP for &lt;a href=&#34;https://cloud.google.com/free/&#34;&gt;free&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Some time ago, I &lt;a href=&#34;https://medium.com/google-cloud/microk8s-on-google-cloud-platform-d8b7a71a3ef&#34;&gt;wrote&lt;/a&gt; about using the excellent &lt;a href=&#34;https://microk8s.io/&#34;&gt;Microk8s&lt;/a&gt; on GCP. Using an &lt;code&gt;f1-micro&lt;/code&gt;, I&amp;rsquo;m hoping (!) to stay within the Compute Engine free tier. I&amp;rsquo;ll also try to be diligent and delete the instance when it&amp;rsquo;s not needed. This gives me a runtime platform and I can expose services to the Instance&amp;rsquo;s (Node)Ports but, I&amp;rsquo;d prefer to not be billed for a simple proxy.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
