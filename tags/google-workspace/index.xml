<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Workspace on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/google-workspace/</link>
    <description>Recent content in Google Workspace on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Nov 2022 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/google-workspace/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Delegate domain-wide authority using Golang</title>
      <link>https://pretired.dazwilkin.com/posts/221117/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/221117/</guid>
      <description>I&amp;rsquo;d not used Google&amp;rsquo;s Domain-wide Delegation from Golang and struggled to find example code.
Google provides Java and Python samples.
Google has a myriad packages implementing its OAuth security and it&amp;rsquo;s always daunting trying to determine which one to use.
As it happens, I backed into the solution through client.Options
ctx := context.Background() // Google Workspace APIS don&amp;#39;t use IAM do use OAuth scopes // Scopes used here must be reflected in the scopes on the // Google Workspace Domain-wide Delegate client scopes := []string{ .</description>
    </item>
  </channel>
</rss>
