<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>container on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/container/</link>
    <description>Recent content in container on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Nov 2022 00:00:00 -0800</lastBuildDate><atom:link href="https://pretired.dazwilkin.com/tags/container/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maintaining Container Images</title>
      <link>https://pretired.dazwilkin.com/posts/221128/</link>
      <pubDate>Mon, 28 Nov 2022 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/221128/</guid>
      <description>As I contemplate moving my &amp;ldquo;thing&amp;rdquo; into production, I&amp;rsquo;m anticipating aspects of the application that need maintenance and how this can be automated.
I&amp;rsquo;d been negligent in the maintenance of some of my container images.
I&amp;rsquo;m using mostly Go and some Rust as the basis of static(ally-compiled) binaries that run in these containers but not every container has a base image of scratch. scratch is the only base image that doesn&amp;rsquo;t change and thus the only base image that doesn&amp;rsquo;t require that container images buit FROM it, be maintained.</description>
    </item>
    
    <item>
      <title>Playing with GitHub Container Registry REST API</title>
      <link>https://pretired.dazwilkin.com/posts/220422/</link>
      <pubDate>Fri, 22 Apr 2022 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/220422/</guid>
      <description>I&amp;rsquo;ve a day to catch up on blogging. I&amp;rsquo;m building a &amp;ldquo;thing&amp;rdquo; and getting this near to the finish line consumes my time and has meant that I&amp;rsquo;m not originating anything particularly new. However, there are a couple of tricks in my deployment process that may be of interest to others.
I&amp;rsquo;ve been a long-term using of Google&amp;rsquo;s [Cloud Build] and like the simplicity (everything&amp;rsquo;s a container, alot!). Because I&amp;rsquo;m using GitHub repos, I&amp;rsquo;ve been using GitHub Actions to (re)build containers on pushes and GitHub Container registry (GHCR) to store the results.</description>
    </item>
    
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>Last year, I wrote about using Automatic Certs w/ Golang gRPC service on Compute Engine. That solution uses ACME with (the wonderful) Let&amp;rsquo;s Encrypt. Google is offering a private preview of Automate Public Certificates Lifecycle Management via RFC 8555 (ACME) and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try.</description>
    </item>
    
    <item>
      <title>Automatic Certs w/ Golang gRPC service on Compute Engine</title>
      <link>https://pretired.dazwilkin.com/posts/211130/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/211130/</guid>
      <description>I needed to deploy a healthcheck-enabled gRPC TLS-enabled service. Fortunately, most (all?) of the SDKs include an implementation, e.g. Golang has grpc-go/health.
I learned in my travels that:
DigitalOcean [App] platform does not (link) work with TLS-based gRPC apps. Fly has a regression (link) that breaks gRPC So, I resorted to Google Cloud Platform (GCP). Although Cloud Run would be well-suited to running the gRPC app, it uses a proxy|sidecar to provision a cert for the app and I wanted to be able to (easily use a custom domain) and give myself a somewhat general-purpose solution.</description>
    </item>
    
  </channel>
</rss>
