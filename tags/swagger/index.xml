<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swagger on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/swagger/</link>
    <description>Recent content in Swagger on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 20 Mar 2020 00:00:00 -0800</lastBuildDate>
    
	<atom:link href="https://pretired.dazwilkin.com/tags/swagger/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:
 gRPC comes to Cloud Run gRPC in Google Cloud Run  Missing Golang&amp;hellip;. until now ;-)
I had problems with 1.14 and so I&amp;rsquo;m using 1.13.
Project structure I&amp;rsquo;ll tidy up my repo but the code may be found:
https://github.com/DazWilkin/Golang-gRPC-CloudRun
tree -L 1 . ├── client ├── cloudbuild.yaml ├── deployment ├── go.</description>
    </item>
    
    <item>
      <title>OriginStamp Rust SDK Example</title>
      <link>https://pretired.dazwilkin.com/posts/200312/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200312/</guid>
      <description>I wrote recently describing Python and Golang clients for OriginStamp based on OriginStamp&amp;rsquo;s API&amp;rsquo;s swagger spec. As a way to pursue learning rust, I&amp;rsquo;ve been forcing myself to write examples using rust. I&amp;rsquo;m honestly finding learning rust tough going and think I&amp;rsquo;m probably better to revert to the &amp;ldquo;Learning Rust&amp;rdquo; tutorials.
That said, herewith an explanation of building a rust client using an OpenAPI (!) generated SDK from OriginStamp&amp;rsquo;s swagger spec.</description>
    </item>
    
    <item>
      <title>OriginStamp Python|Golang SDK Examples</title>
      <link>https://pretired.dazwilkin.com/posts/200217/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200217/</guid>
      <description>A friend mentioned OriginStamp to me.
NB There are 2 sites: originstamp.com and originstamp.org.
It&amp;rsquo;s an interesting project.
It&amp;rsquo;s a solution for providing auditable proof that you had a(ccess to) some digital thing before a certain date. OriginStamp provides user-|developer-friendly means to submit files|hashes (of your content) and have these bundled into transactions that are submitted to e.g. bitcoin.
I won&amp;rsquo;t attempt to duplicate the narrative here, review OriginStamp&amp;rsquo;s site and some of its content.</description>
    </item>
    
  </channel>
</rss>