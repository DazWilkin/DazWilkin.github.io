<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OriginStamp on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/originstamp/</link>
    <description>Recent content in OriginStamp on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Mar 2020 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/originstamp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OriginStamp Rust SDK Example</title>
      <link>https://pretired.dazwilkin.com/posts/200312/</link>
      <pubDate>Thu, 12 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200312/</guid>
      <description>&lt;p&gt;I wrote &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200217/&#34;&gt;recently&lt;/a&gt; describing Python and Golang clients for OriginStamp based on OriginStamp&amp;rsquo;s API&amp;rsquo;s swagger spec. As a way to pursue learning rust, I&amp;rsquo;ve been forcing myself to write examples using rust. I&amp;rsquo;m honestly finding learning rust tough going and think I&amp;rsquo;m probably better to revert to the &amp;ldquo;Learning Rust&amp;rdquo; tutorials.&lt;/p&gt;&#xA;&lt;p&gt;That said, herewith an explanation of building a rust client using an OpenAPI (!) generated SDK from OriginStamp&amp;rsquo;s swagger spec.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OriginStamp: Verifying Proofs</title>
      <link>https://pretired.dazwilkin.com/posts/200226/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200226/</guid>
      <description>&lt;p&gt;Recently, I &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200217/&#34;&gt;wrote&lt;/a&gt; about some initial adventures with &lt;a href=&#34;https://originstamp.org&#34;&gt;OriginStamp&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Using OriginStamp&amp;rsquo;s &lt;a href=&#34;https://originstamp.org/home&#34;&gt;UI&lt;/a&gt; or API, submitting a hash results in transactions being submitted to Bitcoin, Ethereum and a German newspaper.&lt;/p&gt;&#xA;&lt;p&gt;Using the API, it&amp;rsquo;s possible to query OriginStamp&amp;rsquo;s service for a proof. This post explains how to verify such a proof.&lt;/p&gt;&#xA;&lt;p&gt;The diligent reader among you (Hey Mom!) will recall that I submitted a hash for the message:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Frederik Jack is a bubbly Border Collie&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The SHA-256 hash of this message is:&lt;/p&gt;</description>
    </item>
    <item>
      <title>FreeTSA &amp; Digitorus&#39; Timestamp SDK</title>
      <link>https://pretired.dazwilkin.com/posts/200219/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200219/</guid>
      <description>&lt;p&gt;I wrote recently about some exploration of Timestamping with &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200217/&#34;&gt;OriginStamp&lt;/a&gt;. Since writing that post, I had some supportive feedback from the helpful folks at OriginStamp and plan to continue exploring that solution.&lt;/p&gt;&#xA;&lt;p&gt;Meanwhile, OriginStamp exposed me to &lt;a href=&#34;https://en.wikipedia.org/wiki/Timestamping_%28computing%29&#34;&gt;timestamping&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Trusted_timestamping&#34;&gt;trusted timestamping&lt;/a&gt; and I discovered &lt;a href=&#34;https://freetsa.org&#34;&gt;freeTSA.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;What&amp;rsquo;s the point? These services provide authoritative proof of the existence of a digital asset before some point in time; OriginStamp provides a richer service and uses multiple timestamp authorities including Bitcoin, Ethereum and rather interestingly a German Newspaper&amp;rsquo;s &lt;a href=&#34;https://blockchain.suedkurier.de/faq&#34;&gt;Trusted Timestamp&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OriginStamp Python|Golang SDK Examples</title>
      <link>https://pretired.dazwilkin.com/posts/200217/</link>
      <pubDate>Mon, 17 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200217/</guid>
      <description>&lt;p&gt;A friend mentioned &lt;a href=&#34;https://originstamp.org&#34;&gt;OriginStamp&lt;/a&gt; to me.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; There are 2 sites: &lt;a href=&#34;https://originstamp.com&#34;&gt;originstamp.com&lt;/a&gt; and &lt;a href=&#34;https://originstamp.org&#34;&gt;originstamp.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s an interesting project.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s a solution for providing auditable proof that you had a(ccess to) some digital thing before a certain date. OriginStamp provides user-|developer-friendly means to submit files|hashes (of your content) and have these bundled into transactions that are submitted to e.g. bitcoin.&lt;/p&gt;&#xA;&lt;p&gt;I won&amp;rsquo;t attempt to duplicate the narrative here, review OriginStamp&amp;rsquo;s site and some of its content.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
