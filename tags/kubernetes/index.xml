<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 May 2024 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Delve to debug Go containers on Kubernetes</title>
      <link>https://pretired.dazwilkin.com/posts/280524/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/280524/</guid>
      <description>An interesting question on Stack overflow prompted me to understand how to use Visual Studio Code and Delve to remotely debug a Golang app running on Kubernetes (MicroK8s).&#xA;The OP is using Gin which was also new to me so the question gave me an opportunity to try out several things.&#xA;Sources A simple healthz handler:&#xA;package main import ( &amp;#34;flag&amp;#34; &amp;#34;log/slog&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) var ( addr = flag.String(&amp;#34;addr&amp;#34;, &amp;#34;0.</description>
    </item>
    <item>
      <title>Fly Kubernetes</title>
      <link>https://pretired.dazwilkin.com/posts/240314/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240314/</guid>
      <description>Interested to explore Fly Kubernetes after being accepted into the closed beta.&#xA;The folks at Fly are innovative in their technology uses and, having been a long-time Kubernetes user, I was intrigued to learn that Fly.io has implemented Kubernetes atop Fly.&#xA;My first Deployment failed:&#xA;Authentication required to access image &amp;#34;ghcr.io/{image}&amp;#34; It was confirmed to me that FKS does not support pulling from private registries. The solution is pull-tag-push images to registry.</description>
    </item>
    <item>
      <title>MicroK8s operability add-on</title>
      <link>https://pretired.dazwilkin.com/posts/240216/</link>
      <pubDate>Fri, 16 Feb 2024 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/240216/</guid>
      <description>Spent time today yak-shaving which resulted in an unplanned migration from MicroK8s &amp;lsquo;prometheus&amp;rsquo; add-on to the new and not fully-documented &amp;lsquo;observability&amp;rsquo; add-on:&#xA;sudo microk8s.enable prometheus Infer repository core for addon prometheus DEPRECATION WARNING: &amp;#39;prometheus&amp;#39; is deprecated and will soon be removed. Please use &amp;#39;observability&amp;#39; instead. ... The reason for the name change is unclear.&#xA;It&amp;rsquo;s unclear whether there&amp;rsquo;s a difference in the primary components that are installed too (I&amp;rsquo;d thought Grafana wasn&amp;rsquo;t included in &amp;lsquo;prometheus&amp;rsquo;), (Grafana) Loki and (Grafana) Tempo definitely weren&amp;rsquo;t included and I don&amp;rsquo;t want them either.</description>
    </item>
    <item>
      <title>Kubernetes Python SDK w/ CRDs</title>
      <link>https://pretired.dazwilkin.com/posts/230708/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230708/</guid>
      <description>Responded to Get Custom K8s Resource using Python and found the CustomObjectsApi documentation unclear.&#xA;If you have a cluster and a kubeconfig file with a correctly configured current-context, so that you can successfully:&#xA;PLURAL=&amp;#34;checks&amp;#34; kubectl get ${PLURAL} \ --all-namespaces NOTE I&amp;rsquo;m using Ackal&amp;rsquo;s CRDs in these examples.&#xA;Then you can use the following code to access the cluster&amp;rsquo;s REST API server to enumerate its CRDs:&#xA;main.py:&#xA;from __future__ import print_function from kubernetes import client, config from kubernetes.</description>
    </item>
    <item>
      <title>Routing Firestore events to GKE with Eventarc</title>
      <link>https://pretired.dazwilkin.com/posts/230530/</link>
      <pubDate>Tue, 30 May 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230530/</guid>
      <description>Google announced Firestore &amp;hellip; integration with Eventarc. Ackal uses Firestore to persist Customer and Check information and it uses Google Cloud Firestore Triggers to handle events on these document types.&#xA;Eventarc feels like the strategic future of eventing in Google Cloud and I&amp;rsquo;ve been concerned since adopting the technology that Google would abandon Google Cloud Firestore Triggers.&#xA;For this reason, when I saw last week&amp;rsquo;s announcement, I thought I should evaluate the mechanism and this blog post is a summary of that work.</description>
    </item>
    <item>
      <title>Robusta KRR w/ GMP</title>
      <link>https://pretired.dazwilkin.com/posts/230427/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230427/</guid>
      <description>I&amp;rsquo;ve been spending time recently optimizing Ackal&amp;rsquo;s use of Google Cloud Logging and Cloud Monitoring in posts:&#xA;Filtering metrics w/ Google Managed Prometheus Kubernetes metrics, metrics everywhere Google Metric Diagnostics and Metric Data Ingested Yesterday, I read that Robusta has a new open source project Kubernetes Resource Recommendations (KRR) so I took some time to evaluate it.&#xA;This post describes the changes I had to make to get KRR working with Google Managed Prometheus (GMP):</description>
    </item>
    <item>
      <title>Google Metric Diagnostics and Metric Data Ingested</title>
      <link>https://pretired.dazwilkin.com/posts/230425/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230425/</guid>
      <description>I&amp;rsquo;ve been on an efficiency drive with Cloud Logging and Cloud Monitoring.&#xA;With regards Cloud Logging, I&amp;rsquo;m contemplating (!) eliminating almost all log storage. As it is I&amp;rsquo;ve buzz cut log storage with a _Default sink that has comprehensive sets of NOT LOG_ID(X) inclusion and exclusion filters. As I was doing so, I began to wonder why I need to pay for the storage of much logging. There&amp;rsquo;s the comfort from knowing that everything you may ever need is being logged (at least for 30 days) but there&amp;rsquo;s also the costs that that entails.</description>
    </item>
    <item>
      <title>Kubernetes metrics, metrics everywhere</title>
      <link>https://pretired.dazwilkin.com/posts/230419/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230419/</guid>
      <description>I&amp;rsquo;ve been tinkering with ways to &amp;ldquo;unit-test&amp;rdquo; my assumptions when using cloud platforms. I recently wrote about good posts by Google describing achieving cost savings with Cloud Monitoring and Cloud Logging:&#xA;How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost With Cloud Monitoring, I&amp;rsquo;ve restricted the prometheus.googleapis.com metrics that are being ingested but realized I wanted to track the number of Pods (and Containers) deployed to a GKE cluster.</description>
    </item>
    <item>
      <title>Kubernetes Operators</title>
      <link>https://pretired.dazwilkin.com/posts/230310/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230310/</guid>
      <description>Ackal uses a Kubernetes Operator to orchestrate the lifecycle of its health checks. Ackal&amp;rsquo;s Operator is written in Go using kubebuilder.&#xA;Yesterday, my interest was piqued by a MetalBear blog post Writing a Kubernetes Operator [in Rust]. I spent some time reimplementing one of Ackal&amp;rsquo;s CRDs (Check) using kube-rs and not only refreshed my Rust knowledge but learned a bunch more about Kubernetes and Operators.&#xA;While rummaging around the Kubernetes documentation, I discovered flant&amp;rsquo;s Shell-operator and spent some time today exploring its potential.</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with LKE</title>
      <link>https://pretired.dazwilkin.com/posts/230215/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230215/</guid>
      <description>NOTE cert-manager is a better solution to what follows.&#xA;I wrote about deploying Secure (TLS) gRPC services with Vultr Kubernetes Engine (VKE). This week, I&amp;rsquo;ve reproduced this deployment using Linode Kubernetes Engine (LKE).&#xA;Thanks to the consistency provided by Kubernetes, the Kubernetes programming is almost identical. The main differences are between the CLI&amp;rsquo;s provided by these platforms. Both are good. They&amp;rsquo;re just different.&#xA;I&amp;rsquo;m going to include the linode-cli commands I&amp;rsquo;m using in this post as I found it slightly more quirky.</description>
    </item>
    <item>
      <title>Secure (TLS) gRPC services with VKE</title>
      <link>https://pretired.dazwilkin.com/posts/220603/</link>
      <pubDate>Fri, 03 Jun 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220603/</guid>
      <description>NOTE cert-manager is a better solution to what follows.&#xA;I&amp;rsquo;ve a need to deploy a Vultr Kubernetes Engine (VKE) cluster on a daily basis (create and delete within a few hours) and expose (securely|TLS) a gRPC service.&#xA;I have an existing solution Automatic Certs w/ Golang gRPC service on Compute Engine that combines a gRPC Healthchecking and an ACME service and decided to reuse this.&#xA;In order for it work, we need:</description>
    </item>
    <item>
      <title>Vultr CLI and JSON output</title>
      <link>https://pretired.dazwilkin.com/posts/220602/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220602/</guid>
      <description>I&amp;rsquo;ve begun exploring Vultr after the company announced a managed Kubernetes offering Vultr Kubernetes Engine (VKE).&#xA;In my brief experience, it&amp;rsquo;s a decent platform and its CLI vultr-cli is mostly (!) good. The CLI has a limitation in that command output is text formatted and this makes it challenging to parse the output when scripting.&#xA;NOTE The Vultr developers have a branch rewrite that includes a solution to this problem.</description>
    </item>
    <item>
      <title>Prometheus VPA Recommendations</title>
      <link>https://pretired.dazwilkin.com/posts/210305/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210305/</guid>
      <description>Phew!&#xA;For Want of a Nail&#xA;I was interested in learning how to Manage Resources for Containers. On the way, I learned and discovered:&#xA;kubectl top Vertical Pod Autoscaler A (valuable) digression through PodMonitor kube-state-metrics `kubectl-patch Created a Graph References Kubernetes Resources Visual Studio Code has begun to bug me (reasonably) to add resources to Kubernetes manifests.&#xA;E.g.:&#xA;resources: limits: cpu: &amp;#34;1&amp;#34; memory: &amp;#34;512Mi&amp;#34; I&amp;rsquo;ve been spending time with Deislab&amp;rsquo;s Akri and decided to determine whether Akri&amp;rsquo;s primary resources (Agent, Controller) and some of my creations HTTP Device and Discovery, were being suitably constrained.</description>
    </item>
    <item>
      <title>Krustlet on DO Managed Kubernetes</title>
      <link>https://pretired.dazwilkin.com/posts/210122/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210122/</guid>
      <description>I&amp;rsquo;ve spent time this week returning to the interesting Deislabs project Krustlet. Since the last time, the bootstrapping process has been simplified using Kubernetes Bootstrap Tokens. I know this updated process works with MicroK8s. Unfortunately, I&amp;rsquo;m struggling with it on GKE and thought I&amp;rsquo;d try DigitalOcean Managed Kubernetes.&#xA;It worked first time!&#xA;In the following, we run both the Kubernetes cluster and the Krustlet Droplet on DigitalOcean but, as long as the cluster and the VM are able to communicate with one another, you should be able to run these anywhere.</description>
    </item>
    <item>
      <title>Kubernetes cert-manager</title>
      <link>https://pretired.dazwilkin.com/posts/210108/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210108/</guid>
      <description>I developed an admission webhook for Akri, twice (Golang, Rust). I naively followed other examples for the generation of the certificates, created a 1.20 cluster and broke that process.&#xA;I&amp;rsquo;d briefly considered using cert-manager recently but quickly abandoned the idea thinking it would be onerous and unnecessary complexity for little-old-me. I was wrong. It&amp;rsquo;s excellent and I recommend it highly.&#xA;I won&amp;rsquo;t reproduce the v1beta1 and v1 examples from the Stackoverflow question as they should be self-explanatory.</description>
    </item>
    <item>
      <title>Kubernetes Webhooks</title>
      <link>https://pretired.dazwilkin.com/posts/201229/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201229/</guid>
      <description>I spent some time last week writing my first admission webhook for Kubernetes. I wrote the handler in Golang because I&amp;rsquo;m most familiar with Golang and because, as Kubernetes&amp;rsquo; native language, I was more confident that the necessary SDKs would exist and that the documentation would likely use Golang by default. I struggled to find useful documentation and so this post is to help you (and me!) remember how to do this next time!</description>
    </item>
    <item>
      <title>Kubernetes Device Plugins</title>
      <link>https://pretired.dazwilkin.com/posts/201217/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201217/</guid>
      <description>I&amp;rsquo;m debugging an issue with Akri Zeroconf protocol in which Instance environment variables are no longer (!) being surfaced within the Broker pods. In my adventures, it seemed useful to better understand how Akri works and specifically, how Akri uses Kubernetes Device Plugins.&#xA;IIUC plugins register with the Kubelet (!) via a gRPC service (Registration) that the Kubelet exposes on a UNIX socket at /var/lib/kubelet/device-plugins/kubelet.sock&#xA;Then (!) if successful, devices should be reported by the Node&amp;rsquo;s metadata (spec) and available to be bound to Pods.</description>
    </item>
    <item>
      <title>Akri</title>
      <link>https://pretired.dazwilkin.com/posts/201113/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201113/</guid>
      <description>For the past couple of weeks, I&amp;rsquo;ve been playing around with Akri, a Microsoft (DeisLabs) project for building a connected edge with Kubernetes. Kubernetes, IoT, Rust (and Golang) make this all compelling to me.&#xA;Initially, I deployed an Akri End-to-End to MicroK8s on Google Compute Engine (link) and Digital Ocean (link). But I was interested to create me own example and so have proposed a very (!) simple HTTP-based protocol.</description>
    </item>
    <item>
      <title>akri</title>
      <link>https://pretired.dazwilkin.com/posts/201022/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/201022/</guid>
      <description>I was very interested to read about Microsoft&amp;rsquo;s DeisLab&amp;rsquo;s latest (rust-based) Kubernetes project: akri. If I understand it correctly, it provides a mechanism to make any (IoT) device accessible to containers running within a cluster. I need to spend more time playing around with it so that I can fully understand it. I had some problems getting the End-to-End demo running on Google Compute Engine (and then I tried DigitalOcean droplet) instances.</description>
    </item>
    <item>
      <title>Accessing GCR repos from Kubernetes</title>
      <link>https://pretired.dazwilkin.com/posts/200207/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200207/</guid>
      <description>Until today, I&amp;rsquo;d not accessed a Google Container Registry repo from a non-GKE Kubernetes deployment.&#xA;It turns out that it&amp;rsquo;s pretty well-documented (link) but, here&amp;rsquo;s an end-end example.&#xA;Assuming:&#xA;BILLING=[[YOUR-BILLING]] PROJECT=[[YOUR-PROJECT]] SERVER=&amp;#34;us.gcr.io&amp;#34; If not already:&#xA;gcloud projects create {$PROJECT} gcloud beta billing projects link ${PROJECT} \ --billing-account=${BILLING} gcloud services enable containerregistry.googleapis.com \ --project=${PROJECT} Container Registry IMAGE=&amp;#34;busybox&amp;#34; # Or ... docker pull ${IMAGE} docker tag \ ${IMAGE} \ ${SERVER}/${PROJECT}/${IMAGE} docker push ${SERVER}/${PROJECT}/${IMAGE} gcloud container images list-tags ${SERVER}/${PROJECT}/${IMAGE} Service Account Create a service account that&amp;rsquo;s permitted to download (read-only) images from this project&amp;rsquo;s registry</description>
    </item>
    <item>
      <title>NGINX Ingress</title>
      <link>https://pretired.dazwilkin.com/posts/191211/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/191211/</guid>
      <description>I&amp;rsquo;ve written a couple of deployment options (Google Compute Engine; Kubernetes) for an open-source project. The Kubernetes deployment provides NodePort and (TCP) LoadBalancer options and I&amp;rsquo;ve been trying (unsuccessfully) to add HTTPS Load-balancing.&#xA;I should (!) try to deploy to Google Kubernetes Engine (GKE) but I&amp;rsquo;ve been using microk8s, Digital Ocean Managed Kubernetes and the Linode LKE Beta. Each of these requires an implementation of Ingress controller. For GKE, GCP&amp;rsquo;s HTTP/S Load-balancer (GCLB) is used.</description>
    </item>
    <item>
      <title>Kubernetes Engine and Free Tier</title>
      <link>https://pretired.dazwilkin.com/posts/190924/</link>
      <pubDate>Tue, 24 Sep 2019 09:40:14 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/190924/</guid>
      <description>Google Cloud Platform Free Tier appears (please verify this for yourself) to provide the ability to run a(n admittedly miniscule) Kubernetes cluster for free. So, why do this? It provides a definitive Kubernetes (Engine) experience on Google Cloud Platform that you may use for learning and testing.&#xA;Kubernetes Engine the master node(s) and the control plane are free.&#xA;Kubernetes (i.e. Compute Engine) nodes potentially incur charges including for the VM runtime and any attached storage, snapshots etc.</description>
    </item>
  </channel>
</rss>
