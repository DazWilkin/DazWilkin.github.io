<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/go/</link>
    <description>Recent content in Go on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 12:45:00 -0700</lastBuildDate>
    
	<atom:link href="https://pretired.dazwilkin.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Functions Simple(st) HTTP Multi-host Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190918/</link>
      <pubDate>Wed, 18 Sep 2019 12:45:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/190918/</guid>
      <description>Tweaked yesterday&amp;rsquo;s solution so that it will randomly select one from several hosts with which it&amp;rsquo;s configured.
package proxy import ( &amp;quot;log&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;time&amp;quot; ) func robin() { hostsList := os.Getenv(&amp;quot;PROXY_HOST&amp;quot;) if hostsList == &amp;quot;&amp;quot; { log.Fatal(&amp;quot;&#39;PROXY_HOST&#39; environment variable should contain comma-separated list of hosts&amp;quot;) } // Comma-separated lists of hosts hosts := strings.Split(hostsList, &amp;quot;,&amp;quot;) urls := make([]*url.URL, len(hosts)) for i, host := range hosts { var origin = Endpoint{ Host: host, Port: os.</description>
    </item>
    
    <item>
      <title>Cloud Functions Simple(st) HTTP Proxy</title>
      <link>https://pretired.dazwilkin.com/posts/190917/</link>
      <pubDate>Tue, 17 Sep 2019 12:41:02 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/190917/</guid>
      <description>I&amp;rsquo;m investigating the use of LetsEncrypt for gRPC services. I found this straightforward post by Scott Devoid and am going to try this approach.
Before I can do that, I need to be able to publish services (make them Internet-accessible) and would like to try to continue to use GCP for free.
Some time ago, I wrote about using the excellent Microk8s on GCP. Using an f1-micro, I&amp;rsquo;m hoping (!</description>
    </item>
    
    <item>
      <title>pypi-transparency</title>
      <link>https://pretired.dazwilkin.com/posts/190907/</link>
      <pubDate>Sat, 07 Sep 2019 13:07:44 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/190907/</guid>
      <description>The goal of pypi-transparency is very similar to the underlying motivation for the Golang team&amp;rsquo;s Checksum Database (also built with Trillian).
Even though, PyPi provides hashes of the content of packages it hosts, the developer must trust that PyPi&amp;rsquo;s data is consistent. One ambition with pypi-transparency is to provide a companion, tamperproof log of PyPi package files in order to provide a double-check of these hashes.
It is important to understand what this does (and does not) provide.</description>
    </item>
    
  </channel>
</rss>