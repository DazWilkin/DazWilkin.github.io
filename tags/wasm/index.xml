<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wasm on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/wasm/</link>
    <description>Recent content in Wasm on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Aug 2020 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/wasm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minimizing WASM binaries</title>
      <link>https://pretired.dazwilkin.com/posts/200819/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200819/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve spent time recently playing around with WebAssembly (WASM) and &lt;a href=&#34;https://github.com/wapc&#34;&gt;waPC&lt;/a&gt;. Rust and WASM were born at Mozilla and there&amp;rsquo;s a natural affinity with writing WASM binaries in Rust. In the WASM examples I&amp;rsquo;ve been using for &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200817/&#34;&gt;WASM Transparency&lt;/a&gt;, &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200807/&#34;&gt;waPC and MsgPack&lt;/a&gt; and &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC and Protobufs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve created 3 WASM binaries: &lt;code&gt;complex.wasm&lt;/code&gt;, &lt;code&gt;simplex.wasm&lt;/code&gt; and &lt;code&gt;fabcar.wasm&lt;/code&gt; and each is about 2.5MB when:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo build --target&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;wasm32-unknown-unknown --release&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://rustwasm.github.io/docs/book&#34;&gt;Rust and WebAssembly&lt;/a&gt; book has an excellent section titled &lt;a href=&#34;https://rustwasm.github.io/docs/book/reference/code-size.html&#34;&gt;Shrinking &lt;code&gt;.wasm.&lt;/code&gt; Code Size&lt;/a&gt;. So, let&amp;rsquo;s see what help that provides.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/200817/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200817/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been playing around with a proof-of-concept combining WASM and &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;. The hypothesis was to explore using WASM as a form of chaincode with Trillian. The project works but it&amp;rsquo;s far from being a chaincode-like solution.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s start with a couple of (trivial) examples and then I&amp;rsquo;ll explain what&amp;rsquo;s going on and how it&amp;rsquo;s implemented.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Method: mul&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [random:New] Float32&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [Client:Invoke] Metadata: complex.wasm&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2020/08/14 18:42:17 [main:loop:dynamic-invoke] Success: result:{real:0.036980484 imag:0.3898267}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After shipping a Rust-sourced WASM solution (&lt;code&gt;complex.wasm&lt;/code&gt;) to the WASM transparency server, the client invokes a method &lt;code&gt;mul&lt;/code&gt; that&amp;rsquo;s exposed by it using a dynamically generated request message and outputs the response. Woo hoo! Yes, an expensive way to multiple complex numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>waPC and MsgPack (Rust|Golang)</title>
      <link>https://pretired.dazwilkin.com/posts/200807/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200807/</guid>
      <description>&lt;p&gt;As my reader will know (Hey Mom!), I&amp;rsquo;ve been noodling around with WASM and &lt;a href=&#34;https://github.com/wapc&#34;&gt;waPC&lt;/a&gt;. I&amp;rsquo;ve been exploring ways to pass structured messages across the host:guest boundary.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;Protobufs&lt;/a&gt; was my first choice. &lt;a href=&#34;https://medium.com/@KevinHoffman&#34;&gt;@KevinHoffman&lt;/a&gt; created waPC and &lt;a href=&#34;https://github.com/wascc&#34;&gt;waSCC&lt;/a&gt; and he &lt;a href=&#34;https://medium.com/@KevinHoffman/interface-types-are-basically-a-way-of-embedding-metadata-into-a-wasm-file-so-that-arbitrary-data-14965ebdfa48&#34;&gt;explained&lt;/a&gt; to me and that wSCC uses &lt;a href=&#34;https://msgpack.org/&#34;&gt;Message Pack&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s slightly surprising to me (still) that technologies like this exist with &lt;strong&gt;everyone&lt;/strong&gt; else seemingly using them and I&amp;rsquo;ve not heard of them. I don&amp;rsquo;t expect to know everything but I&amp;rsquo;m surprised I&amp;rsquo;ve not stumbled upon msgpack until now.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Envoy WASM filters in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/200723/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200723/</guid>
      <description>&lt;p&gt;A digression thanks to &lt;a href=&#34;https://blog.salrashid.me/&#34;&gt;Sal Rashid&lt;/a&gt; who&amp;rsquo;s exploring WASM filters w/ Envoy.&lt;/p&gt;&#xA;&lt;p&gt;The documentation is sparse but:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://banzaicloud.com/blog/envoy-wasm-filter/&#34;&gt;How to write WASM filters for Envoy&amp;hellip;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There is a Rust SDK but it&amp;rsquo;s not documented:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/proxy-wasm/proxy-wasm-rust-sdk&#34;&gt;proxy-wasm-rust-sdk&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I found two useful posts by Rustaceans who were able to make use of it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://antweiss.com/blog/extending-envoy-with-wasm-and-rust/&#34;&gt;Extending Envoy with WASM and Rust&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.red-badger.com/extending-istio-with-rust-and-webassembly&#34;&gt;Extending Istio with Rust and WebAssembly&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s my simple use of the SDK&amp;rsquo;s examples.&lt;/p&gt;&#xA;&lt;h2 id=&#34;wasme&#34;&gt;wasme&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -sL https://run.solo.io/wasme/install | sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PATH&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/.wasme/bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wasme --version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It may be possible to avoid creating an account on WebAssemblyHub if you&amp;rsquo;re staying local.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remotely invoking WASM functions using gRPC and waPC</title>
      <link>https://pretired.dazwilkin.com/posts/200717/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200717/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt;, I can now remotely invoke (arbitrary) WASM functions:&lt;/p&gt;&#xA;&lt;p&gt;Client:&lt;/p&gt;&#xA;&lt;p&gt;The logging isn&amp;rsquo;t perfectly clear but, the client gets (a previously added) WASM binary from the server (using the SHA-256 of the WASM binary as a unique identifier). The result includes metadata that includes a protobuf descriptor of the WASM binary&amp;rsquo;s functions. The descriptor defines gRPC services (that represent the WASM functions) with input (parameters) and output (results) messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Cloud Functions</title>
      <link>https://pretired.dazwilkin.com/posts/200617/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200617/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt; and a question on Stack Overflow about Cloud Functions, I was compelled to try running WASM on Cloud Functions no JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to reuse the WASM waPC functions that I&amp;rsquo;d written in Rust as described in the other post. Cloud Functions does not (yet!?) provide a Rust runtime and so I&amp;rsquo;m using the &lt;a href=&#34;https://github.com/wapc/wapc-go&#34;&gt;waPC Host for Go&lt;/a&gt; in this example.&lt;/p&gt;&#xA;&lt;p&gt;It works!&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;a&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3},&amp;#34;b&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3}}&amp;#39;&lt;/span&gt; | base64&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;gcloud auth print-identity-token&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;filename\&amp;#34;:\&amp;#34;complex.wasm\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;function\&amp;#34;:\&amp;#34;c:mul\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;params\&amp;#34;:\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PARAMS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--silent &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--data @- &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.cloudfunctions.net/invoker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yields (correctly):&lt;/p&gt;</description>
    </item>
    <item>
      <title>waPC &amp; Protobufs</title>
      <link>https://pretired.dazwilkin.com/posts/200612/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200612/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m hacking around with a solution that combines WASM and Google &lt;a href=&#34;https://github.com/google/trillian&#34;&gt;Trillian&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Ultimately, I&amp;rsquo;d like to be able to ship WASM (binaries) to a Trillian personality and then invoke (exported) functions on them. Some this was borne from the interesting exploration of &lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;Krustlet&lt;/a&gt; and its application of &lt;a href=&#34;https://wascc.dev/&#34;&gt;wascc&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m still booting into WASM but it&amp;rsquo;s a &lt;em&gt;very&lt;/em&gt; interesting technology that has most interesting potential outside the browser. Some folks have been trailblazing the technology and I have been reading Kevin Hoffman&amp;rsquo;s &lt;a href=&#34;https://medium.com/@KevinHoffman&#34;&gt;medium&lt;/a&gt; and &lt;a href=&#34;https://wascc.dev/&#34;&gt;wascc&lt;/a&gt; (nee waxosuit) work. From this, I stumbled upon Kevin&amp;rsquo;s &lt;a href=&#34;https://medium.com/@KevinHoffman/introducing-wapc-dc9d8b0c2223&#34;&gt;waPC&lt;/a&gt; and I&amp;rsquo;m using waPC in this prototyping as a way to exchange data between clients and servers running WASM binaries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Container Registry w/ OCI</title>
      <link>https://pretired.dazwilkin.com/posts/200508/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200508/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been spending some time this week with &lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;Krustlet&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m working on documenting how to run Krustlet(s) alongside &lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;GKE&lt;/a&gt;. I&amp;rsquo;ve been running a Krustlet with &lt;a href=&#34;https://microk8s.io&#34;&gt;MicroK8s&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The Krustlet demos reference WASM assemblines stored in Azure Container Registry as OCI containers. &lt;a href=&#34;https://cloud.google.com/container-registry&#34;&gt;Google Container Registry&lt;/a&gt; supports &lt;a href=&#34;https://cloud.google.com/container-registry/docs/image-formats#oci_format&#34;&gt;OCI format&lt;/a&gt; and so I tried (successfully) using GCR instead of AZR.&lt;/p&gt;&#xA;&lt;p&gt;There may be an easier approach but this is how I got this working.&lt;/p&gt;&#xA;&lt;p&gt;Krustlet uses &lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;&lt;code&gt;wasm-to-oci&lt;/code&gt;&lt;/a&gt;. I was challenged by &lt;code&gt;wasm-to-oci&lt;/code&gt; authentication. &lt;code&gt;wasm-to-oci&lt;/code&gt; uses &lt;a href=&#34;https://github.com/deislabs/oras&#34;&gt;&lt;code&gt;ORAS&lt;/code&gt;&lt;/a&gt;. It turns out that, after authenticating using ORAS, I&amp;rsquo;m able to use &lt;code&gt;wasm-to-oci&lt;/code&gt; to authenticate to a GCR registry!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
