<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wasm on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/wasm/</link>
    <description>Recent content in wasm on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Aug 2020 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://pretired.dazwilkin.com/tags/wasm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>WASM Transparency</title>
      <link>https://pretired.dazwilkin.com/posts/200817/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200817/</guid>
      <description>I&amp;rsquo;ve been playing around with a proof-of-concept combining WASM and Trillian. The hypothesis was to explore using WASM as a form of chaincode with Trillian. The project works but it&amp;rsquo;s far from being a chaincode-like solution.
Let&amp;rsquo;s start with a couple of (trivial) examples and then I&amp;rsquo;ll explain what&amp;rsquo;s going on and how it&amp;rsquo;s implemented.
2020/08/14 18:42:17 [main:loop:dynamic-invoke] Method: mul 2020/08/14 18:42:17 [random:New] Message 2020/08/14 18:42:17 [random:New] Float32 2020/08/14 18:42:17 [random:New] Float32 2020/08/14 18:42:17 [random:New] Message 2020/08/14 18:42:17 [random:New] Float32 2020/08/14 18:42:17 [random:New] Float32 2020/08/14 18:42:17 [Client:Invoke] Metadata: complex.</description>
    </item>
    
    <item>
      <title>waPC and MsgPack (Rust|Golang)</title>
      <link>https://pretired.dazwilkin.com/posts/200807/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200807/</guid>
      <description>As my reader will know (Hey Mom!), I&amp;rsquo;ve been noodling around with WASM and waPC. I&amp;rsquo;ve been exploring ways to pass structured messages across the host:guest boundary.
Protobufs was my first choice. @KevinHoffman created waPC and waSCC and he explained to me and that wSCC uses Message Pack.
It&amp;rsquo;s slightly surprising to me (still) that technologies like this exist with everyone else seemingly using them and I&amp;rsquo;ve not heard of them.</description>
    </item>
    
    <item>
      <title>Envoy WASM filters in Rust</title>
      <link>https://pretired.dazwilkin.com/posts/200723/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200723/</guid>
      <description>A digression thanks to Sal Rashid who&amp;rsquo;s exploring WASM filters w/ Envoy.
The documentation is sparse but:
 How to write WASM filters for Envoy&amp;hellip;  There is a Rust SDK but it&amp;rsquo;s not documented:
 proxy-wasm-rust-sdk  I found two useful posts by Rustaceans who were able to make use of it:
 Extending Envoy with WASM and Rust Extending Istio with Rust and WebAssembly  Here&amp;rsquo;s my simple use of the SDK&amp;rsquo;s examples.</description>
    </item>
    
    <item>
      <title>Remotely invoking WASM functions using gRPC and waPC</title>
      <link>https://pretired.dazwilkin.com/posts/200717/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200717/</guid>
      <description>Following on from waPC &amp;amp; Protobufs, I can now remotely invoke (arbitrary) WASM functions:
Client:
The logging isn&amp;rsquo;t perfectly clear but, the client gets (a previously added) WASM binary from the server (using the SHA-256 of the WASM binary as a unique identifier). The result includes metadata that includes a protobuf descriptor of the WASM binary&amp;rsquo;s functions. The descriptor defines gRPC services (that represent the WASM functions) with input (parameters) and output (results) messages.</description>
    </item>
    
    <item>
      <title>WASM Cloud Functions</title>
      <link>https://pretired.dazwilkin.com/posts/200617/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200617/</guid>
      <description>Following on from waPC &amp;amp; Protobufs and a question on Stack Overflow about Cloud Functions, I was compelled to try running WASM on Cloud Functions no JavaScript.
I wanted to reuse the WASM waPC functions that I&amp;rsquo;d written in Rust as described in the other post. Cloud Functions does not (yet!?) provide a Rust runtime and so I&amp;rsquo;m using the waPC Host for Go in this example.
It works!
PARAMS=$(printf &amp;#39;{&amp;#34;a&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3},&amp;#34;b&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3}}&amp;#39; | base64) TOKEN=$(gcloud auth print-identity-token) echo &amp;#34;{ \&amp;#34;filename\&amp;#34;:\&amp;#34;complex.</description>
    </item>
    
    <item>
      <title>waPC &amp; Protobufs</title>
      <link>https://pretired.dazwilkin.com/posts/200612/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200612/</guid>
      <description>I&amp;rsquo;m hacking around with a solution that combines WASM and Google Trillian.
Ultimately, I&amp;rsquo;d like to be able to ship WASM (binaries) to a Trillian personality and then invoke (exported) functions on them. Some this was borne from the interesting exploration of Krustlet and its application of wascc.
I&amp;rsquo;m still booting into WASM but it&amp;rsquo;s a very interesting technology that has most interesting potential outside the browser. Some folks have been trailblazing the technology and I have been reading Kevin Hoffman&amp;rsquo;s medium and wascc (nee waxosuit) work.</description>
    </item>
    
    <item>
      <title>Google Container Registry w/ OCI</title>
      <link>https://pretired.dazwilkin.com/posts/200508/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/200508/</guid>
      <description>I&amp;rsquo;ve been spending some time this week with Krustlet.
I&amp;rsquo;m working on documenting how to run Krustlet(s) alongside GKE. I&amp;rsquo;ve been running a Krustlet with MicroK8s.
The Krustlet demos reference WASM assemblines stored in Azure Container Registry as OCI containers. Google Container Registry supports OCI format and so I tried (successfully) using GCR instead of AZR.
There may be an easier approach but this is how I got this working.</description>
    </item>
    
  </channel>
</rss>