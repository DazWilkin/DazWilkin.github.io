<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud-Run on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/cloud-run/</link>
    <description>Recent content in Cloud-Run on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 May 2022 00:00:00 -0700</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/cloud-run/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cloud Run custom domain mappings</title>
      <link>https://pretired.dazwilkin.com/posts/220506/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220506/</guid>
      <description>I have several Cloud Run services that I want to map to a domain.&#xA;During development, I create a Google Cloud Platform (GCP) project each day into which everything is deployed. This means that, every day, the Cloud Run services have newly non-inferable (to me) URLs. I thought this would be tedious to manage because:&#xA;My DNS service isn&amp;rsquo;t programmable (I know!) Cloud Run services have non-inferable (by me) URLs i.</description>
    </item>
    <item>
      <title>Prometheus HTTP Service Discovery of Cloud Run services</title>
      <link>https://pretired.dazwilkin.com/posts/220225/</link>
      <pubDate>Fri, 25 Feb 2022 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220225/</guid>
      <description>Some time ago, I wrote about using Prometheus Service Discovery w/ Consul for Cloud Run and also Scraping metrics exposed by Google Cloud Run services that require authentication. Both solutions remain viable but they didn&amp;rsquo;t address another use case for Prometheus and Cloud Run services that I have with a &amp;ldquo;thing&amp;rdquo; that I&amp;rsquo;ve been building.&#xA;In this scenario, I want to:&#xA;Configure Prometheus to scrape Cloud Run service metrics Discover Cloud Run services dynamically Authenticate to Cloud Run using Firebase Auth ID tokens These requirements and &amp;ndash; one other &amp;ndash; present several challenges:</description>
    </item>
    <item>
      <title>Firebase Auth authorized domains</title>
      <link>https://pretired.dazwilkin.com/posts/211026/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211026/</guid>
      <description>I&amp;rsquo;m using Firebase Authentication in a project to authenticate users of various OAuth2 identity systems. Firebase Authentication requires a set of Authorized Domains.&#xA;The (web) app that interacts with Firebase Authentication is deployed to Cloud Run. The Authorized Domains list must include the app&amp;rsquo;s Cloud Run service URL.&#xA;Cloud Run service URLs vary by Project (ID). They are a combination of the service name, a hash (?) of the Project (ID) and .</description>
    </item>
    <item>
      <title>Scraping metrics exposed by Google Cloud Run services that require authentication</title>
      <link>https://pretired.dazwilkin.com/posts/211005/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/211005/</guid>
      <description>I&amp;rsquo;ve written a solution (gcp-oidc-token-proxy) that can be used in conjunction with Prometheus OAuth2 to authenticate requests so that Prometheus can scrape metrics exposed by e.g. Cloud Run services that require authentication. The solution resulted from my question on Stack overflow.&#xA;Problem #1: Endpoint requires authentication&#xA;Given a Cloud Run service URL for which:&#xA;ENDPOINT=&amp;#34;my-server-blahblah-wl.a.run.app&amp;#34; # Returns 200 when authentication w/ an ID token TOKEN=&amp;#34;$(gcloud auth print-identity-token)&amp;#34; curl \ --silent \ --request GET \ --header &amp;#34;Authorization: Bearer ${TOKEN}&amp;#34; \ --write-out &amp;#34;%{response_code}&amp;#34; \ --output /dev/null \ https://${ENDPOINT}/metrics # Returns 403 otherwise curl \ --silent \ --request GET \ --write-out &amp;#34;%{response_code}&amp;#34; \ --output /dev/null \ https://${ENDPOINT}/metrics Problem #2: Prometheus OAuth2 configuration is constrained</description>
    </item>
    <item>
      <title>`gcloud beta run services replace`</title>
      <link>https://pretired.dazwilkin.com/posts/210907/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210907/</guid>
      <description>TL;DR I&amp;rsquo;m working on a project that includes multiple Cloud Run services. I&amp;rsquo;ve been putting my gcloud head on to deploy these services thinking that it&amp;rsquo;s curious there&amp;rsquo;s no way to write the specs as YAML configs. Today, I learned that there is: gcloud beta run services replace.&#xA;What prompted the discovery was some frustration trying to deploy a JSON-valued environment variable to Cloud Run:&#xA;local FIREBASE_CONFIG=&amp;#34;{ apiKey: ${FIREBASE_API_KEY}, authDomain: ${FIREBASE_AUTH_DOMAIN}, projectId: ${FIREBASE_PROJECT}, storageBucket: ${FIREBASE_STORAGE_BUCKET}, messagingSenderId: ${FIREBASE_MESSAGING_SENDER}, appId: ${FIREBASE_APP}}&amp;#34; gcloud run deploy ${SRV_NAME} \ --image=${IMAGE} \ --command=&amp;#34;/server&amp;#34; \ --args=&amp;#34;--endpoint=:${PORT}&amp;#34; \ --set-env-vars=FIREBASE_CONFIG=&amp;#34;${FIREBASE_CONFIG}&amp;#34; \ --max-instances=1 \ --memory=256Mi \ --ingress=all \ --platform=managed \ --port=${PORT} \ --allow-unauthenticated \ --region=${REGION} \ --project=${PROJECT} gcloud balks at this.</description>
    </item>
    <item>
      <title>Cloud Endpoints combine OpenAPI and gRPC... or not!</title>
      <link>https://pretired.dazwilkin.com/posts/210608/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210608/</guid>
      <description>See:&#xA;Multiplexing gRPC and HTTP endpoints with Cloud Run gRPC, Cloud Run &amp;amp; Endpoints ESPv2: Configure Cloud Endpoints to proxy traffic to a Cloud Run multiplexed (gRPC|HTTP) service Challenges:&#xA;Cloud Run permits single port Cloud Run services publishing e.g. gRPC and Prometheus, must multiplex transports Cloud Run services publishing multiplexed transports are challenging to expose using Cloud Endpoints Hypothesis #1: Multiplexed transports work with Cloud Run See: Multiplexing gRPC and HTTP endpoints with Cloud Run</description>
    </item>
    <item>
      <title>Consul discovers Google Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210520/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210520/</guid>
      <description>I&amp;rsquo;ve written a basic discoverer of Google Cloud Run services. This is for a project and it extends work done in some previous posts to Multiplex gRPC and Prometheus with Cloud Run and to use Consul for Prometheus service discovery.&#xA;This solution:&#xA;Accepts a set of Google Cloud Platform (GCP) projects Trawls them for Cloud Run services Assumes that the services expose Prometheus metrics on :443/metrics Relabels the services Surfaces any discovered Cloud Run services&amp;rsquo; metrics in Prometheus You&amp;rsquo;ll need Docker and Docker Compose.</description>
    </item>
    <item>
      <title>Multiplexing gRPC and HTTP (Prometheus) endpoints with Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210519/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210519/</guid>
      <description>Google Cloud Run is useful but, each service is limited to exposing a single port. This caused me problems with a gRPC service that serves (non-gRPC) Prometheus metrics because customarily, you would serve gRPC on one port and the Prometheus metrics on another.&#xA;Fortunately, cmux provides a solution by providing a mechanism that multiplexes both services (gRPC and HTTP) on a single port!&#xA;TL;DR See the cmux Limitations and use:</description>
    </item>
    <item>
      <title>Prometheus Service Discovery w/ Consul for Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/210419/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:09 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210419/</guid>
      <description>I&amp;rsquo;m working on a project that will programmatically create Google Cloud Run services and I want to be able to dynamically discover these services using Prometheus.&#xA;This is one solution.&#xA;NOTE Google Cloud Run is the service I&amp;rsquo;m using, but the principle described herein applies to any runtime service that you&amp;rsquo;d wish to use.&#xA;Why is this challenging? IIUC, it&amp;rsquo;s primarily because Prometheus has a limited set of plugins for service discovery, see the sections that include _sd_ in Prometheus Configuration documentation.</description>
    </item>
    <item>
      <title>Programmatically deploying Cloud Run services (Golang|Python)</title>
      <link>https://pretired.dazwilkin.com/posts/210316/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210316/</guid>
      <description>Phew! Programmitcally deploying Cloud Run services should be easy but it didn&amp;rsquo;t find it so.&#xA;My issues were that the Cloud Run Admin (!) API is poorly documented and it uses non-standard endpoints (thanks Sal!). Here, for others who may struggle with this, is how I got this to work.&#xA;Goal Programmatically (have Golang, Python, want Rust) deploy services to Cloud Run.&#xA;i.e. achieve this:&#xA;gcloud run deploy ${NAME} \ --image=${IMAGE} \ --platform=managed \ --no-allow-unauthenticated \ --region=${REGION} \ --project=${PROJECT} TRICK --log-http is your friend</description>
    </item>
    <item>
      <title>Google Trillian on Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200326/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200326/</guid>
      <description>I&amp;rsquo;ve written previously (Google Trillian for Noobs) about Google&amp;rsquo;s interesting project Trillian and about some of the &amp;ldquo;personalities&amp;rdquo; (e.g. PyPi Transparency) that I&amp;rsquo;ve build using it.&#xA;Having gone slight cra-cra on Cloud Run and gRPC this week with Golang gRPC Cloud Run and gRPC, Cloud Run &amp;amp; Endpoints, I thought it&amp;rsquo;d be fun to deploy Trillian and a personality to Cloud Run.&#xA;It mostly (!) works :-)&#xA;At the end of the post, I&amp;rsquo;ve summarized creating a Cloud SQL instance to host the Trillian data(base).</description>
    </item>
    <item>
      <title>gRPC, Cloud Run &amp; Endpoints</title>
      <link>https://pretired.dazwilkin.com/posts/200325/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200325/</guid>
      <description>&amp;lt;3 Google but there&amp;rsquo;s quite often an assumption that we&amp;rsquo;re all sitting around the engineering table and, of course, we&amp;rsquo;re not.&#xA;Cloud Endpoints is a powerful offering but &amp;ndash; IMO &amp;ndash; it&amp;rsquo;s super confusing to understand and complex to deploy.&#xA;If you&amp;rsquo;re familiar with the motivations behind service meshes (e.g. Istio), Cloud Endpoints fits in a similar niche (&amp;ldquo;neesh&amp;rdquo; or &amp;ldquo;nitch&amp;rdquo;?). The underlying ambition is that, developers can take existing code and by adding a proxy (or sidecar), general-purpose abstractions, security, logging etc.</description>
    </item>
    <item>
      <title>Golang gRPC Cloud Run</title>
      <link>https://pretired.dazwilkin.com/posts/200320/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200320/</guid>
      <description>Update: 2020-03-24: Since writing this post, I&amp;rsquo;ve contributed Golang and Rust samples to Google&amp;rsquo;s project. I recommend you start there.&#xA;Google explained how to run gRPC servers with Cloud Run. The examples are good but only Python and Node.JS:&#xA;gRPC comes to Cloud Run gRPC in Google Cloud Run Missing Golang&amp;hellip;. until now ;-)&#xA;I had problems with 1.14 and so I&amp;rsquo;m using 1.13.&#xA;Project structure I&amp;rsquo;ll tidy up my repo but the code may be found:</description>
    </item>
  </channel>
</rss>
