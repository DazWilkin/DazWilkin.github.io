<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Fit on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/google-fit/</link>
    <description>Recent content in Google Fit on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jan 2020 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/google-fit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Google Fit</title>
      <link>https://pretired.dazwilkin.com/posts/200110/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200110/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve spent a few days exploring [Google Fit SDK] as I try to wean myself from my obsession with metrics (of all forms). A quick Googling got me to Robert&amp;rsquo;s &lt;a href=&#34;https://ithoughthecamewithyou.com/post/export-google-fit-daily-steps-to-a-google-sheet&#34;&gt;Exporter Google Fit Daily Steps, Weight and Distance to a Google Sheet&lt;/a&gt;. This works and is probably where I should have stopped&amp;hellip; avoiding the rabbit hole that I&amp;rsquo;ve been down&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;I threw together a simple Golang implementation of the SDK using &lt;a href=&#34;https://godoc.org/google.golang.org/api/fitness/v1&#34;&gt;Google&amp;rsquo;s Golang API Client Library&lt;/a&gt;. Thanks to Robert&amp;rsquo;s example, I was able to infer some of the complexity this API particularly in its use of data types, data sources and datasets. Having used Stackdriver in my previous life, Google Fit&amp;rsquo;s structure bears more than a passing resemblance to Stackdriver&amp;rsquo;s data model and its use of resource types and metric types.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
