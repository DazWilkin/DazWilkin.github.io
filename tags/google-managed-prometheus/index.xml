<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Managed Prometheus on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/google-managed-prometheus/</link>
    <description>Recent content in Google Managed Prometheus on (p)retired</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jan 2024 00:00:00 -0800</lastBuildDate><atom:link href="https://pretired.dazwilkin.com/tags/google-managed-prometheus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Capturing e.g. CronJob metrics with GMP</title>
      <link>https://pretired.dazwilkin.com/posts/240104/</link>
      <pubDate>Thu, 04 Jan 2024 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/240104/</guid>
      <description>The deployment of Kube State Metrics for Google Managed Prometheus creates both a PodMonitoring and ClusterPodMonitoring.
The PodMonitoring resource exposes metrics published on metric-self port (8081).
The ClusterPodMonitoring exposes metrics published on metric port (8080) but this doesn&amp;rsquo;t include cronjob-related metrics:
kubectl get clusterpodmonitoring/kube-state-metrics \ --output=jsonpath=&amp;#34;{.spec.endpoints[0].metricRelabeling}&amp;#34; \ | jq -r . [ { &amp;#34;action&amp;#34;: &amp;#34;keep&amp;#34;, &amp;#34;regex&amp;#34;: &amp;#34;kube_(daemonset|deployment|replicaset|pod|namespace|node|statefulset|persistentvolume|horizontalpodautoscaler|job_created)(_.+)?&amp;#34;, &amp;#34;sourceLabels&amp;#34;: [ &amp;#34;__name__&amp;#34; ] } ] NOTE The regex does not include kube_cronjob and only includes kube_job_created patterns.</description>
    </item>
    
    <item>
      <title>Robusta KRR w/ GMP</title>
      <link>https://pretired.dazwilkin.com/posts/230427/</link>
      <pubDate>Thu, 27 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230427/</guid>
      <description>I&amp;rsquo;ve been spending time recently optimizing Ackal&amp;rsquo;s use of Google Cloud Logging and Cloud Monitoring in posts:
Filtering metrics w/ Google Managed Prometheus Kubernetes metrics, metrics everywhere Google Metric Diagnostics and Metric Data Ingested Yesterday, I read that Robusta has a new open source project Kubernetes Resource Recommendations (KRR) so I took some time to evaluate it.
This post describes the changes I had to make to get KRR working with Google Managed Prometheus (GMP):</description>
    </item>
    
    <item>
      <title>Google Metric Diagnostics and Metric Data Ingested</title>
      <link>https://pretired.dazwilkin.com/posts/230425/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230425/</guid>
      <description>I&amp;rsquo;ve been on an efficiency drive with Cloud Logging and Cloud Monitoring.
With regards Cloud Logging, I&amp;rsquo;m contemplating (!) eliminating almost all log storage. As it is I&amp;rsquo;ve buzz cut log storage with a _Default sink that has comprehensive sets of NOT LOG_ID(X) inclusion and exclusion filters. As I was doing so, I began to wonder why I need to pay for the storage of much logging. There&amp;rsquo;s the comfort from knowing that everything you may ever need is being logged (at least for 30 days) but there&amp;rsquo;s also the costs that that entails.</description>
    </item>
    
    <item>
      <title>Kubernetes metrics, metrics everywhere</title>
      <link>https://pretired.dazwilkin.com/posts/230419/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230419/</guid>
      <description>I&amp;rsquo;ve been tinkering with ways to &amp;ldquo;unit-test&amp;rdquo; my assumptions when using cloud platforms. I recently wrote about good posts by Google describing achieving cost savings with Cloud Monitoring and Cloud Logging:
How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost With Cloud Monitoring, I&amp;rsquo;ve restricted the prometheus.googleapis.com metrics that are being ingested but realized I wanted to track the number of Pods (and Containers) deployed to a GKE cluster.</description>
    </item>
    
    <item>
      <title>Filtering metrics w/ Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230413/</link>
      <pubDate>Thu, 13 Apr 2023 00:00:00 -0700</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230413/</guid>
      <description>Google has published two, very good blog posts on cost management:
How to identify and reduce costs of your Google Cloud observability in Cloud Monitoring Cloud Logging pricing for Cloud Admins: How to approach it &amp;amp; save cost This post is about my application cost reductions for Cloud Monitoring for Ackal.
I&amp;rsquo;m pleased with Google Cloud Managed Service for Prometheus (hereinafter GMP). I&amp;rsquo;ve a strong preference for letting service providers run components of Ackal that I consider important but non-differentiating.</description>
    </item>
    
    <item>
      <title>Authenticate PromLens to Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230104/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 -0800</pubDate>
      
      <guid>https://pretired.dazwilkin.com/posts/230104/</guid>
      <description>I&amp;rsquo;m using Google Managed Service for Prometheus (GMP) and liking it.
Sometime ago, I tried using PromLens with GMP but GMP&amp;rsquo;s Prometheus HTTP API endpoint requires auth and I&amp;rsquo;ve battled Prometheus&amp;rsquo; somewhat limited auth mechanism before (Scraping metrics exposed by Google Cloud Run services that require authentication).
Listening to PromCon EU 2022 videos, I learned that PromLens has been open sourced and contributed to the Prometheus project. Eventually, the functionality of PromLens should be combined into the Prometheus UI.</description>
    </item>
    
  </channel>
</rss>
