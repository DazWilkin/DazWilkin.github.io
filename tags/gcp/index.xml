<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GCP on (p)retired</title>
    <link>https://pretired.dazwilkin.com/tags/gcp/</link>
    <description>Recent content in GCP on (p)retired</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jan 2023 00:00:00 -0800</lastBuildDate>
    <atom:link href="https://pretired.dazwilkin.com/tags/gcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authenticate PromLens to Google Managed Prometheus</title>
      <link>https://pretired.dazwilkin.com/posts/230104/</link>
      <pubDate>Wed, 04 Jan 2023 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/230104/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://cloud.google.com/stackdriver/docs/managed-prometheus&#34;&gt;Google Managed Service for Prometheus (GMP)&lt;/a&gt; and liking it.&lt;/p&gt;&#xA;&lt;p&gt;Sometime ago, I tried using &lt;a href=&#34;https://promlens.com/&#34;&gt;PromLens&lt;/a&gt; with GMP but GMP&amp;rsquo;s Prometheus HTTP API endpoint requires auth and I&amp;rsquo;ve battled Prometheus&amp;rsquo; somewhat limited auth mechanism before (&lt;a href=&#34;https://pretired.dazwilkin.com/posts/211005/&#34;&gt;Scraping metrics exposed by Google Cloud Run services that require authentication&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Listening to &lt;a href=&#34;https://promcon.io/2022-munich/schedule/&#34;&gt;PromCon EU 2022&lt;/a&gt; videos, I learned that PromLens has been &lt;a href=&#34;https://promlabs.com/blog/2022/10/25/promlabs-and-chronosphere-open-source-the-promlens-query-builder&#34;&gt;open sourced&lt;/a&gt; and contributed to the Prometheus project. Eventually, the functionality of PromLens should be combined into the Prometheus UI.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheus Exporters for fly.io and Vultr</title>
      <link>https://pretired.dazwilkin.com/posts/220520/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220520/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been on a roll building utilities this week. I developed a Service Health dashboard for my &amp;ldquo;thing&amp;rdquo;, a &lt;a href=&#34;https://github.com/DazWilkin/fly-exporter&#34;&gt;Prometheus Exporter for Fly.io&lt;/a&gt; and today, a &lt;a href=&#34;https://github.com/DazWilkin/vultr-exporter&#34;&gt;Prometheus Exporter for Vultr&lt;/a&gt;. This is motivated by the fear that I will forget a deployed Cloud resource and incur a horrible bill.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve no written several Prometheus Exporters for cloud platforms:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/DazWilkin/gcp-exporter&#34;&gt;Prometheus Exporter for GCP&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/DazWilkin/linode-exporter&#34;&gt;Prometheus Exporter for Linode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/DazWilkin/fly-exporter&#34;&gt;Prometheus Exporter for Fly.io&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/DazWilkin/vultr-exporter&#34;&gt;Prometheus Exporter for Vultr&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Each of them monitors resource deployments and produces resource count metrics that can be scraped by Prometheus and alerted with Alertmanager. I have Alertmanager &lt;a href=&#34;https://prometheus.io/docs/alerting/latest/configuration/#pushover_config&#34;&gt;configured&lt;/a&gt; to send notifications to &lt;a href=&#34;https://pushover.net&#34;&gt;Pushover&lt;/a&gt;. Last week I wrote an integration between &lt;a href=&#34;https://pretired.dazwilkin.com/posts/220514/&#34;&gt;Google Cloud Monitoring to send notifications to Pushover&lt;/a&gt; too.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Google Monitoring Alerting to send Pushover notifications</title>
      <link>https://pretired.dazwilkin.com/posts/220514/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220514/</guid>
      <description>&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#artifacts&#34;&gt;Artifacts&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#pushover&#34;&gt;Pushover&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#caveat&#34;&gt;&lt;strong&gt;Caveat&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#cloud-monitoring-webhook&#34;&gt;Cloud Monitoring Webhook&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#cloud-functions-2nd-gen&#34;&gt;Cloud Functions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#cloud-run&#34;&gt;Cloud Run&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;artifacts&#34;&gt;Artifacts&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/DazWilkin/go-gcp-pushover-notificationchannel&#34;&gt;&lt;code&gt;go-gcp-pushover-notificationchannel&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Image: &lt;code&gt;ghcr.io/dazwilkin/go-gcp-pushover-notificationchannel:220515&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;pushover&#34;&gt;Pushover&lt;/h2&gt;&#xA;&lt;p&gt;Logging in to your &lt;a href=&#34;https://pushover.net&#34;&gt;Pushover&lt;/a&gt; account, you will be presented with a summary|dashboard page that includes &lt;code&gt;Your User Key&lt;/code&gt;. Copy the value of this key into a variable called &lt;code&gt;PUSHOVER_USER&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pushover.net/apps/build&#34;&gt;Create New Application|API Token&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://pretired.dazwilkin.com/images/220514.pushover.app.png&#34; alt=&#34;Pushover: New API Token&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Pushover &lt;a href=&#34;https://pushover.net/api&#34;&gt;API&lt;/a&gt; has a &lt;a href=&#34;https://pushover.net/api#messages&#34;&gt;Pushing Messages&lt;/a&gt; method. The documentation describes the format of the HTTP Request. It must be a &lt;code&gt;POST&lt;/code&gt; using TLS (&lt;code&gt;https://&lt;/code&gt;) to &lt;code&gt;https://api.pushover.net/1/messages.json&lt;/code&gt;. The &lt;code&gt;content-type&lt;/code&gt; should be &lt;code&gt;application/json&lt;/code&gt;. In the JSON body of the message, we must include &lt;code&gt;token&lt;/code&gt; (&lt;code&gt;PUSHOVER_TOKEN&lt;/code&gt;), &lt;code&gt;user&lt;/code&gt; (&lt;code&gt;PUSHOVER_USER_KEY&lt;/code&gt;), &lt;code&gt;device&lt;/code&gt; (we&amp;rsquo;ll use &lt;code&gt;cloud-monitoring&lt;/code&gt;) and a &lt;code&gt;title&lt;/code&gt; and a &lt;code&gt;message&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Run custom domain mappings</title>
      <link>https://pretired.dazwilkin.com/posts/220506/</link>
      <pubDate>Fri, 06 May 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220506/</guid>
      <description>&lt;p&gt;I have several Cloud Run services that I want to map to a domain.&lt;/p&gt;&#xA;&lt;p&gt;During development, I create a Google Cloud Platform (GCP) project each day into which everything is deployed. This means that, every day, the Cloud Run services have newly non-inferable (to me) URLs. I thought this would be tedious to manage because:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;My DNS service isn&amp;rsquo;t programmable (I know!)&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run services have non-inferable (by me) URLs&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;i.e. I thought I&amp;rsquo;d have to manually update the DNS entries each day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automating Scheduled Firestore Exports</title>
      <link>https://pretired.dazwilkin.com/posts/220503/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220503/</guid>
      <description>&lt;p&gt;For my &amp;ldquo;thing&amp;rdquo;, I use &lt;a href=&#34;https://cloud.google.com/firestore&#34;&gt;Firestore&lt;/a&gt; to persist state. I like Firestore a lot and, having been around Google for almost (!) a decade, I much prefer it to Datastore.&lt;/p&gt;&#xA;&lt;p&gt;Firestore has a &lt;a href=&#34;https://firebase.google.com/docs/firestore/manage-data/export-import&#34;&gt;managed export|import service&lt;/a&gt; and I use this to backup Firestore collections|documents.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;d been doing backups manually (using &lt;code&gt;gcloud&lt;/code&gt;) and decided today to take the plunge and use &lt;a href=&#34;https://cloud.google.com/scheduler&#34;&gt;Cloud Scheduler&lt;/a&gt; for the first time. I&amp;rsquo;d been reluctant to do this until now because I&amp;rsquo;d assumed &lt;strong&gt;incorrectly&lt;/strong&gt; that I&amp;rsquo;d need to write a wrapping service to invoke the export.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Google&#39;s Public Certificate Authority with Golang autocert</title>
      <link>https://pretired.dazwilkin.com/posts/220421/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/220421/</guid>
      <description>&lt;p&gt;Last year, I wrote about using &lt;a href=&#34;https://pretired.dazwilkin.com/posts/211130/&#34;&gt;Automatic Certs w/ Golang gRPC service on Compute Engine&lt;/a&gt;. That solution uses &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34;&gt;ACME&lt;/a&gt; with (the wonderful) &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;. Google is offering a private preview of &lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api&#34;&gt;Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)&lt;/a&gt; and, because I&amp;rsquo;m using Google Cloud Platform extensively to build a &amp;ldquo;thing&amp;rdquo; and I think it would be useful to have a backup to Let&amp;rsquo;s Encrypt, I thought I&amp;rsquo;d give the solution a try. You&amp;rsquo;ll need to sign-up for the private preview, for what follows to work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Infrastructure as Code</title>
      <link>https://pretired.dazwilkin.com/posts/210902/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210902/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m building an application that comprises:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kubernetes¹&lt;/li&gt;&#xA;&lt;li&gt;Kubernetes Operator&lt;/li&gt;&#xA;&lt;li&gt;Cloud Firestore&lt;/li&gt;&#xA;&lt;li&gt;Cloud Functions&lt;/li&gt;&#xA;&lt;li&gt;Cloud Run&lt;/li&gt;&#xA;&lt;li&gt;Cloud Endpoints&lt;/li&gt;&#xA;&lt;li&gt;Stripe&lt;/li&gt;&#xA;&lt;li&gt;Firebase Authentication&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;¹ - I&amp;rsquo;m using Google Kubernetes Engine (GKE) but may include other managed Kubernetes offerings (e.g. Digital Ocean, Linode, Oracle). GKE clusters are manageable by &lt;code&gt;gcloud&lt;/code&gt; but other platforms require other CLI tools. All are accessible from bash but are these supported by e.g. Terraform (see below)?&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Many of the components are packaged as container images and, because I&amp;rsquo;m using GitHub to host the project&amp;rsquo;s repos (I&amp;rsquo;ll leave the monorepo discussion for another post), I&amp;rsquo;ve become inculcated and use GitHub Container Registry (GHCR) as the container repo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cloud Firestore Triggers in Golang</title>
      <link>https://pretired.dazwilkin.com/posts/210413/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/210413/</guid>
      <description>&lt;p&gt;I was pleased to discover that Google provides a non-Node.JS mechanism to subscribe to and act upon Firestore triggers, &lt;a href=&#34;https://cloud.google.com/functions/docs/calling/cloud-firestore&#34;&gt;Google Cloud Firestore Triggers&lt;/a&gt;. I&amp;rsquo;ve nothing against Node.JS but, for the project i&amp;rsquo;m developing, everything else is written in Golang. It&amp;rsquo;s good to keep it all in one language.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m perplexed that Cloud Functions still (!) only supports Go 1.13 (03-Sep-2019). Even &lt;a href=&#34;https://golang.org/doc/devel/release.html#go1.14&#34;&gt;Go 1.14&lt;/a&gt; (25-Feb-2020) was released pre-pandemic and we&amp;rsquo;re now running on 1.16. Come on Google!&lt;/p&gt;</description>
    </item>
    <item>
      <title>WASM Cloud Functions</title>
      <link>https://pretired.dazwilkin.com/posts/200617/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200617/</guid>
      <description>&lt;p&gt;Following on from &lt;a href=&#34;https://pretired.dazwilkin.com/posts/200612/&#34;&gt;waPC &amp;amp; Protobufs&lt;/a&gt; and a question on Stack Overflow about Cloud Functions, I was compelled to try running WASM on Cloud Functions no JavaScript.&lt;/p&gt;&#xA;&lt;p&gt;I wanted to reuse the WASM waPC functions that I&amp;rsquo;d written in Rust as described in the other post. Cloud Functions does not (yet!?) provide a Rust runtime and so I&amp;rsquo;m using the &lt;a href=&#34;https://github.com/wapc/wapc-go&#34;&gt;waPC Host for Go&lt;/a&gt; in this example.&lt;/p&gt;&#xA;&lt;p&gt;It works!&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PARAMS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;a&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3},&amp;#34;b&amp;#34;:{&amp;#34;real&amp;#34;:39,&amp;#34;imag&amp;#34;:3}}&amp;#39;&lt;/span&gt; | base64&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;gcloud auth print-identity-token&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;filename\&amp;#34;:\&amp;#34;complex.wasm\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;function\&amp;#34;:\&amp;#34;c:mul\&amp;#34;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&#x9;\&amp;#34;params\&amp;#34;:\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PARAMS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;curl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--silent &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--data @- &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;https://&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;REGION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PROJECT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.cloudfunctions.net/invoker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yields (correctly):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up a GCE Instance as an Inlets Exit Node</title>
      <link>https://pretired.dazwilkin.com/posts/200122/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 -0800</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/200122/</guid>
      <description>&lt;p&gt;The prolific &lt;a href=&#34;https://blog.alexellis.io/&#34;&gt;Alex Ellis&lt;/a&gt; has a new project, &lt;a href=&#34;https://github.com/inlets/inlets&#34;&gt;Inlets&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a quick tutorial using &lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Compute Platform&amp;rsquo;s (GCP)&lt;/a&gt; &lt;a href=&#34;https://cloud.google.com/compute/&#34;&gt;Compute Engine (GCE)&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt; I&amp;rsquo;m using one of Google&amp;rsquo;s &lt;a href=&#34;https://cloud.google.com/free/&#34;&gt;&amp;ldquo;Always free&amp;rdquo;&lt;/a&gt; f1-micro instances &lt;strong&gt;but&lt;/strong&gt; you may still pay for network *gress and storage&lt;/p&gt;&#xA;&lt;h2 id=&#34;assumptions&#34;&gt;Assumptions&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;m assuming you&amp;rsquo;ve a Google account, have used GCP and have a billing account established, i.e. the following returns at least one billing account:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gcloud beta billing accounts list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;ve only one billing account and it&amp;rsquo;s the one you wish to use, then you can:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Google Cloud Platform (GCP) Exporter</title>
      <link>https://pretired.dazwilkin.com/posts/191220/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 -0700</pubDate>
      <guid>https://pretired.dazwilkin.com/posts/191220/</guid>
      <description>&lt;p&gt;Earlier this week I discussed a &lt;a href=&#34;https://pretired.dazwilkin.com/posts/191218/&#34;&gt;Linode Prometheus Exporter&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I &lt;a href=&#34;https://github.com/metalmatze/digitalocean_exporter/pull/5&#34;&gt;added&lt;/a&gt; metrics for &lt;a href=&#34;https://www.digitalocean.com/products/kubernetes/&#34;&gt;Digital Ocean&amp;rsquo;s Managed Kubernetes service&lt;/a&gt; to &lt;a href=&#34;https://github.com/metalmatze&#34;&gt;@metalmatze&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/metalmatze/digitalocean_exporter&#34;&gt;Digital Ocean Exporter&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This left, metrics for &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt; which has, for many years, been my primary cloud platform. So, today I wrote &lt;a href=&#34;https://github.com/DazWilkin/gcp-exporter&#34;&gt;Prometheus Exporter for Google Cloud Platform&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;All 3 of these exporters follow the template laid down by @metalmatze and, because each of these services has a well-written Golang SDK, it&amp;rsquo;s straightforward to implement an exporter for each of them.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
